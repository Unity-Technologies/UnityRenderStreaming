// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log2.proto

#ifndef PROTOBUF_INCLUDED_rtc_5fevent_5flog2_2eproto
#define PROTOBUF_INCLUDED_rtc_5fevent_5flog2_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog2_2eproto 

namespace protobuf_rtc_5fevent_5flog2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[23];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_rtc_5fevent_5flog2_2eproto
namespace webrtc {
namespace rtclog2 {
class AlrState;
class AlrStateDefaultTypeInternal;
extern AlrStateDefaultTypeInternal _AlrState_default_instance_;
class AudioNetworkAdaptations;
class AudioNetworkAdaptationsDefaultTypeInternal;
extern AudioNetworkAdaptationsDefaultTypeInternal _AudioNetworkAdaptations_default_instance_;
class AudioPlayoutEvents;
class AudioPlayoutEventsDefaultTypeInternal;
extern AudioPlayoutEventsDefaultTypeInternal _AudioPlayoutEvents_default_instance_;
class AudioRecvStreamConfig;
class AudioRecvStreamConfigDefaultTypeInternal;
extern AudioRecvStreamConfigDefaultTypeInternal _AudioRecvStreamConfig_default_instance_;
class AudioSendStreamConfig;
class AudioSendStreamConfigDefaultTypeInternal;
extern AudioSendStreamConfigDefaultTypeInternal _AudioSendStreamConfig_default_instance_;
class BeginLogEvent;
class BeginLogEventDefaultTypeInternal;
extern BeginLogEventDefaultTypeInternal _BeginLogEvent_default_instance_;
class BweProbeCluster;
class BweProbeClusterDefaultTypeInternal;
extern BweProbeClusterDefaultTypeInternal _BweProbeCluster_default_instance_;
class BweProbeResultFailure;
class BweProbeResultFailureDefaultTypeInternal;
extern BweProbeResultFailureDefaultTypeInternal _BweProbeResultFailure_default_instance_;
class BweProbeResultSuccess;
class BweProbeResultSuccessDefaultTypeInternal;
extern BweProbeResultSuccessDefaultTypeInternal _BweProbeResultSuccess_default_instance_;
class DelayBasedBweUpdates;
class DelayBasedBweUpdatesDefaultTypeInternal;
extern DelayBasedBweUpdatesDefaultTypeInternal _DelayBasedBweUpdates_default_instance_;
class EndLogEvent;
class EndLogEventDefaultTypeInternal;
extern EndLogEventDefaultTypeInternal _EndLogEvent_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventStream;
class EventStreamDefaultTypeInternal;
extern EventStreamDefaultTypeInternal _EventStream_default_instance_;
class IceCandidatePairConfig;
class IceCandidatePairConfigDefaultTypeInternal;
extern IceCandidatePairConfigDefaultTypeInternal _IceCandidatePairConfig_default_instance_;
class IceCandidatePairEvent;
class IceCandidatePairEventDefaultTypeInternal;
extern IceCandidatePairEventDefaultTypeInternal _IceCandidatePairEvent_default_instance_;
class IncomingRtcpPackets;
class IncomingRtcpPacketsDefaultTypeInternal;
extern IncomingRtcpPacketsDefaultTypeInternal _IncomingRtcpPackets_default_instance_;
class IncomingRtpPackets;
class IncomingRtpPacketsDefaultTypeInternal;
extern IncomingRtpPacketsDefaultTypeInternal _IncomingRtpPackets_default_instance_;
class LossBasedBweUpdates;
class LossBasedBweUpdatesDefaultTypeInternal;
extern LossBasedBweUpdatesDefaultTypeInternal _LossBasedBweUpdates_default_instance_;
class OutgoingRtcpPackets;
class OutgoingRtcpPacketsDefaultTypeInternal;
extern OutgoingRtcpPacketsDefaultTypeInternal _OutgoingRtcpPackets_default_instance_;
class OutgoingRtpPackets;
class OutgoingRtpPacketsDefaultTypeInternal;
extern OutgoingRtpPacketsDefaultTypeInternal _OutgoingRtpPackets_default_instance_;
class RtpHeaderExtensionConfig;
class RtpHeaderExtensionConfigDefaultTypeInternal;
extern RtpHeaderExtensionConfigDefaultTypeInternal _RtpHeaderExtensionConfig_default_instance_;
class VideoRecvStreamConfig;
class VideoRecvStreamConfigDefaultTypeInternal;
extern VideoRecvStreamConfigDefaultTypeInternal _VideoRecvStreamConfig_default_instance_;
class VideoSendStreamConfig;
class VideoSendStreamConfigDefaultTypeInternal;
extern VideoSendStreamConfigDefaultTypeInternal _VideoSendStreamConfig_default_instance_;
}  // namespace rtclog2
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> ::webrtc::rtclog2::AlrState* Arena::CreateMaybeMessage<::webrtc::rtclog2::AlrState>(Arena*);
template<> ::webrtc::rtclog2::AudioNetworkAdaptations* Arena::CreateMaybeMessage<::webrtc::rtclog2::AudioNetworkAdaptations>(Arena*);
template<> ::webrtc::rtclog2::AudioPlayoutEvents* Arena::CreateMaybeMessage<::webrtc::rtclog2::AudioPlayoutEvents>(Arena*);
template<> ::webrtc::rtclog2::AudioRecvStreamConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::AudioRecvStreamConfig>(Arena*);
template<> ::webrtc::rtclog2::AudioSendStreamConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::AudioSendStreamConfig>(Arena*);
template<> ::webrtc::rtclog2::BeginLogEvent* Arena::CreateMaybeMessage<::webrtc::rtclog2::BeginLogEvent>(Arena*);
template<> ::webrtc::rtclog2::BweProbeCluster* Arena::CreateMaybeMessage<::webrtc::rtclog2::BweProbeCluster>(Arena*);
template<> ::webrtc::rtclog2::BweProbeResultFailure* Arena::CreateMaybeMessage<::webrtc::rtclog2::BweProbeResultFailure>(Arena*);
template<> ::webrtc::rtclog2::BweProbeResultSuccess* Arena::CreateMaybeMessage<::webrtc::rtclog2::BweProbeResultSuccess>(Arena*);
template<> ::webrtc::rtclog2::DelayBasedBweUpdates* Arena::CreateMaybeMessage<::webrtc::rtclog2::DelayBasedBweUpdates>(Arena*);
template<> ::webrtc::rtclog2::EndLogEvent* Arena::CreateMaybeMessage<::webrtc::rtclog2::EndLogEvent>(Arena*);
template<> ::webrtc::rtclog2::Event* Arena::CreateMaybeMessage<::webrtc::rtclog2::Event>(Arena*);
template<> ::webrtc::rtclog2::EventStream* Arena::CreateMaybeMessage<::webrtc::rtclog2::EventStream>(Arena*);
template<> ::webrtc::rtclog2::IceCandidatePairConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::IceCandidatePairConfig>(Arena*);
template<> ::webrtc::rtclog2::IceCandidatePairEvent* Arena::CreateMaybeMessage<::webrtc::rtclog2::IceCandidatePairEvent>(Arena*);
template<> ::webrtc::rtclog2::IncomingRtcpPackets* Arena::CreateMaybeMessage<::webrtc::rtclog2::IncomingRtcpPackets>(Arena*);
template<> ::webrtc::rtclog2::IncomingRtpPackets* Arena::CreateMaybeMessage<::webrtc::rtclog2::IncomingRtpPackets>(Arena*);
template<> ::webrtc::rtclog2::LossBasedBweUpdates* Arena::CreateMaybeMessage<::webrtc::rtclog2::LossBasedBweUpdates>(Arena*);
template<> ::webrtc::rtclog2::OutgoingRtcpPackets* Arena::CreateMaybeMessage<::webrtc::rtclog2::OutgoingRtcpPackets>(Arena*);
template<> ::webrtc::rtclog2::OutgoingRtpPackets* Arena::CreateMaybeMessage<::webrtc::rtclog2::OutgoingRtpPackets>(Arena*);
template<> ::webrtc::rtclog2::RtpHeaderExtensionConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(Arena*);
template<> ::webrtc::rtclog2::VideoRecvStreamConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::VideoRecvStreamConfig>(Arena*);
template<> ::webrtc::rtclog2::VideoSendStreamConfig* Arena::CreateMaybeMessage<::webrtc::rtclog2::VideoSendStreamConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace webrtc {
namespace rtclog2 {

enum DelayBasedBweUpdates_DetectorState {
  DelayBasedBweUpdates_DetectorState_BWE_UNKNOWN_STATE = 0,
  DelayBasedBweUpdates_DetectorState_BWE_NORMAL = 1,
  DelayBasedBweUpdates_DetectorState_BWE_UNDERUSING = 2,
  DelayBasedBweUpdates_DetectorState_BWE_OVERUSING = 3
};
bool DelayBasedBweUpdates_DetectorState_IsValid(int value);
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates_DetectorState_DetectorState_MIN = DelayBasedBweUpdates_DetectorState_BWE_UNKNOWN_STATE;
const DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates_DetectorState_DetectorState_MAX = DelayBasedBweUpdates_DetectorState_BWE_OVERUSING;
const int DelayBasedBweUpdates_DetectorState_DetectorState_ARRAYSIZE = DelayBasedBweUpdates_DetectorState_DetectorState_MAX + 1;

enum BweProbeResultFailure_FailureReason {
  BweProbeResultFailure_FailureReason_UNKNOWN = 0,
  BweProbeResultFailure_FailureReason_INVALID_SEND_RECEIVE_INTERVAL = 1,
  BweProbeResultFailure_FailureReason_INVALID_SEND_RECEIVE_RATIO = 2,
  BweProbeResultFailure_FailureReason_TIMEOUT = 3
};
bool BweProbeResultFailure_FailureReason_IsValid(int value);
const BweProbeResultFailure_FailureReason BweProbeResultFailure_FailureReason_FailureReason_MIN = BweProbeResultFailure_FailureReason_UNKNOWN;
const BweProbeResultFailure_FailureReason BweProbeResultFailure_FailureReason_FailureReason_MAX = BweProbeResultFailure_FailureReason_TIMEOUT;
const int BweProbeResultFailure_FailureReason_FailureReason_ARRAYSIZE = BweProbeResultFailure_FailureReason_FailureReason_MAX + 1;

enum IceCandidatePairConfig_IceCandidatePairConfigType {
  IceCandidatePairConfig_IceCandidatePairConfigType_UNKNOWN_CONFIG_TYPE = 0,
  IceCandidatePairConfig_IceCandidatePairConfigType_ADDED = 1,
  IceCandidatePairConfig_IceCandidatePairConfigType_UPDATED = 2,
  IceCandidatePairConfig_IceCandidatePairConfigType_DESTROYED = 3,
  IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED = 4
};
bool IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(int value);
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MIN = IceCandidatePairConfig_IceCandidatePairConfigType_UNKNOWN_CONFIG_TYPE;
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX = IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED;
const int IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_ARRAYSIZE = IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX + 1;

enum IceCandidatePairConfig_IceCandidateType {
  IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE = 0,
  IceCandidatePairConfig_IceCandidateType_LOCAL = 1,
  IceCandidatePairConfig_IceCandidateType_STUN = 2,
  IceCandidatePairConfig_IceCandidateType_PRFLX = 3,
  IceCandidatePairConfig_IceCandidateType_RELAY = 4
};
bool IceCandidatePairConfig_IceCandidateType_IsValid(int value);
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig_IceCandidateType_IceCandidateType_MIN = IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE;
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX = IceCandidatePairConfig_IceCandidateType_RELAY;
const int IceCandidatePairConfig_IceCandidateType_IceCandidateType_ARRAYSIZE = IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX + 1;

enum IceCandidatePairConfig_Protocol {
  IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL = 0,
  IceCandidatePairConfig_Protocol_UDP = 1,
  IceCandidatePairConfig_Protocol_TCP = 2,
  IceCandidatePairConfig_Protocol_SSLTCP = 3,
  IceCandidatePairConfig_Protocol_TLS = 4
};
bool IceCandidatePairConfig_Protocol_IsValid(int value);
const IceCandidatePairConfig_Protocol IceCandidatePairConfig_Protocol_Protocol_MIN = IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL;
const IceCandidatePairConfig_Protocol IceCandidatePairConfig_Protocol_Protocol_MAX = IceCandidatePairConfig_Protocol_TLS;
const int IceCandidatePairConfig_Protocol_Protocol_ARRAYSIZE = IceCandidatePairConfig_Protocol_Protocol_MAX + 1;

enum IceCandidatePairConfig_AddressFamily {
  IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY = 0,
  IceCandidatePairConfig_AddressFamily_IPV4 = 1,
  IceCandidatePairConfig_AddressFamily_IPV6 = 2
};
bool IceCandidatePairConfig_AddressFamily_IsValid(int value);
const IceCandidatePairConfig_AddressFamily IceCandidatePairConfig_AddressFamily_AddressFamily_MIN = IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY;
const IceCandidatePairConfig_AddressFamily IceCandidatePairConfig_AddressFamily_AddressFamily_MAX = IceCandidatePairConfig_AddressFamily_IPV6;
const int IceCandidatePairConfig_AddressFamily_AddressFamily_ARRAYSIZE = IceCandidatePairConfig_AddressFamily_AddressFamily_MAX + 1;

enum IceCandidatePairConfig_NetworkType {
  IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE = 0,
  IceCandidatePairConfig_NetworkType_ETHERNET = 1,
  IceCandidatePairConfig_NetworkType_WIFI = 2,
  IceCandidatePairConfig_NetworkType_CELLULAR = 3,
  IceCandidatePairConfig_NetworkType_VPN = 4,
  IceCandidatePairConfig_NetworkType_LOOPBACK = 5
};
bool IceCandidatePairConfig_NetworkType_IsValid(int value);
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig_NetworkType_NetworkType_MIN = IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE;
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig_NetworkType_NetworkType_MAX = IceCandidatePairConfig_NetworkType_LOOPBACK;
const int IceCandidatePairConfig_NetworkType_NetworkType_ARRAYSIZE = IceCandidatePairConfig_NetworkType_NetworkType_MAX + 1;

enum IceCandidatePairEvent_IceCandidatePairEventType {
  IceCandidatePairEvent_IceCandidatePairEventType_UNKNOWN_CHECK_TYPE = 0,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_SENT = 1,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RECEIVED = 2,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_SENT = 3,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED = 4
};
bool IceCandidatePairEvent_IceCandidatePairEventType_IsValid(int value);
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MIN = IceCandidatePairEvent_IceCandidatePairEventType_UNKNOWN_CHECK_TYPE;
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX = IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED;
const int IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_ARRAYSIZE = IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX + 1;

// ===================================================================

class EventStream : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.EventStream) */ {
 public:
  EventStream();
  virtual ~EventStream();

  EventStream(const EventStream& from);

  inline EventStream& operator=(const EventStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventStream(EventStream&& from) noexcept
    : EventStream() {
    *this = ::std::move(from);
  }

  inline EventStream& operator=(EventStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventStream* internal_default_instance() {
    return reinterpret_cast<const EventStream*>(
               &_EventStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(EventStream* other);
  friend void swap(EventStream& a, EventStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventStream* New() const final {
    return CreateMaybeMessage<EventStream>(NULL);
  }

  EventStream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventStream>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EventStream& from);
  void MergeFrom(const EventStream& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR int stream_size() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_stream();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kStreamFieldNumber = 1;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::webrtc::rtclog2::Event* mutable_stream(int index);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::Event >*
      mutable_stream();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::webrtc::rtclog2::Event& stream(int index) const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::webrtc::rtclog2::Event* add_stream();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::Event >&
      stream() const;

  // repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
  int incoming_rtp_packets_size() const;
  void clear_incoming_rtp_packets();
  static const int kIncomingRtpPacketsFieldNumber = 2;
  ::webrtc::rtclog2::IncomingRtpPackets* mutable_incoming_rtp_packets(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >*
      mutable_incoming_rtp_packets();
  const ::webrtc::rtclog2::IncomingRtpPackets& incoming_rtp_packets(int index) const;
  ::webrtc::rtclog2::IncomingRtpPackets* add_incoming_rtp_packets();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >&
      incoming_rtp_packets() const;

  // repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
  int outgoing_rtp_packets_size() const;
  void clear_outgoing_rtp_packets();
  static const int kOutgoingRtpPacketsFieldNumber = 3;
  ::webrtc::rtclog2::OutgoingRtpPackets* mutable_outgoing_rtp_packets(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >*
      mutable_outgoing_rtp_packets();
  const ::webrtc::rtclog2::OutgoingRtpPackets& outgoing_rtp_packets(int index) const;
  ::webrtc::rtclog2::OutgoingRtpPackets* add_outgoing_rtp_packets();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >&
      outgoing_rtp_packets() const;

  // repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
  int incoming_rtcp_packets_size() const;
  void clear_incoming_rtcp_packets();
  static const int kIncomingRtcpPacketsFieldNumber = 4;
  ::webrtc::rtclog2::IncomingRtcpPackets* mutable_incoming_rtcp_packets(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >*
      mutable_incoming_rtcp_packets();
  const ::webrtc::rtclog2::IncomingRtcpPackets& incoming_rtcp_packets(int index) const;
  ::webrtc::rtclog2::IncomingRtcpPackets* add_incoming_rtcp_packets();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >&
      incoming_rtcp_packets() const;

  // repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
  int outgoing_rtcp_packets_size() const;
  void clear_outgoing_rtcp_packets();
  static const int kOutgoingRtcpPacketsFieldNumber = 5;
  ::webrtc::rtclog2::OutgoingRtcpPackets* mutable_outgoing_rtcp_packets(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >*
      mutable_outgoing_rtcp_packets();
  const ::webrtc::rtclog2::OutgoingRtcpPackets& outgoing_rtcp_packets(int index) const;
  ::webrtc::rtclog2::OutgoingRtcpPackets* add_outgoing_rtcp_packets();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >&
      outgoing_rtcp_packets() const;

  // repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
  int audio_playout_events_size() const;
  void clear_audio_playout_events();
  static const int kAudioPlayoutEventsFieldNumber = 6;
  ::webrtc::rtclog2::AudioPlayoutEvents* mutable_audio_playout_events(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >*
      mutable_audio_playout_events();
  const ::webrtc::rtclog2::AudioPlayoutEvents& audio_playout_events(int index) const;
  ::webrtc::rtclog2::AudioPlayoutEvents* add_audio_playout_events();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >&
      audio_playout_events() const;

  // repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
  int begin_log_events_size() const;
  void clear_begin_log_events();
  static const int kBeginLogEventsFieldNumber = 16;
  ::webrtc::rtclog2::BeginLogEvent* mutable_begin_log_events(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >*
      mutable_begin_log_events();
  const ::webrtc::rtclog2::BeginLogEvent& begin_log_events(int index) const;
  ::webrtc::rtclog2::BeginLogEvent* add_begin_log_events();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >&
      begin_log_events() const;

  // repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
  int end_log_events_size() const;
  void clear_end_log_events();
  static const int kEndLogEventsFieldNumber = 17;
  ::webrtc::rtclog2::EndLogEvent* mutable_end_log_events(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >*
      mutable_end_log_events();
  const ::webrtc::rtclog2::EndLogEvent& end_log_events(int index) const;
  ::webrtc::rtclog2::EndLogEvent* add_end_log_events();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >&
      end_log_events() const;

  // repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
  int loss_based_bwe_updates_size() const;
  void clear_loss_based_bwe_updates();
  static const int kLossBasedBweUpdatesFieldNumber = 18;
  ::webrtc::rtclog2::LossBasedBweUpdates* mutable_loss_based_bwe_updates(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >*
      mutable_loss_based_bwe_updates();
  const ::webrtc::rtclog2::LossBasedBweUpdates& loss_based_bwe_updates(int index) const;
  ::webrtc::rtclog2::LossBasedBweUpdates* add_loss_based_bwe_updates();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >&
      loss_based_bwe_updates() const;

  // repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
  int delay_based_bwe_updates_size() const;
  void clear_delay_based_bwe_updates();
  static const int kDelayBasedBweUpdatesFieldNumber = 19;
  ::webrtc::rtclog2::DelayBasedBweUpdates* mutable_delay_based_bwe_updates(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >*
      mutable_delay_based_bwe_updates();
  const ::webrtc::rtclog2::DelayBasedBweUpdates& delay_based_bwe_updates(int index) const;
  ::webrtc::rtclog2::DelayBasedBweUpdates* add_delay_based_bwe_updates();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >&
      delay_based_bwe_updates() const;

  // repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
  int audio_network_adaptations_size() const;
  void clear_audio_network_adaptations();
  static const int kAudioNetworkAdaptationsFieldNumber = 20;
  ::webrtc::rtclog2::AudioNetworkAdaptations* mutable_audio_network_adaptations(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >*
      mutable_audio_network_adaptations();
  const ::webrtc::rtclog2::AudioNetworkAdaptations& audio_network_adaptations(int index) const;
  ::webrtc::rtclog2::AudioNetworkAdaptations* add_audio_network_adaptations();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >&
      audio_network_adaptations() const;

  // repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
  int probe_clusters_size() const;
  void clear_probe_clusters();
  static const int kProbeClustersFieldNumber = 21;
  ::webrtc::rtclog2::BweProbeCluster* mutable_probe_clusters(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >*
      mutable_probe_clusters();
  const ::webrtc::rtclog2::BweProbeCluster& probe_clusters(int index) const;
  ::webrtc::rtclog2::BweProbeCluster* add_probe_clusters();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >&
      probe_clusters() const;

  // repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
  int probe_success_size() const;
  void clear_probe_success();
  static const int kProbeSuccessFieldNumber = 22;
  ::webrtc::rtclog2::BweProbeResultSuccess* mutable_probe_success(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >*
      mutable_probe_success();
  const ::webrtc::rtclog2::BweProbeResultSuccess& probe_success(int index) const;
  ::webrtc::rtclog2::BweProbeResultSuccess* add_probe_success();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >&
      probe_success() const;

  // repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
  int probe_failure_size() const;
  void clear_probe_failure();
  static const int kProbeFailureFieldNumber = 23;
  ::webrtc::rtclog2::BweProbeResultFailure* mutable_probe_failure(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >*
      mutable_probe_failure();
  const ::webrtc::rtclog2::BweProbeResultFailure& probe_failure(int index) const;
  ::webrtc::rtclog2::BweProbeResultFailure* add_probe_failure();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >&
      probe_failure() const;

  // repeated .webrtc.rtclog2.AlrState alr_states = 24;
  int alr_states_size() const;
  void clear_alr_states();
  static const int kAlrStatesFieldNumber = 24;
  ::webrtc::rtclog2::AlrState* mutable_alr_states(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AlrState >*
      mutable_alr_states();
  const ::webrtc::rtclog2::AlrState& alr_states(int index) const;
  ::webrtc::rtclog2::AlrState* add_alr_states();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AlrState >&
      alr_states() const;

  // repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
  int ice_candidate_configs_size() const;
  void clear_ice_candidate_configs();
  static const int kIceCandidateConfigsFieldNumber = 25;
  ::webrtc::rtclog2::IceCandidatePairConfig* mutable_ice_candidate_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig >*
      mutable_ice_candidate_configs();
  const ::webrtc::rtclog2::IceCandidatePairConfig& ice_candidate_configs(int index) const;
  ::webrtc::rtclog2::IceCandidatePairConfig* add_ice_candidate_configs();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig >&
      ice_candidate_configs() const;

  // repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
  int ice_candidate_events_size() const;
  void clear_ice_candidate_events();
  static const int kIceCandidateEventsFieldNumber = 26;
  ::webrtc::rtclog2::IceCandidatePairEvent* mutable_ice_candidate_events(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent >*
      mutable_ice_candidate_events();
  const ::webrtc::rtclog2::IceCandidatePairEvent& ice_candidate_events(int index) const;
  ::webrtc::rtclog2::IceCandidatePairEvent* add_ice_candidate_events();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent >&
      ice_candidate_events() const;

  // repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
  int audio_recv_stream_configs_size() const;
  void clear_audio_recv_stream_configs();
  static const int kAudioRecvStreamConfigsFieldNumber = 101;
  ::webrtc::rtclog2::AudioRecvStreamConfig* mutable_audio_recv_stream_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >*
      mutable_audio_recv_stream_configs();
  const ::webrtc::rtclog2::AudioRecvStreamConfig& audio_recv_stream_configs(int index) const;
  ::webrtc::rtclog2::AudioRecvStreamConfig* add_audio_recv_stream_configs();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >&
      audio_recv_stream_configs() const;

  // repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
  int audio_send_stream_configs_size() const;
  void clear_audio_send_stream_configs();
  static const int kAudioSendStreamConfigsFieldNumber = 102;
  ::webrtc::rtclog2::AudioSendStreamConfig* mutable_audio_send_stream_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >*
      mutable_audio_send_stream_configs();
  const ::webrtc::rtclog2::AudioSendStreamConfig& audio_send_stream_configs(int index) const;
  ::webrtc::rtclog2::AudioSendStreamConfig* add_audio_send_stream_configs();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >&
      audio_send_stream_configs() const;

  // repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
  int video_recv_stream_configs_size() const;
  void clear_video_recv_stream_configs();
  static const int kVideoRecvStreamConfigsFieldNumber = 103;
  ::webrtc::rtclog2::VideoRecvStreamConfig* mutable_video_recv_stream_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >*
      mutable_video_recv_stream_configs();
  const ::webrtc::rtclog2::VideoRecvStreamConfig& video_recv_stream_configs(int index) const;
  ::webrtc::rtclog2::VideoRecvStreamConfig* add_video_recv_stream_configs();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >&
      video_recv_stream_configs() const;

  // repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
  int video_send_stream_configs_size() const;
  void clear_video_send_stream_configs();
  static const int kVideoSendStreamConfigsFieldNumber = 104;
  ::webrtc::rtclog2::VideoSendStreamConfig* mutable_video_send_stream_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >*
      mutable_video_send_stream_configs();
  const ::webrtc::rtclog2::VideoSendStreamConfig& video_send_stream_configs(int index) const;
  ::webrtc::rtclog2::VideoSendStreamConfig* add_video_send_stream_configs();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >&
      video_send_stream_configs() const;

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.EventStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::Event > stream_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets > incoming_rtp_packets_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets > outgoing_rtp_packets_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets > incoming_rtcp_packets_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets > outgoing_rtcp_packets_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents > audio_playout_events_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent > begin_log_events_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent > end_log_events_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates > loss_based_bwe_updates_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates > delay_based_bwe_updates_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations > audio_network_adaptations_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster > probe_clusters_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess > probe_success_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure > probe_failure_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AlrState > alr_states_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig > ice_candidate_configs_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent > ice_candidate_events_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig > audio_recv_stream_configs_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig > audio_send_stream_configs_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig > video_recv_stream_configs_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig > video_send_stream_configs_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncomingRtpPackets : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.IncomingRtpPackets) */ {
 public:
  IncomingRtpPackets();
  virtual ~IncomingRtpPackets();

  IncomingRtpPackets(const IncomingRtpPackets& from);

  inline IncomingRtpPackets& operator=(const IncomingRtpPackets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncomingRtpPackets(IncomingRtpPackets&& from) noexcept
    : IncomingRtpPackets() {
    *this = ::std::move(from);
  }

  inline IncomingRtpPackets& operator=(IncomingRtpPackets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IncomingRtpPackets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncomingRtpPackets* internal_default_instance() {
    return reinterpret_cast<const IncomingRtpPackets*>(
               &_IncomingRtpPackets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(IncomingRtpPackets* other);
  friend void swap(IncomingRtpPackets& a, IncomingRtpPackets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncomingRtpPackets* New() const final {
    return CreateMaybeMessage<IncomingRtpPackets>(NULL);
  }

  IncomingRtpPackets* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncomingRtpPackets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IncomingRtpPackets& from);
  void MergeFrom(const IncomingRtpPackets& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncomingRtpPackets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  static const int kTimestampMsDeltasFieldNumber = 101;
  const ::std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp_ms_deltas(::std::string&& value);
  #endif
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  ::std::string* mutable_timestamp_ms_deltas();
  ::std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas);

  // optional bytes marker_deltas = 102;
  bool has_marker_deltas() const;
  void clear_marker_deltas();
  static const int kMarkerDeltasFieldNumber = 102;
  const ::std::string& marker_deltas() const;
  void set_marker_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_marker_deltas(::std::string&& value);
  #endif
  void set_marker_deltas(const char* value);
  void set_marker_deltas(const void* value, size_t size);
  ::std::string* mutable_marker_deltas();
  ::std::string* release_marker_deltas();
  void set_allocated_marker_deltas(::std::string* marker_deltas);

  // optional bytes payload_type_deltas = 103;
  bool has_payload_type_deltas() const;
  void clear_payload_type_deltas();
  static const int kPayloadTypeDeltasFieldNumber = 103;
  const ::std::string& payload_type_deltas() const;
  void set_payload_type_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_payload_type_deltas(::std::string&& value);
  #endif
  void set_payload_type_deltas(const char* value);
  void set_payload_type_deltas(const void* value, size_t size);
  ::std::string* mutable_payload_type_deltas();
  ::std::string* release_payload_type_deltas();
  void set_allocated_payload_type_deltas(::std::string* payload_type_deltas);

  // optional bytes sequence_number_deltas = 104;
  bool has_sequence_number_deltas() const;
  void clear_sequence_number_deltas();
  static const int kSequenceNumberDeltasFieldNumber = 104;
  const ::std::string& sequence_number_deltas() const;
  void set_sequence_number_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_sequence_number_deltas(::std::string&& value);
  #endif
  void set_sequence_number_deltas(const char* value);
  void set_sequence_number_deltas(const void* value, size_t size);
  ::std::string* mutable_sequence_number_deltas();
  ::std::string* release_sequence_number_deltas();
  void set_allocated_sequence_number_deltas(::std::string* sequence_number_deltas);

  // optional bytes rtp_timestamp_deltas = 105;
  bool has_rtp_timestamp_deltas() const;
  void clear_rtp_timestamp_deltas();
  static const int kRtpTimestampDeltasFieldNumber = 105;
  const ::std::string& rtp_timestamp_deltas() const;
  void set_rtp_timestamp_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_rtp_timestamp_deltas(::std::string&& value);
  #endif
  void set_rtp_timestamp_deltas(const char* value);
  void set_rtp_timestamp_deltas(const void* value, size_t size);
  ::std::string* mutable_rtp_timestamp_deltas();
  ::std::string* release_rtp_timestamp_deltas();
  void set_allocated_rtp_timestamp_deltas(::std::string* rtp_timestamp_deltas);

  // optional bytes ssrc_deltas = 106;
  bool has_ssrc_deltas() const;
  void clear_ssrc_deltas();
  static const int kSsrcDeltasFieldNumber = 106;
  const ::std::string& ssrc_deltas() const;
  void set_ssrc_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_ssrc_deltas(::std::string&& value);
  #endif
  void set_ssrc_deltas(const char* value);
  void set_ssrc_deltas(const void* value, size_t size);
  ::std::string* mutable_ssrc_deltas();
  ::std::string* release_ssrc_deltas();
  void set_allocated_ssrc_deltas(::std::string* ssrc_deltas);

  // optional bytes payload_size_deltas = 108;
  bool has_payload_size_deltas() const;
  void clear_payload_size_deltas();
  static const int kPayloadSizeDeltasFieldNumber = 108;
  const ::std::string& payload_size_deltas() const;
  void set_payload_size_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_payload_size_deltas(::std::string&& value);
  #endif
  void set_payload_size_deltas(const char* value);
  void set_payload_size_deltas(const void* value, size_t size);
  ::std::string* mutable_payload_size_deltas();
  ::std::string* release_payload_size_deltas();
  void set_allocated_payload_size_deltas(::std::string* payload_size_deltas);

  // optional bytes header_size_deltas = 109;
  bool has_header_size_deltas() const;
  void clear_header_size_deltas();
  static const int kHeaderSizeDeltasFieldNumber = 109;
  const ::std::string& header_size_deltas() const;
  void set_header_size_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_header_size_deltas(::std::string&& value);
  #endif
  void set_header_size_deltas(const char* value);
  void set_header_size_deltas(const void* value, size_t size);
  ::std::string* mutable_header_size_deltas();
  ::std::string* release_header_size_deltas();
  void set_allocated_header_size_deltas(::std::string* header_size_deltas);

  // optional bytes padding_size_deltas = 110;
  bool has_padding_size_deltas() const;
  void clear_padding_size_deltas();
  static const int kPaddingSizeDeltasFieldNumber = 110;
  const ::std::string& padding_size_deltas() const;
  void set_padding_size_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_padding_size_deltas(::std::string&& value);
  #endif
  void set_padding_size_deltas(const char* value);
  void set_padding_size_deltas(const void* value, size_t size);
  ::std::string* mutable_padding_size_deltas();
  ::std::string* release_padding_size_deltas();
  void set_allocated_padding_size_deltas(::std::string* padding_size_deltas);

  // optional bytes transport_sequence_number_deltas = 115;
  bool has_transport_sequence_number_deltas() const;
  void clear_transport_sequence_number_deltas();
  static const int kTransportSequenceNumberDeltasFieldNumber = 115;
  const ::std::string& transport_sequence_number_deltas() const;
  void set_transport_sequence_number_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_transport_sequence_number_deltas(::std::string&& value);
  #endif
  void set_transport_sequence_number_deltas(const char* value);
  void set_transport_sequence_number_deltas(const void* value, size_t size);
  ::std::string* mutable_transport_sequence_number_deltas();
  ::std::string* release_transport_sequence_number_deltas();
  void set_allocated_transport_sequence_number_deltas(::std::string* transport_sequence_number_deltas);

  // optional bytes transmission_time_offset_deltas = 116;
  bool has_transmission_time_offset_deltas() const;
  void clear_transmission_time_offset_deltas();
  static const int kTransmissionTimeOffsetDeltasFieldNumber = 116;
  const ::std::string& transmission_time_offset_deltas() const;
  void set_transmission_time_offset_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_transmission_time_offset_deltas(::std::string&& value);
  #endif
  void set_transmission_time_offset_deltas(const char* value);
  void set_transmission_time_offset_deltas(const void* value, size_t size);
  ::std::string* mutable_transmission_time_offset_deltas();
  ::std::string* release_transmission_time_offset_deltas();
  void set_allocated_transmission_time_offset_deltas(::std::string* transmission_time_offset_deltas);

  // optional bytes absolute_send_time_deltas = 117;
  bool has_absolute_send_time_deltas() const;
  void clear_absolute_send_time_deltas();
  static const int kAbsoluteSendTimeDeltasFieldNumber = 117;
  const ::std::string& absolute_send_time_deltas() const;
  void set_absolute_send_time_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_absolute_send_time_deltas(::std::string&& value);
  #endif
  void set_absolute_send_time_deltas(const char* value);
  void set_absolute_send_time_deltas(const void* value, size_t size);
  ::std::string* mutable_absolute_send_time_deltas();
  ::std::string* release_absolute_send_time_deltas();
  void set_allocated_absolute_send_time_deltas(::std::string* absolute_send_time_deltas);

  // optional bytes video_rotation_deltas = 118;
  bool has_video_rotation_deltas() const;
  void clear_video_rotation_deltas();
  static const int kVideoRotationDeltasFieldNumber = 118;
  const ::std::string& video_rotation_deltas() const;
  void set_video_rotation_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_video_rotation_deltas(::std::string&& value);
  #endif
  void set_video_rotation_deltas(const char* value);
  void set_video_rotation_deltas(const void* value, size_t size);
  ::std::string* mutable_video_rotation_deltas();
  ::std::string* release_video_rotation_deltas();
  void set_allocated_video_rotation_deltas(::std::string* video_rotation_deltas);

  // optional bytes audio_level_deltas = 119;
  bool has_audio_level_deltas() const;
  void clear_audio_level_deltas();
  static const int kAudioLevelDeltasFieldNumber = 119;
  const ::std::string& audio_level_deltas() const;
  void set_audio_level_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_level_deltas(::std::string&& value);
  #endif
  void set_audio_level_deltas(const char* value);
  void set_audio_level_deltas(const void* value, size_t size);
  ::std::string* mutable_audio_level_deltas();
  ::std::string* release_audio_level_deltas();
  void set_allocated_audio_level_deltas(::std::string* audio_level_deltas);

  // optional bytes voice_activity_deltas = 120;
  bool has_voice_activity_deltas() const;
  void clear_voice_activity_deltas();
  static const int kVoiceActivityDeltasFieldNumber = 120;
  const ::std::string& voice_activity_deltas() const;
  void set_voice_activity_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_voice_activity_deltas(::std::string&& value);
  #endif
  void set_voice_activity_deltas(const char* value);
  void set_voice_activity_deltas(const void* value, size_t size);
  ::std::string* mutable_voice_activity_deltas();
  ::std::string* release_voice_activity_deltas();
  void set_allocated_voice_activity_deltas(::std::string* voice_activity_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 payload_type = 3;
  bool has_payload_type() const;
  void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 3;
  ::google::protobuf::uint32 payload_type() const;
  void set_payload_type(::google::protobuf::uint32 value);

  // optional uint32 sequence_number = 4;
  bool has_sequence_number() const;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 4;
  ::google::protobuf::uint32 sequence_number() const;
  void set_sequence_number(::google::protobuf::uint32 value);

  // optional fixed32 rtp_timestamp = 5;
  bool has_rtp_timestamp() const;
  void clear_rtp_timestamp();
  static const int kRtpTimestampFieldNumber = 5;
  ::google::protobuf::uint32 rtp_timestamp() const;
  void set_rtp_timestamp(::google::protobuf::uint32 value);

  // optional fixed32 ssrc = 6;
  bool has_ssrc() const;
  void clear_ssrc();
  static const int kSsrcFieldNumber = 6;
  ::google::protobuf::uint32 ssrc() const;
  void set_ssrc(::google::protobuf::uint32 value);

  // optional uint32 payload_size = 8;
  bool has_payload_size() const;
  void clear_payload_size();
  static const int kPayloadSizeFieldNumber = 8;
  ::google::protobuf::uint32 payload_size() const;
  void set_payload_size(::google::protobuf::uint32 value);

  // optional uint32 header_size = 9;
  bool has_header_size() const;
  void clear_header_size();
  static const int kHeaderSizeFieldNumber = 9;
  ::google::protobuf::uint32 header_size() const;
  void set_header_size(::google::protobuf::uint32 value);

  // optional uint32 padding_size = 10;
  bool has_padding_size() const;
  void clear_padding_size();
  static const int kPaddingSizeFieldNumber = 10;
  ::google::protobuf::uint32 padding_size() const;
  void set_padding_size(::google::protobuf::uint32 value);

  // optional uint32 number_of_deltas = 11;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  static const int kNumberOfDeltasFieldNumber = 11;
  ::google::protobuf::uint32 number_of_deltas() const;
  void set_number_of_deltas(::google::protobuf::uint32 value);

  // optional bool marker = 2;
  bool has_marker() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 2;
  bool marker() const;
  void set_marker(bool value);

  // optional bool voice_activity = 20;
  bool has_voice_activity() const;
  void clear_voice_activity();
  static const int kVoiceActivityFieldNumber = 20;
  bool voice_activity() const;
  void set_voice_activity(bool value);

  // optional uint32 transport_sequence_number = 15;
  bool has_transport_sequence_number() const;
  void clear_transport_sequence_number();
  static const int kTransportSequenceNumberFieldNumber = 15;
  ::google::protobuf::uint32 transport_sequence_number() const;
  void set_transport_sequence_number(::google::protobuf::uint32 value);

  // optional int32 transmission_time_offset = 16;
  bool has_transmission_time_offset() const;
  void clear_transmission_time_offset();
  static const int kTransmissionTimeOffsetFieldNumber = 16;
  ::google::protobuf::int32 transmission_time_offset() const;
  void set_transmission_time_offset(::google::protobuf::int32 value);

  // optional uint32 absolute_send_time = 17;
  bool has_absolute_send_time() const;
  void clear_absolute_send_time();
  static const int kAbsoluteSendTimeFieldNumber = 17;
  ::google::protobuf::uint32 absolute_send_time() const;
  void set_absolute_send_time(::google::protobuf::uint32 value);

  // optional uint32 video_rotation = 18;
  bool has_video_rotation() const;
  void clear_video_rotation();
  static const int kVideoRotationFieldNumber = 18;
  ::google::protobuf::uint32 video_rotation() const;
  void set_video_rotation(::google::protobuf::uint32 value);

  // optional uint32 audio_level = 19;
  bool has_audio_level() const;
  void clear_audio_level();
  static const int kAudioLevelFieldNumber = 19;
  ::google::protobuf::uint32 audio_level() const;
  void set_audio_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.IncomingRtpPackets)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_marker();
  void clear_has_marker();
  void set_has_payload_type();
  void clear_has_payload_type();
  void set_has_sequence_number();
  void clear_has_sequence_number();
  void set_has_rtp_timestamp();
  void clear_has_rtp_timestamp();
  void set_has_ssrc();
  void clear_has_ssrc();
  void set_has_payload_size();
  void clear_has_payload_size();
  void set_has_header_size();
  void clear_has_header_size();
  void set_has_padding_size();
  void clear_has_padding_size();
  void set_has_number_of_deltas();
  void clear_has_number_of_deltas();
  void set_has_transport_sequence_number();
  void clear_has_transport_sequence_number();
  void set_has_transmission_time_offset();
  void clear_has_transmission_time_offset();
  void set_has_absolute_send_time();
  void clear_has_absolute_send_time();
  void set_has_video_rotation();
  void clear_has_video_rotation();
  void set_has_audio_level();
  void clear_has_audio_level();
  void set_has_voice_activity();
  void clear_has_voice_activity();
  void set_has_timestamp_ms_deltas();
  void clear_has_timestamp_ms_deltas();
  void set_has_marker_deltas();
  void clear_has_marker_deltas();
  void set_has_payload_type_deltas();
  void clear_has_payload_type_deltas();
  void set_has_sequence_number_deltas();
  void clear_has_sequence_number_deltas();
  void set_has_rtp_timestamp_deltas();
  void clear_has_rtp_timestamp_deltas();
  void set_has_ssrc_deltas();
  void clear_has_ssrc_deltas();
  void set_has_payload_size_deltas();
  void clear_has_payload_size_deltas();
  void set_has_header_size_deltas();
  void clear_has_header_size_deltas();
  void set_has_padding_size_deltas();
  void clear_has_padding_size_deltas();
  void set_has_transport_sequence_number_deltas();
  void clear_has_transport_sequence_number_deltas();
  void set_has_transmission_time_offset_deltas();
  void clear_has_transmission_time_offset_deltas();
  void set_has_absolute_send_time_deltas();
  void clear_has_absolute_send_time_deltas();
  void set_has_video_rotation_deltas();
  void clear_has_video_rotation_deltas();
  void set_has_audio_level_deltas();
  void clear_has_audio_level_deltas();
  void set_has_voice_activity_deltas();
  void clear_has_voice_activity_deltas();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::google::protobuf::internal::ArenaStringPtr marker_deltas_;
  ::google::protobuf::internal::ArenaStringPtr payload_type_deltas_;
  ::google::protobuf::internal::ArenaStringPtr sequence_number_deltas_;
  ::google::protobuf::internal::ArenaStringPtr rtp_timestamp_deltas_;
  ::google::protobuf::internal::ArenaStringPtr ssrc_deltas_;
  ::google::protobuf::internal::ArenaStringPtr payload_size_deltas_;
  ::google::protobuf::internal::ArenaStringPtr header_size_deltas_;
  ::google::protobuf::internal::ArenaStringPtr padding_size_deltas_;
  ::google::protobuf::internal::ArenaStringPtr transport_sequence_number_deltas_;
  ::google::protobuf::internal::ArenaStringPtr transmission_time_offset_deltas_;
  ::google::protobuf::internal::ArenaStringPtr absolute_send_time_deltas_;
  ::google::protobuf::internal::ArenaStringPtr video_rotation_deltas_;
  ::google::protobuf::internal::ArenaStringPtr audio_level_deltas_;
  ::google::protobuf::internal::ArenaStringPtr voice_activity_deltas_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 payload_type_;
  ::google::protobuf::uint32 sequence_number_;
  ::google::protobuf::uint32 rtp_timestamp_;
  ::google::protobuf::uint32 ssrc_;
  ::google::protobuf::uint32 payload_size_;
  ::google::protobuf::uint32 header_size_;
  ::google::protobuf::uint32 padding_size_;
  ::google::protobuf::uint32 number_of_deltas_;
  bool marker_;
  bool voice_activity_;
  ::google::protobuf::uint32 transport_sequence_number_;
  ::google::protobuf::int32 transmission_time_offset_;
  ::google::protobuf::uint32 absolute_send_time_;
  ::google::protobuf::uint32 video_rotation_;
  ::google::protobuf::uint32 audio_level_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OutgoingRtpPackets : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.OutgoingRtpPackets) */ {
 public:
  OutgoingRtpPackets();
  virtual ~OutgoingRtpPackets();

  OutgoingRtpPackets(const OutgoingRtpPackets& from);

  inline OutgoingRtpPackets& operator=(const OutgoingRtpPackets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutgoingRtpPackets(OutgoingRtpPackets&& from) noexcept
    : OutgoingRtpPackets() {
    *this = ::std::move(from);
  }

  inline OutgoingRtpPackets& operator=(OutgoingRtpPackets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OutgoingRtpPackets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutgoingRtpPackets* internal_default_instance() {
    return reinterpret_cast<const OutgoingRtpPackets*>(
               &_OutgoingRtpPackets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(OutgoingRtpPackets* other);
  friend void swap(OutgoingRtpPackets& a, OutgoingRtpPackets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutgoingRtpPackets* New() const final {
    return CreateMaybeMessage<OutgoingRtpPackets>(NULL);
  }

  OutgoingRtpPackets* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OutgoingRtpPackets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const OutgoingRtpPackets& from);
  void MergeFrom(const OutgoingRtpPackets& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OutgoingRtpPackets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  static const int kTimestampMsDeltasFieldNumber = 101;
  const ::std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp_ms_deltas(::std::string&& value);
  #endif
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  ::std::string* mutable_timestamp_ms_deltas();
  ::std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas);

  // optional bytes marker_deltas = 102;
  bool has_marker_deltas() const;
  void clear_marker_deltas();
  static const int kMarkerDeltasFieldNumber = 102;
  const ::std::string& marker_deltas() const;
  void set_marker_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_marker_deltas(::std::string&& value);
  #endif
  void set_marker_deltas(const char* value);
  void set_marker_deltas(const void* value, size_t size);
  ::std::string* mutable_marker_deltas();
  ::std::string* release_marker_deltas();
  void set_allocated_marker_deltas(::std::string* marker_deltas);

  // optional bytes payload_type_deltas = 103;
  bool has_payload_type_deltas() const;
  void clear_payload_type_deltas();
  static const int kPayloadTypeDeltasFieldNumber = 103;
  const ::std::string& payload_type_deltas() const;
  void set_payload_type_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_payload_type_deltas(::std::string&& value);
  #endif
  void set_payload_type_deltas(const char* value);
  void set_payload_type_deltas(const void* value, size_t size);
  ::std::string* mutable_payload_type_deltas();
  ::std::string* release_payload_type_deltas();
  void set_allocated_payload_type_deltas(::std::string* payload_type_deltas);

  // optional bytes sequence_number_deltas = 104;
  bool has_sequence_number_deltas() const;
  void clear_sequence_number_deltas();
  static const int kSequenceNumberDeltasFieldNumber = 104;
  const ::std::string& sequence_number_deltas() const;
  void set_sequence_number_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_sequence_number_deltas(::std::string&& value);
  #endif
  void set_sequence_number_deltas(const char* value);
  void set_sequence_number_deltas(const void* value, size_t size);
  ::std::string* mutable_sequence_number_deltas();
  ::std::string* release_sequence_number_deltas();
  void set_allocated_sequence_number_deltas(::std::string* sequence_number_deltas);

  // optional bytes rtp_timestamp_deltas = 105;
  bool has_rtp_timestamp_deltas() const;
  void clear_rtp_timestamp_deltas();
  static const int kRtpTimestampDeltasFieldNumber = 105;
  const ::std::string& rtp_timestamp_deltas() const;
  void set_rtp_timestamp_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_rtp_timestamp_deltas(::std::string&& value);
  #endif
  void set_rtp_timestamp_deltas(const char* value);
  void set_rtp_timestamp_deltas(const void* value, size_t size);
  ::std::string* mutable_rtp_timestamp_deltas();
  ::std::string* release_rtp_timestamp_deltas();
  void set_allocated_rtp_timestamp_deltas(::std::string* rtp_timestamp_deltas);

  // optional bytes ssrc_deltas = 106;
  bool has_ssrc_deltas() const;
  void clear_ssrc_deltas();
  static const int kSsrcDeltasFieldNumber = 106;
  const ::std::string& ssrc_deltas() const;
  void set_ssrc_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_ssrc_deltas(::std::string&& value);
  #endif
  void set_ssrc_deltas(const char* value);
  void set_ssrc_deltas(const void* value, size_t size);
  ::std::string* mutable_ssrc_deltas();
  ::std::string* release_ssrc_deltas();
  void set_allocated_ssrc_deltas(::std::string* ssrc_deltas);

  // optional bytes payload_size_deltas = 108;
  bool has_payload_size_deltas() const;
  void clear_payload_size_deltas();
  static const int kPayloadSizeDeltasFieldNumber = 108;
  const ::std::string& payload_size_deltas() const;
  void set_payload_size_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_payload_size_deltas(::std::string&& value);
  #endif
  void set_payload_size_deltas(const char* value);
  void set_payload_size_deltas(const void* value, size_t size);
  ::std::string* mutable_payload_size_deltas();
  ::std::string* release_payload_size_deltas();
  void set_allocated_payload_size_deltas(::std::string* payload_size_deltas);

  // optional bytes header_size_deltas = 109;
  bool has_header_size_deltas() const;
  void clear_header_size_deltas();
  static const int kHeaderSizeDeltasFieldNumber = 109;
  const ::std::string& header_size_deltas() const;
  void set_header_size_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_header_size_deltas(::std::string&& value);
  #endif
  void set_header_size_deltas(const char* value);
  void set_header_size_deltas(const void* value, size_t size);
  ::std::string* mutable_header_size_deltas();
  ::std::string* release_header_size_deltas();
  void set_allocated_header_size_deltas(::std::string* header_size_deltas);

  // optional bytes padding_size_deltas = 110;
  bool has_padding_size_deltas() const;
  void clear_padding_size_deltas();
  static const int kPaddingSizeDeltasFieldNumber = 110;
  const ::std::string& padding_size_deltas() const;
  void set_padding_size_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_padding_size_deltas(::std::string&& value);
  #endif
  void set_padding_size_deltas(const char* value);
  void set_padding_size_deltas(const void* value, size_t size);
  ::std::string* mutable_padding_size_deltas();
  ::std::string* release_padding_size_deltas();
  void set_allocated_padding_size_deltas(::std::string* padding_size_deltas);

  // optional bytes transport_sequence_number_deltas = 115;
  bool has_transport_sequence_number_deltas() const;
  void clear_transport_sequence_number_deltas();
  static const int kTransportSequenceNumberDeltasFieldNumber = 115;
  const ::std::string& transport_sequence_number_deltas() const;
  void set_transport_sequence_number_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_transport_sequence_number_deltas(::std::string&& value);
  #endif
  void set_transport_sequence_number_deltas(const char* value);
  void set_transport_sequence_number_deltas(const void* value, size_t size);
  ::std::string* mutable_transport_sequence_number_deltas();
  ::std::string* release_transport_sequence_number_deltas();
  void set_allocated_transport_sequence_number_deltas(::std::string* transport_sequence_number_deltas);

  // optional bytes transmission_time_offset_deltas = 116;
  bool has_transmission_time_offset_deltas() const;
  void clear_transmission_time_offset_deltas();
  static const int kTransmissionTimeOffsetDeltasFieldNumber = 116;
  const ::std::string& transmission_time_offset_deltas() const;
  void set_transmission_time_offset_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_transmission_time_offset_deltas(::std::string&& value);
  #endif
  void set_transmission_time_offset_deltas(const char* value);
  void set_transmission_time_offset_deltas(const void* value, size_t size);
  ::std::string* mutable_transmission_time_offset_deltas();
  ::std::string* release_transmission_time_offset_deltas();
  void set_allocated_transmission_time_offset_deltas(::std::string* transmission_time_offset_deltas);

  // optional bytes absolute_send_time_deltas = 117;
  bool has_absolute_send_time_deltas() const;
  void clear_absolute_send_time_deltas();
  static const int kAbsoluteSendTimeDeltasFieldNumber = 117;
  const ::std::string& absolute_send_time_deltas() const;
  void set_absolute_send_time_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_absolute_send_time_deltas(::std::string&& value);
  #endif
  void set_absolute_send_time_deltas(const char* value);
  void set_absolute_send_time_deltas(const void* value, size_t size);
  ::std::string* mutable_absolute_send_time_deltas();
  ::std::string* release_absolute_send_time_deltas();
  void set_allocated_absolute_send_time_deltas(::std::string* absolute_send_time_deltas);

  // optional bytes video_rotation_deltas = 118;
  bool has_video_rotation_deltas() const;
  void clear_video_rotation_deltas();
  static const int kVideoRotationDeltasFieldNumber = 118;
  const ::std::string& video_rotation_deltas() const;
  void set_video_rotation_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_video_rotation_deltas(::std::string&& value);
  #endif
  void set_video_rotation_deltas(const char* value);
  void set_video_rotation_deltas(const void* value, size_t size);
  ::std::string* mutable_video_rotation_deltas();
  ::std::string* release_video_rotation_deltas();
  void set_allocated_video_rotation_deltas(::std::string* video_rotation_deltas);

  // optional bytes audio_level_deltas = 119;
  bool has_audio_level_deltas() const;
  void clear_audio_level_deltas();
  static const int kAudioLevelDeltasFieldNumber = 119;
  const ::std::string& audio_level_deltas() const;
  void set_audio_level_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_level_deltas(::std::string&& value);
  #endif
  void set_audio_level_deltas(const char* value);
  void set_audio_level_deltas(const void* value, size_t size);
  ::std::string* mutable_audio_level_deltas();
  ::std::string* release_audio_level_deltas();
  void set_allocated_audio_level_deltas(::std::string* audio_level_deltas);

  // optional bytes voice_activity_deltas = 120;
  bool has_voice_activity_deltas() const;
  void clear_voice_activity_deltas();
  static const int kVoiceActivityDeltasFieldNumber = 120;
  const ::std::string& voice_activity_deltas() const;
  void set_voice_activity_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_voice_activity_deltas(::std::string&& value);
  #endif
  void set_voice_activity_deltas(const char* value);
  void set_voice_activity_deltas(const void* value, size_t size);
  ::std::string* mutable_voice_activity_deltas();
  ::std::string* release_voice_activity_deltas();
  void set_allocated_voice_activity_deltas(::std::string* voice_activity_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 payload_type = 3;
  bool has_payload_type() const;
  void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 3;
  ::google::protobuf::uint32 payload_type() const;
  void set_payload_type(::google::protobuf::uint32 value);

  // optional uint32 sequence_number = 4;
  bool has_sequence_number() const;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 4;
  ::google::protobuf::uint32 sequence_number() const;
  void set_sequence_number(::google::protobuf::uint32 value);

  // optional fixed32 rtp_timestamp = 5;
  bool has_rtp_timestamp() const;
  void clear_rtp_timestamp();
  static const int kRtpTimestampFieldNumber = 5;
  ::google::protobuf::uint32 rtp_timestamp() const;
  void set_rtp_timestamp(::google::protobuf::uint32 value);

  // optional fixed32 ssrc = 6;
  bool has_ssrc() const;
  void clear_ssrc();
  static const int kSsrcFieldNumber = 6;
  ::google::protobuf::uint32 ssrc() const;
  void set_ssrc(::google::protobuf::uint32 value);

  // optional uint32 payload_size = 8;
  bool has_payload_size() const;
  void clear_payload_size();
  static const int kPayloadSizeFieldNumber = 8;
  ::google::protobuf::uint32 payload_size() const;
  void set_payload_size(::google::protobuf::uint32 value);

  // optional uint32 header_size = 9;
  bool has_header_size() const;
  void clear_header_size();
  static const int kHeaderSizeFieldNumber = 9;
  ::google::protobuf::uint32 header_size() const;
  void set_header_size(::google::protobuf::uint32 value);

  // optional uint32 padding_size = 10;
  bool has_padding_size() const;
  void clear_padding_size();
  static const int kPaddingSizeFieldNumber = 10;
  ::google::protobuf::uint32 padding_size() const;
  void set_padding_size(::google::protobuf::uint32 value);

  // optional uint32 number_of_deltas = 11;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  static const int kNumberOfDeltasFieldNumber = 11;
  ::google::protobuf::uint32 number_of_deltas() const;
  void set_number_of_deltas(::google::protobuf::uint32 value);

  // optional bool marker = 2;
  bool has_marker() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 2;
  bool marker() const;
  void set_marker(bool value);

  // optional bool voice_activity = 20;
  bool has_voice_activity() const;
  void clear_voice_activity();
  static const int kVoiceActivityFieldNumber = 20;
  bool voice_activity() const;
  void set_voice_activity(bool value);

  // optional uint32 transport_sequence_number = 15;
  bool has_transport_sequence_number() const;
  void clear_transport_sequence_number();
  static const int kTransportSequenceNumberFieldNumber = 15;
  ::google::protobuf::uint32 transport_sequence_number() const;
  void set_transport_sequence_number(::google::protobuf::uint32 value);

  // optional int32 transmission_time_offset = 16;
  bool has_transmission_time_offset() const;
  void clear_transmission_time_offset();
  static const int kTransmissionTimeOffsetFieldNumber = 16;
  ::google::protobuf::int32 transmission_time_offset() const;
  void set_transmission_time_offset(::google::protobuf::int32 value);

  // optional uint32 absolute_send_time = 17;
  bool has_absolute_send_time() const;
  void clear_absolute_send_time();
  static const int kAbsoluteSendTimeFieldNumber = 17;
  ::google::protobuf::uint32 absolute_send_time() const;
  void set_absolute_send_time(::google::protobuf::uint32 value);

  // optional uint32 video_rotation = 18;
  bool has_video_rotation() const;
  void clear_video_rotation();
  static const int kVideoRotationFieldNumber = 18;
  ::google::protobuf::uint32 video_rotation() const;
  void set_video_rotation(::google::protobuf::uint32 value);

  // optional uint32 audio_level = 19;
  bool has_audio_level() const;
  void clear_audio_level();
  static const int kAudioLevelFieldNumber = 19;
  ::google::protobuf::uint32 audio_level() const;
  void set_audio_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.OutgoingRtpPackets)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_marker();
  void clear_has_marker();
  void set_has_payload_type();
  void clear_has_payload_type();
  void set_has_sequence_number();
  void clear_has_sequence_number();
  void set_has_rtp_timestamp();
  void clear_has_rtp_timestamp();
  void set_has_ssrc();
  void clear_has_ssrc();
  void set_has_payload_size();
  void clear_has_payload_size();
  void set_has_header_size();
  void clear_has_header_size();
  void set_has_padding_size();
  void clear_has_padding_size();
  void set_has_number_of_deltas();
  void clear_has_number_of_deltas();
  void set_has_transport_sequence_number();
  void clear_has_transport_sequence_number();
  void set_has_transmission_time_offset();
  void clear_has_transmission_time_offset();
  void set_has_absolute_send_time();
  void clear_has_absolute_send_time();
  void set_has_video_rotation();
  void clear_has_video_rotation();
  void set_has_audio_level();
  void clear_has_audio_level();
  void set_has_voice_activity();
  void clear_has_voice_activity();
  void set_has_timestamp_ms_deltas();
  void clear_has_timestamp_ms_deltas();
  void set_has_marker_deltas();
  void clear_has_marker_deltas();
  void set_has_payload_type_deltas();
  void clear_has_payload_type_deltas();
  void set_has_sequence_number_deltas();
  void clear_has_sequence_number_deltas();
  void set_has_rtp_timestamp_deltas();
  void clear_has_rtp_timestamp_deltas();
  void set_has_ssrc_deltas();
  void clear_has_ssrc_deltas();
  void set_has_payload_size_deltas();
  void clear_has_payload_size_deltas();
  void set_has_header_size_deltas();
  void clear_has_header_size_deltas();
  void set_has_padding_size_deltas();
  void clear_has_padding_size_deltas();
  void set_has_transport_sequence_number_deltas();
  void clear_has_transport_sequence_number_deltas();
  void set_has_transmission_time_offset_deltas();
  void clear_has_transmission_time_offset_deltas();
  void set_has_absolute_send_time_deltas();
  void clear_has_absolute_send_time_deltas();
  void set_has_video_rotation_deltas();
  void clear_has_video_rotation_deltas();
  void set_has_audio_level_deltas();
  void clear_has_audio_level_deltas();
  void set_has_voice_activity_deltas();
  void clear_has_voice_activity_deltas();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::google::protobuf::internal::ArenaStringPtr marker_deltas_;
  ::google::protobuf::internal::ArenaStringPtr payload_type_deltas_;
  ::google::protobuf::internal::ArenaStringPtr sequence_number_deltas_;
  ::google::protobuf::internal::ArenaStringPtr rtp_timestamp_deltas_;
  ::google::protobuf::internal::ArenaStringPtr ssrc_deltas_;
  ::google::protobuf::internal::ArenaStringPtr payload_size_deltas_;
  ::google::protobuf::internal::ArenaStringPtr header_size_deltas_;
  ::google::protobuf::internal::ArenaStringPtr padding_size_deltas_;
  ::google::protobuf::internal::ArenaStringPtr transport_sequence_number_deltas_;
  ::google::protobuf::internal::ArenaStringPtr transmission_time_offset_deltas_;
  ::google::protobuf::internal::ArenaStringPtr absolute_send_time_deltas_;
  ::google::protobuf::internal::ArenaStringPtr video_rotation_deltas_;
  ::google::protobuf::internal::ArenaStringPtr audio_level_deltas_;
  ::google::protobuf::internal::ArenaStringPtr voice_activity_deltas_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 payload_type_;
  ::google::protobuf::uint32 sequence_number_;
  ::google::protobuf::uint32 rtp_timestamp_;
  ::google::protobuf::uint32 ssrc_;
  ::google::protobuf::uint32 payload_size_;
  ::google::protobuf::uint32 header_size_;
  ::google::protobuf::uint32 padding_size_;
  ::google::protobuf::uint32 number_of_deltas_;
  bool marker_;
  bool voice_activity_;
  ::google::protobuf::uint32 transport_sequence_number_;
  ::google::protobuf::int32 transmission_time_offset_;
  ::google::protobuf::uint32 absolute_send_time_;
  ::google::protobuf::uint32 video_rotation_;
  ::google::protobuf::uint32 audio_level_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncomingRtcpPackets : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.IncomingRtcpPackets) */ {
 public:
  IncomingRtcpPackets();
  virtual ~IncomingRtcpPackets();

  IncomingRtcpPackets(const IncomingRtcpPackets& from);

  inline IncomingRtcpPackets& operator=(const IncomingRtcpPackets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncomingRtcpPackets(IncomingRtcpPackets&& from) noexcept
    : IncomingRtcpPackets() {
    *this = ::std::move(from);
  }

  inline IncomingRtcpPackets& operator=(IncomingRtcpPackets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IncomingRtcpPackets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncomingRtcpPackets* internal_default_instance() {
    return reinterpret_cast<const IncomingRtcpPackets*>(
               &_IncomingRtcpPackets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(IncomingRtcpPackets* other);
  friend void swap(IncomingRtcpPackets& a, IncomingRtcpPackets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncomingRtcpPackets* New() const final {
    return CreateMaybeMessage<IncomingRtcpPackets>(NULL);
  }

  IncomingRtcpPackets* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncomingRtcpPackets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IncomingRtcpPackets& from);
  void MergeFrom(const IncomingRtcpPackets& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncomingRtcpPackets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes raw_packet = 2;
  bool has_raw_packet() const;
  void clear_raw_packet();
  static const int kRawPacketFieldNumber = 2;
  const ::std::string& raw_packet() const;
  void set_raw_packet(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_packet(::std::string&& value);
  #endif
  void set_raw_packet(const char* value);
  void set_raw_packet(const void* value, size_t size);
  ::std::string* mutable_raw_packet();
  ::std::string* release_raw_packet();
  void set_allocated_raw_packet(::std::string* raw_packet);

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  static const int kTimestampMsDeltasFieldNumber = 101;
  const ::std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp_ms_deltas(::std::string&& value);
  #endif
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  ::std::string* mutable_timestamp_ms_deltas();
  ::std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas);

  // optional bytes raw_packet_blobs = 102;
  bool has_raw_packet_blobs() const;
  void clear_raw_packet_blobs();
  static const int kRawPacketBlobsFieldNumber = 102;
  const ::std::string& raw_packet_blobs() const;
  void set_raw_packet_blobs(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_packet_blobs(::std::string&& value);
  #endif
  void set_raw_packet_blobs(const char* value);
  void set_raw_packet_blobs(const void* value, size_t size);
  ::std::string* mutable_raw_packet_blobs();
  ::std::string* release_raw_packet_blobs();
  void set_allocated_raw_packet_blobs(::std::string* raw_packet_blobs);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 number_of_deltas = 3;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  static const int kNumberOfDeltasFieldNumber = 3;
  ::google::protobuf::uint32 number_of_deltas() const;
  void set_number_of_deltas(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.IncomingRtcpPackets)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_raw_packet();
  void clear_has_raw_packet();
  void set_has_number_of_deltas();
  void clear_has_number_of_deltas();
  void set_has_timestamp_ms_deltas();
  void clear_has_timestamp_ms_deltas();
  void set_has_raw_packet_blobs();
  void clear_has_raw_packet_blobs();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr raw_packet_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::google::protobuf::internal::ArenaStringPtr raw_packet_blobs_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 number_of_deltas_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OutgoingRtcpPackets : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.OutgoingRtcpPackets) */ {
 public:
  OutgoingRtcpPackets();
  virtual ~OutgoingRtcpPackets();

  OutgoingRtcpPackets(const OutgoingRtcpPackets& from);

  inline OutgoingRtcpPackets& operator=(const OutgoingRtcpPackets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutgoingRtcpPackets(OutgoingRtcpPackets&& from) noexcept
    : OutgoingRtcpPackets() {
    *this = ::std::move(from);
  }

  inline OutgoingRtcpPackets& operator=(OutgoingRtcpPackets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OutgoingRtcpPackets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutgoingRtcpPackets* internal_default_instance() {
    return reinterpret_cast<const OutgoingRtcpPackets*>(
               &_OutgoingRtcpPackets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(OutgoingRtcpPackets* other);
  friend void swap(OutgoingRtcpPackets& a, OutgoingRtcpPackets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutgoingRtcpPackets* New() const final {
    return CreateMaybeMessage<OutgoingRtcpPackets>(NULL);
  }

  OutgoingRtcpPackets* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OutgoingRtcpPackets>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const OutgoingRtcpPackets& from);
  void MergeFrom(const OutgoingRtcpPackets& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OutgoingRtcpPackets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes raw_packet = 2;
  bool has_raw_packet() const;
  void clear_raw_packet();
  static const int kRawPacketFieldNumber = 2;
  const ::std::string& raw_packet() const;
  void set_raw_packet(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_packet(::std::string&& value);
  #endif
  void set_raw_packet(const char* value);
  void set_raw_packet(const void* value, size_t size);
  ::std::string* mutable_raw_packet();
  ::std::string* release_raw_packet();
  void set_allocated_raw_packet(::std::string* raw_packet);

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  static const int kTimestampMsDeltasFieldNumber = 101;
  const ::std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp_ms_deltas(::std::string&& value);
  #endif
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  ::std::string* mutable_timestamp_ms_deltas();
  ::std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas);

  // optional bytes raw_packet_blobs = 102;
  bool has_raw_packet_blobs() const;
  void clear_raw_packet_blobs();
  static const int kRawPacketBlobsFieldNumber = 102;
  const ::std::string& raw_packet_blobs() const;
  void set_raw_packet_blobs(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_packet_blobs(::std::string&& value);
  #endif
  void set_raw_packet_blobs(const char* value);
  void set_raw_packet_blobs(const void* value, size_t size);
  ::std::string* mutable_raw_packet_blobs();
  ::std::string* release_raw_packet_blobs();
  void set_allocated_raw_packet_blobs(::std::string* raw_packet_blobs);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 number_of_deltas = 3;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  static const int kNumberOfDeltasFieldNumber = 3;
  ::google::protobuf::uint32 number_of_deltas() const;
  void set_number_of_deltas(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.OutgoingRtcpPackets)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_raw_packet();
  void clear_has_raw_packet();
  void set_has_number_of_deltas();
  void clear_has_number_of_deltas();
  void set_has_timestamp_ms_deltas();
  void clear_has_timestamp_ms_deltas();
  void set_has_raw_packet_blobs();
  void clear_has_raw_packet_blobs();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr raw_packet_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::google::protobuf::internal::ArenaStringPtr raw_packet_blobs_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 number_of_deltas_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioPlayoutEvents : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AudioPlayoutEvents) */ {
 public:
  AudioPlayoutEvents();
  virtual ~AudioPlayoutEvents();

  AudioPlayoutEvents(const AudioPlayoutEvents& from);

  inline AudioPlayoutEvents& operator=(const AudioPlayoutEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioPlayoutEvents(AudioPlayoutEvents&& from) noexcept
    : AudioPlayoutEvents() {
    *this = ::std::move(from);
  }

  inline AudioPlayoutEvents& operator=(AudioPlayoutEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioPlayoutEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioPlayoutEvents* internal_default_instance() {
    return reinterpret_cast<const AudioPlayoutEvents*>(
               &_AudioPlayoutEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AudioPlayoutEvents* other);
  friend void swap(AudioPlayoutEvents& a, AudioPlayoutEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioPlayoutEvents* New() const final {
    return CreateMaybeMessage<AudioPlayoutEvents>(NULL);
  }

  AudioPlayoutEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioPlayoutEvents>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AudioPlayoutEvents& from);
  void MergeFrom(const AudioPlayoutEvents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioPlayoutEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  static const int kTimestampMsDeltasFieldNumber = 101;
  const ::std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp_ms_deltas(::std::string&& value);
  #endif
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  ::std::string* mutable_timestamp_ms_deltas();
  ::std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas);

  // optional bytes local_ssrc_deltas = 102;
  bool has_local_ssrc_deltas() const;
  void clear_local_ssrc_deltas();
  static const int kLocalSsrcDeltasFieldNumber = 102;
  const ::std::string& local_ssrc_deltas() const;
  void set_local_ssrc_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_local_ssrc_deltas(::std::string&& value);
  #endif
  void set_local_ssrc_deltas(const char* value);
  void set_local_ssrc_deltas(const void* value, size_t size);
  ::std::string* mutable_local_ssrc_deltas();
  ::std::string* release_local_ssrc_deltas();
  void set_allocated_local_ssrc_deltas(::std::string* local_ssrc_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 local_ssrc = 2;
  bool has_local_ssrc() const;
  void clear_local_ssrc();
  static const int kLocalSsrcFieldNumber = 2;
  ::google::protobuf::uint32 local_ssrc() const;
  void set_local_ssrc(::google::protobuf::uint32 value);

  // optional uint32 number_of_deltas = 3;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  static const int kNumberOfDeltasFieldNumber = 3;
  ::google::protobuf::uint32 number_of_deltas() const;
  void set_number_of_deltas(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AudioPlayoutEvents)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_local_ssrc();
  void clear_has_local_ssrc();
  void set_has_number_of_deltas();
  void clear_has_number_of_deltas();
  void set_has_timestamp_ms_deltas();
  void clear_has_timestamp_ms_deltas();
  void set_has_local_ssrc_deltas();
  void clear_has_local_ssrc_deltas();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::google::protobuf::internal::ArenaStringPtr local_ssrc_deltas_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 local_ssrc_;
  ::google::protobuf::uint32 number_of_deltas_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BeginLogEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.BeginLogEvent) */ {
 public:
  BeginLogEvent();
  virtual ~BeginLogEvent();

  BeginLogEvent(const BeginLogEvent& from);

  inline BeginLogEvent& operator=(const BeginLogEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeginLogEvent(BeginLogEvent&& from) noexcept
    : BeginLogEvent() {
    *this = ::std::move(from);
  }

  inline BeginLogEvent& operator=(BeginLogEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BeginLogEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeginLogEvent* internal_default_instance() {
    return reinterpret_cast<const BeginLogEvent*>(
               &_BeginLogEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BeginLogEvent* other);
  friend void swap(BeginLogEvent& a, BeginLogEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeginLogEvent* New() const final {
    return CreateMaybeMessage<BeginLogEvent>(NULL);
  }

  BeginLogEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeginLogEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BeginLogEvent& from);
  void MergeFrom(const BeginLogEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeginLogEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional int64 utc_time_ms = 3;
  bool has_utc_time_ms() const;
  void clear_utc_time_ms();
  static const int kUtcTimeMsFieldNumber = 3;
  ::google::protobuf::int64 utc_time_ms() const;
  void set_utc_time_ms(::google::protobuf::int64 value);

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.BeginLogEvent)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_version();
  void clear_has_version();
  void set_has_utc_time_ms();
  void clear_has_utc_time_ms();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::int64 utc_time_ms_;
  ::google::protobuf::uint32 version_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EndLogEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.EndLogEvent) */ {
 public:
  EndLogEvent();
  virtual ~EndLogEvent();

  EndLogEvent(const EndLogEvent& from);

  inline EndLogEvent& operator=(const EndLogEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndLogEvent(EndLogEvent&& from) noexcept
    : EndLogEvent() {
    *this = ::std::move(from);
  }

  inline EndLogEvent& operator=(EndLogEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EndLogEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndLogEvent* internal_default_instance() {
    return reinterpret_cast<const EndLogEvent*>(
               &_EndLogEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(EndLogEvent* other);
  friend void swap(EndLogEvent& a, EndLogEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndLogEvent* New() const final {
    return CreateMaybeMessage<EndLogEvent>(NULL);
  }

  EndLogEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EndLogEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EndLogEvent& from);
  void MergeFrom(const EndLogEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EndLogEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.EndLogEvent)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 timestamp_ms_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LossBasedBweUpdates : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.LossBasedBweUpdates) */ {
 public:
  LossBasedBweUpdates();
  virtual ~LossBasedBweUpdates();

  LossBasedBweUpdates(const LossBasedBweUpdates& from);

  inline LossBasedBweUpdates& operator=(const LossBasedBweUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LossBasedBweUpdates(LossBasedBweUpdates&& from) noexcept
    : LossBasedBweUpdates() {
    *this = ::std::move(from);
  }

  inline LossBasedBweUpdates& operator=(LossBasedBweUpdates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LossBasedBweUpdates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossBasedBweUpdates* internal_default_instance() {
    return reinterpret_cast<const LossBasedBweUpdates*>(
               &_LossBasedBweUpdates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(LossBasedBweUpdates* other);
  friend void swap(LossBasedBweUpdates& a, LossBasedBweUpdates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LossBasedBweUpdates* New() const final {
    return CreateMaybeMessage<LossBasedBweUpdates>(NULL);
  }

  LossBasedBweUpdates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LossBasedBweUpdates>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LossBasedBweUpdates& from);
  void MergeFrom(const LossBasedBweUpdates& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LossBasedBweUpdates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  static const int kTimestampMsDeltasFieldNumber = 101;
  const ::std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp_ms_deltas(::std::string&& value);
  #endif
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  ::std::string* mutable_timestamp_ms_deltas();
  ::std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas);

  // optional bytes bitrate_bps_deltas = 102;
  bool has_bitrate_bps_deltas() const;
  void clear_bitrate_bps_deltas();
  static const int kBitrateBpsDeltasFieldNumber = 102;
  const ::std::string& bitrate_bps_deltas() const;
  void set_bitrate_bps_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_bitrate_bps_deltas(::std::string&& value);
  #endif
  void set_bitrate_bps_deltas(const char* value);
  void set_bitrate_bps_deltas(const void* value, size_t size);
  ::std::string* mutable_bitrate_bps_deltas();
  ::std::string* release_bitrate_bps_deltas();
  void set_allocated_bitrate_bps_deltas(::std::string* bitrate_bps_deltas);

  // optional bytes fraction_loss_deltas = 103;
  bool has_fraction_loss_deltas() const;
  void clear_fraction_loss_deltas();
  static const int kFractionLossDeltasFieldNumber = 103;
  const ::std::string& fraction_loss_deltas() const;
  void set_fraction_loss_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_fraction_loss_deltas(::std::string&& value);
  #endif
  void set_fraction_loss_deltas(const char* value);
  void set_fraction_loss_deltas(const void* value, size_t size);
  ::std::string* mutable_fraction_loss_deltas();
  ::std::string* release_fraction_loss_deltas();
  void set_allocated_fraction_loss_deltas(::std::string* fraction_loss_deltas);

  // optional bytes total_packets_deltas = 104;
  bool has_total_packets_deltas() const;
  void clear_total_packets_deltas();
  static const int kTotalPacketsDeltasFieldNumber = 104;
  const ::std::string& total_packets_deltas() const;
  void set_total_packets_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_total_packets_deltas(::std::string&& value);
  #endif
  void set_total_packets_deltas(const char* value);
  void set_total_packets_deltas(const void* value, size_t size);
  ::std::string* mutable_total_packets_deltas();
  ::std::string* release_total_packets_deltas();
  void set_allocated_total_packets_deltas(::std::string* total_packets_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 bitrate_bps = 2;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 2;
  ::google::protobuf::uint32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::uint32 value);

  // optional uint32 fraction_loss = 3;
  bool has_fraction_loss() const;
  void clear_fraction_loss();
  static const int kFractionLossFieldNumber = 3;
  ::google::protobuf::uint32 fraction_loss() const;
  void set_fraction_loss(::google::protobuf::uint32 value);

  // optional uint32 total_packets = 4;
  bool has_total_packets() const;
  void clear_total_packets();
  static const int kTotalPacketsFieldNumber = 4;
  ::google::protobuf::uint32 total_packets() const;
  void set_total_packets(::google::protobuf::uint32 value);

  // optional uint32 number_of_deltas = 5;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  static const int kNumberOfDeltasFieldNumber = 5;
  ::google::protobuf::uint32 number_of_deltas() const;
  void set_number_of_deltas(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.LossBasedBweUpdates)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();
  void set_has_fraction_loss();
  void clear_has_fraction_loss();
  void set_has_total_packets();
  void clear_has_total_packets();
  void set_has_number_of_deltas();
  void clear_has_number_of_deltas();
  void set_has_timestamp_ms_deltas();
  void clear_has_timestamp_ms_deltas();
  void set_has_bitrate_bps_deltas();
  void clear_has_bitrate_bps_deltas();
  void set_has_fraction_loss_deltas();
  void clear_has_fraction_loss_deltas();
  void set_has_total_packets_deltas();
  void clear_has_total_packets_deltas();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::google::protobuf::internal::ArenaStringPtr bitrate_bps_deltas_;
  ::google::protobuf::internal::ArenaStringPtr fraction_loss_deltas_;
  ::google::protobuf::internal::ArenaStringPtr total_packets_deltas_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 bitrate_bps_;
  ::google::protobuf::uint32 fraction_loss_;
  ::google::protobuf::uint32 total_packets_;
  ::google::protobuf::uint32 number_of_deltas_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelayBasedBweUpdates : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.DelayBasedBweUpdates) */ {
 public:
  DelayBasedBweUpdates();
  virtual ~DelayBasedBweUpdates();

  DelayBasedBweUpdates(const DelayBasedBweUpdates& from);

  inline DelayBasedBweUpdates& operator=(const DelayBasedBweUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelayBasedBweUpdates(DelayBasedBweUpdates&& from) noexcept
    : DelayBasedBweUpdates() {
    *this = ::std::move(from);
  }

  inline DelayBasedBweUpdates& operator=(DelayBasedBweUpdates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DelayBasedBweUpdates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelayBasedBweUpdates* internal_default_instance() {
    return reinterpret_cast<const DelayBasedBweUpdates*>(
               &_DelayBasedBweUpdates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DelayBasedBweUpdates* other);
  friend void swap(DelayBasedBweUpdates& a, DelayBasedBweUpdates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelayBasedBweUpdates* New() const final {
    return CreateMaybeMessage<DelayBasedBweUpdates>(NULL);
  }

  DelayBasedBweUpdates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelayBasedBweUpdates>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DelayBasedBweUpdates& from);
  void MergeFrom(const DelayBasedBweUpdates& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DelayBasedBweUpdates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DelayBasedBweUpdates_DetectorState DetectorState;
  static const DetectorState BWE_UNKNOWN_STATE =
    DelayBasedBweUpdates_DetectorState_BWE_UNKNOWN_STATE;
  static const DetectorState BWE_NORMAL =
    DelayBasedBweUpdates_DetectorState_BWE_NORMAL;
  static const DetectorState BWE_UNDERUSING =
    DelayBasedBweUpdates_DetectorState_BWE_UNDERUSING;
  static const DetectorState BWE_OVERUSING =
    DelayBasedBweUpdates_DetectorState_BWE_OVERUSING;
  static inline bool DetectorState_IsValid(int value) {
    return DelayBasedBweUpdates_DetectorState_IsValid(value);
  }
  static const DetectorState DetectorState_MIN =
    DelayBasedBweUpdates_DetectorState_DetectorState_MIN;
  static const DetectorState DetectorState_MAX =
    DelayBasedBweUpdates_DetectorState_DetectorState_MAX;
  static const int DetectorState_ARRAYSIZE =
    DelayBasedBweUpdates_DetectorState_DetectorState_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  static const int kTimestampMsDeltasFieldNumber = 101;
  const ::std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp_ms_deltas(::std::string&& value);
  #endif
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  ::std::string* mutable_timestamp_ms_deltas();
  ::std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas);

  // optional bytes bitrate_bps_deltas = 102;
  bool has_bitrate_bps_deltas() const;
  void clear_bitrate_bps_deltas();
  static const int kBitrateBpsDeltasFieldNumber = 102;
  const ::std::string& bitrate_bps_deltas() const;
  void set_bitrate_bps_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_bitrate_bps_deltas(::std::string&& value);
  #endif
  void set_bitrate_bps_deltas(const char* value);
  void set_bitrate_bps_deltas(const void* value, size_t size);
  ::std::string* mutable_bitrate_bps_deltas();
  ::std::string* release_bitrate_bps_deltas();
  void set_allocated_bitrate_bps_deltas(::std::string* bitrate_bps_deltas);

  // optional bytes detector_state_deltas = 103;
  bool has_detector_state_deltas() const;
  void clear_detector_state_deltas();
  static const int kDetectorStateDeltasFieldNumber = 103;
  const ::std::string& detector_state_deltas() const;
  void set_detector_state_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_detector_state_deltas(::std::string&& value);
  #endif
  void set_detector_state_deltas(const char* value);
  void set_detector_state_deltas(const void* value, size_t size);
  ::std::string* mutable_detector_state_deltas();
  ::std::string* release_detector_state_deltas();
  void set_allocated_detector_state_deltas(::std::string* detector_state_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 bitrate_bps = 2;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 2;
  ::google::protobuf::uint32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::uint32 value);

  // optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
  bool has_detector_state() const;
  void clear_detector_state();
  static const int kDetectorStateFieldNumber = 3;
  ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState detector_state() const;
  void set_detector_state(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState value);

  // optional uint32 number_of_deltas = 4;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  static const int kNumberOfDeltasFieldNumber = 4;
  ::google::protobuf::uint32 number_of_deltas() const;
  void set_number_of_deltas(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.DelayBasedBweUpdates)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();
  void set_has_detector_state();
  void clear_has_detector_state();
  void set_has_number_of_deltas();
  void clear_has_number_of_deltas();
  void set_has_timestamp_ms_deltas();
  void clear_has_timestamp_ms_deltas();
  void set_has_bitrate_bps_deltas();
  void clear_has_bitrate_bps_deltas();
  void set_has_detector_state_deltas();
  void clear_has_detector_state_deltas();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::google::protobuf::internal::ArenaStringPtr bitrate_bps_deltas_;
  ::google::protobuf::internal::ArenaStringPtr detector_state_deltas_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 bitrate_bps_;
  int detector_state_;
  ::google::protobuf::uint32 number_of_deltas_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RtpHeaderExtensionConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.RtpHeaderExtensionConfig) */ {
 public:
  RtpHeaderExtensionConfig();
  virtual ~RtpHeaderExtensionConfig();

  RtpHeaderExtensionConfig(const RtpHeaderExtensionConfig& from);

  inline RtpHeaderExtensionConfig& operator=(const RtpHeaderExtensionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RtpHeaderExtensionConfig(RtpHeaderExtensionConfig&& from) noexcept
    : RtpHeaderExtensionConfig() {
    *this = ::std::move(from);
  }

  inline RtpHeaderExtensionConfig& operator=(RtpHeaderExtensionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RtpHeaderExtensionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtpHeaderExtensionConfig* internal_default_instance() {
    return reinterpret_cast<const RtpHeaderExtensionConfig*>(
               &_RtpHeaderExtensionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RtpHeaderExtensionConfig* other);
  friend void swap(RtpHeaderExtensionConfig& a, RtpHeaderExtensionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RtpHeaderExtensionConfig* New() const final {
    return CreateMaybeMessage<RtpHeaderExtensionConfig>(NULL);
  }

  RtpHeaderExtensionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RtpHeaderExtensionConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RtpHeaderExtensionConfig& from);
  void MergeFrom(const RtpHeaderExtensionConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtpHeaderExtensionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 transmission_time_offset_id = 1;
  bool has_transmission_time_offset_id() const;
  void clear_transmission_time_offset_id();
  static const int kTransmissionTimeOffsetIdFieldNumber = 1;
  ::google::protobuf::int32 transmission_time_offset_id() const;
  void set_transmission_time_offset_id(::google::protobuf::int32 value);

  // optional int32 absolute_send_time_id = 2;
  bool has_absolute_send_time_id() const;
  void clear_absolute_send_time_id();
  static const int kAbsoluteSendTimeIdFieldNumber = 2;
  ::google::protobuf::int32 absolute_send_time_id() const;
  void set_absolute_send_time_id(::google::protobuf::int32 value);

  // optional int32 transport_sequence_number_id = 3;
  bool has_transport_sequence_number_id() const;
  void clear_transport_sequence_number_id();
  static const int kTransportSequenceNumberIdFieldNumber = 3;
  ::google::protobuf::int32 transport_sequence_number_id() const;
  void set_transport_sequence_number_id(::google::protobuf::int32 value);

  // optional int32 video_rotation_id = 4;
  bool has_video_rotation_id() const;
  void clear_video_rotation_id();
  static const int kVideoRotationIdFieldNumber = 4;
  ::google::protobuf::int32 video_rotation_id() const;
  void set_video_rotation_id(::google::protobuf::int32 value);

  // optional int32 audio_level_id = 5;
  bool has_audio_level_id() const;
  void clear_audio_level_id();
  static const int kAudioLevelIdFieldNumber = 5;
  ::google::protobuf::int32 audio_level_id() const;
  void set_audio_level_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.RtpHeaderExtensionConfig)
 private:
  void set_has_transmission_time_offset_id();
  void clear_has_transmission_time_offset_id();
  void set_has_absolute_send_time_id();
  void clear_has_absolute_send_time_id();
  void set_has_transport_sequence_number_id();
  void clear_has_transport_sequence_number_id();
  void set_has_video_rotation_id();
  void clear_has_video_rotation_id();
  void set_has_audio_level_id();
  void clear_has_audio_level_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 transmission_time_offset_id_;
  ::google::protobuf::int32 absolute_send_time_id_;
  ::google::protobuf::int32 transport_sequence_number_id_;
  ::google::protobuf::int32 video_rotation_id_;
  ::google::protobuf::int32 audio_level_id_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoRecvStreamConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.VideoRecvStreamConfig) */ {
 public:
  VideoRecvStreamConfig();
  virtual ~VideoRecvStreamConfig();

  VideoRecvStreamConfig(const VideoRecvStreamConfig& from);

  inline VideoRecvStreamConfig& operator=(const VideoRecvStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoRecvStreamConfig(VideoRecvStreamConfig&& from) noexcept
    : VideoRecvStreamConfig() {
    *this = ::std::move(from);
  }

  inline VideoRecvStreamConfig& operator=(VideoRecvStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VideoRecvStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoRecvStreamConfig* internal_default_instance() {
    return reinterpret_cast<const VideoRecvStreamConfig*>(
               &_VideoRecvStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(VideoRecvStreamConfig* other);
  friend void swap(VideoRecvStreamConfig& a, VideoRecvStreamConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoRecvStreamConfig* New() const final {
    return CreateMaybeMessage<VideoRecvStreamConfig>(NULL);
  }

  VideoRecvStreamConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoRecvStreamConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const VideoRecvStreamConfig& from);
  void MergeFrom(const VideoRecvStreamConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoRecvStreamConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  bool has_header_extensions() const;
  void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 5;
  private:
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& _internal_header_extensions() const;
  public:
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions() const;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* release_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* mutable_header_extensions();
  void set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 remote_ssrc = 2;
  bool has_remote_ssrc() const;
  void clear_remote_ssrc();
  static const int kRemoteSsrcFieldNumber = 2;
  ::google::protobuf::uint32 remote_ssrc() const;
  void set_remote_ssrc(::google::protobuf::uint32 value);

  // optional uint32 local_ssrc = 3;
  bool has_local_ssrc() const;
  void clear_local_ssrc();
  static const int kLocalSsrcFieldNumber = 3;
  ::google::protobuf::uint32 local_ssrc() const;
  void set_local_ssrc(::google::protobuf::uint32 value);

  // optional uint32 rtx_ssrc = 4;
  bool has_rtx_ssrc() const;
  void clear_rtx_ssrc();
  static const int kRtxSsrcFieldNumber = 4;
  ::google::protobuf::uint32 rtx_ssrc() const;
  void set_rtx_ssrc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.VideoRecvStreamConfig)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_remote_ssrc();
  void clear_has_remote_ssrc();
  void set_has_local_ssrc();
  void clear_has_local_ssrc();
  void set_has_rtx_ssrc();
  void clear_has_rtx_ssrc();
  void set_has_header_extensions();
  void clear_has_header_extensions();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 remote_ssrc_;
  ::google::protobuf::uint32 local_ssrc_;
  ::google::protobuf::uint32 rtx_ssrc_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoSendStreamConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.VideoSendStreamConfig) */ {
 public:
  VideoSendStreamConfig();
  virtual ~VideoSendStreamConfig();

  VideoSendStreamConfig(const VideoSendStreamConfig& from);

  inline VideoSendStreamConfig& operator=(const VideoSendStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoSendStreamConfig(VideoSendStreamConfig&& from) noexcept
    : VideoSendStreamConfig() {
    *this = ::std::move(from);
  }

  inline VideoSendStreamConfig& operator=(VideoSendStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VideoSendStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoSendStreamConfig* internal_default_instance() {
    return reinterpret_cast<const VideoSendStreamConfig*>(
               &_VideoSendStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(VideoSendStreamConfig* other);
  friend void swap(VideoSendStreamConfig& a, VideoSendStreamConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoSendStreamConfig* New() const final {
    return CreateMaybeMessage<VideoSendStreamConfig>(NULL);
  }

  VideoSendStreamConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoSendStreamConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const VideoSendStreamConfig& from);
  void MergeFrom(const VideoSendStreamConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSendStreamConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  bool has_header_extensions() const;
  void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 4;
  private:
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& _internal_header_extensions() const;
  public:
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions() const;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* release_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* mutable_header_extensions();
  void set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 ssrc = 2;
  bool has_ssrc() const;
  void clear_ssrc();
  static const int kSsrcFieldNumber = 2;
  ::google::protobuf::uint32 ssrc() const;
  void set_ssrc(::google::protobuf::uint32 value);

  // optional uint32 rtx_ssrc = 3;
  bool has_rtx_ssrc() const;
  void clear_rtx_ssrc();
  static const int kRtxSsrcFieldNumber = 3;
  ::google::protobuf::uint32 rtx_ssrc() const;
  void set_rtx_ssrc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.VideoSendStreamConfig)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_ssrc();
  void clear_has_ssrc();
  void set_has_rtx_ssrc();
  void clear_has_rtx_ssrc();
  void set_has_header_extensions();
  void clear_has_header_extensions();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 ssrc_;
  ::google::protobuf::uint32 rtx_ssrc_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioRecvStreamConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AudioRecvStreamConfig) */ {
 public:
  AudioRecvStreamConfig();
  virtual ~AudioRecvStreamConfig();

  AudioRecvStreamConfig(const AudioRecvStreamConfig& from);

  inline AudioRecvStreamConfig& operator=(const AudioRecvStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioRecvStreamConfig(AudioRecvStreamConfig&& from) noexcept
    : AudioRecvStreamConfig() {
    *this = ::std::move(from);
  }

  inline AudioRecvStreamConfig& operator=(AudioRecvStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioRecvStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioRecvStreamConfig* internal_default_instance() {
    return reinterpret_cast<const AudioRecvStreamConfig*>(
               &_AudioRecvStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AudioRecvStreamConfig* other);
  friend void swap(AudioRecvStreamConfig& a, AudioRecvStreamConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioRecvStreamConfig* New() const final {
    return CreateMaybeMessage<AudioRecvStreamConfig>(NULL);
  }

  AudioRecvStreamConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioRecvStreamConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AudioRecvStreamConfig& from);
  void MergeFrom(const AudioRecvStreamConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioRecvStreamConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
  bool has_header_extensions() const;
  void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 5;
  private:
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& _internal_header_extensions() const;
  public:
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions() const;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* release_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* mutable_header_extensions();
  void set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 remote_ssrc = 2;
  bool has_remote_ssrc() const;
  void clear_remote_ssrc();
  static const int kRemoteSsrcFieldNumber = 2;
  ::google::protobuf::uint32 remote_ssrc() const;
  void set_remote_ssrc(::google::protobuf::uint32 value);

  // optional uint32 local_ssrc = 3;
  bool has_local_ssrc() const;
  void clear_local_ssrc();
  static const int kLocalSsrcFieldNumber = 3;
  ::google::protobuf::uint32 local_ssrc() const;
  void set_local_ssrc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AudioRecvStreamConfig)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_remote_ssrc();
  void clear_has_remote_ssrc();
  void set_has_local_ssrc();
  void clear_has_local_ssrc();
  void set_has_header_extensions();
  void clear_has_header_extensions();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 remote_ssrc_;
  ::google::protobuf::uint32 local_ssrc_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioSendStreamConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AudioSendStreamConfig) */ {
 public:
  AudioSendStreamConfig();
  virtual ~AudioSendStreamConfig();

  AudioSendStreamConfig(const AudioSendStreamConfig& from);

  inline AudioSendStreamConfig& operator=(const AudioSendStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioSendStreamConfig(AudioSendStreamConfig&& from) noexcept
    : AudioSendStreamConfig() {
    *this = ::std::move(from);
  }

  inline AudioSendStreamConfig& operator=(AudioSendStreamConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioSendStreamConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioSendStreamConfig* internal_default_instance() {
    return reinterpret_cast<const AudioSendStreamConfig*>(
               &_AudioSendStreamConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AudioSendStreamConfig* other);
  friend void swap(AudioSendStreamConfig& a, AudioSendStreamConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioSendStreamConfig* New() const final {
    return CreateMaybeMessage<AudioSendStreamConfig>(NULL);
  }

  AudioSendStreamConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioSendStreamConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AudioSendStreamConfig& from);
  void MergeFrom(const AudioSendStreamConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioSendStreamConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
  bool has_header_extensions() const;
  void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 4;
  private:
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& _internal_header_extensions() const;
  public:
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig& header_extensions() const;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* release_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* mutable_header_extensions();
  void set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 ssrc = 2;
  bool has_ssrc() const;
  void clear_ssrc();
  static const int kSsrcFieldNumber = 2;
  ::google::protobuf::uint32 ssrc() const;
  void set_ssrc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AudioSendStreamConfig)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_ssrc();
  void clear_has_ssrc();
  void set_has_header_extensions();
  void clear_has_header_extensions();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 ssrc_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioNetworkAdaptations : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AudioNetworkAdaptations) */ {
 public:
  AudioNetworkAdaptations();
  virtual ~AudioNetworkAdaptations();

  AudioNetworkAdaptations(const AudioNetworkAdaptations& from);

  inline AudioNetworkAdaptations& operator=(const AudioNetworkAdaptations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioNetworkAdaptations(AudioNetworkAdaptations&& from) noexcept
    : AudioNetworkAdaptations() {
    *this = ::std::move(from);
  }

  inline AudioNetworkAdaptations& operator=(AudioNetworkAdaptations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioNetworkAdaptations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioNetworkAdaptations* internal_default_instance() {
    return reinterpret_cast<const AudioNetworkAdaptations*>(
               &_AudioNetworkAdaptations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AudioNetworkAdaptations* other);
  friend void swap(AudioNetworkAdaptations& a, AudioNetworkAdaptations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioNetworkAdaptations* New() const final {
    return CreateMaybeMessage<AudioNetworkAdaptations>(NULL);
  }

  AudioNetworkAdaptations* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioNetworkAdaptations>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AudioNetworkAdaptations& from);
  void MergeFrom(const AudioNetworkAdaptations& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioNetworkAdaptations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes timestamp_ms_deltas = 101;
  bool has_timestamp_ms_deltas() const;
  void clear_timestamp_ms_deltas();
  static const int kTimestampMsDeltasFieldNumber = 101;
  const ::std::string& timestamp_ms_deltas() const;
  void set_timestamp_ms_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp_ms_deltas(::std::string&& value);
  #endif
  void set_timestamp_ms_deltas(const char* value);
  void set_timestamp_ms_deltas(const void* value, size_t size);
  ::std::string* mutable_timestamp_ms_deltas();
  ::std::string* release_timestamp_ms_deltas();
  void set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas);

  // optional bytes bitrate_bps_deltas = 102;
  bool has_bitrate_bps_deltas() const;
  void clear_bitrate_bps_deltas();
  static const int kBitrateBpsDeltasFieldNumber = 102;
  const ::std::string& bitrate_bps_deltas() const;
  void set_bitrate_bps_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_bitrate_bps_deltas(::std::string&& value);
  #endif
  void set_bitrate_bps_deltas(const char* value);
  void set_bitrate_bps_deltas(const void* value, size_t size);
  ::std::string* mutable_bitrate_bps_deltas();
  ::std::string* release_bitrate_bps_deltas();
  void set_allocated_bitrate_bps_deltas(::std::string* bitrate_bps_deltas);

  // optional bytes frame_length_ms_deltas = 103;
  bool has_frame_length_ms_deltas() const;
  void clear_frame_length_ms_deltas();
  static const int kFrameLengthMsDeltasFieldNumber = 103;
  const ::std::string& frame_length_ms_deltas() const;
  void set_frame_length_ms_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_length_ms_deltas(::std::string&& value);
  #endif
  void set_frame_length_ms_deltas(const char* value);
  void set_frame_length_ms_deltas(const void* value, size_t size);
  ::std::string* mutable_frame_length_ms_deltas();
  ::std::string* release_frame_length_ms_deltas();
  void set_allocated_frame_length_ms_deltas(::std::string* frame_length_ms_deltas);

  // optional bytes uplink_packet_loss_fraction_deltas = 104;
  bool has_uplink_packet_loss_fraction_deltas() const;
  void clear_uplink_packet_loss_fraction_deltas();
  static const int kUplinkPacketLossFractionDeltasFieldNumber = 104;
  const ::std::string& uplink_packet_loss_fraction_deltas() const;
  void set_uplink_packet_loss_fraction_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_uplink_packet_loss_fraction_deltas(::std::string&& value);
  #endif
  void set_uplink_packet_loss_fraction_deltas(const char* value);
  void set_uplink_packet_loss_fraction_deltas(const void* value, size_t size);
  ::std::string* mutable_uplink_packet_loss_fraction_deltas();
  ::std::string* release_uplink_packet_loss_fraction_deltas();
  void set_allocated_uplink_packet_loss_fraction_deltas(::std::string* uplink_packet_loss_fraction_deltas);

  // optional bytes enable_fec_deltas = 105;
  bool has_enable_fec_deltas() const;
  void clear_enable_fec_deltas();
  static const int kEnableFecDeltasFieldNumber = 105;
  const ::std::string& enable_fec_deltas() const;
  void set_enable_fec_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_enable_fec_deltas(::std::string&& value);
  #endif
  void set_enable_fec_deltas(const char* value);
  void set_enable_fec_deltas(const void* value, size_t size);
  ::std::string* mutable_enable_fec_deltas();
  ::std::string* release_enable_fec_deltas();
  void set_allocated_enable_fec_deltas(::std::string* enable_fec_deltas);

  // optional bytes enable_dtx_deltas = 106;
  bool has_enable_dtx_deltas() const;
  void clear_enable_dtx_deltas();
  static const int kEnableDtxDeltasFieldNumber = 106;
  const ::std::string& enable_dtx_deltas() const;
  void set_enable_dtx_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_enable_dtx_deltas(::std::string&& value);
  #endif
  void set_enable_dtx_deltas(const char* value);
  void set_enable_dtx_deltas(const void* value, size_t size);
  ::std::string* mutable_enable_dtx_deltas();
  ::std::string* release_enable_dtx_deltas();
  void set_allocated_enable_dtx_deltas(::std::string* enable_dtx_deltas);

  // optional bytes num_channels_deltas = 107;
  bool has_num_channels_deltas() const;
  void clear_num_channels_deltas();
  static const int kNumChannelsDeltasFieldNumber = 107;
  const ::std::string& num_channels_deltas() const;
  void set_num_channels_deltas(const ::std::string& value);
  #if LANG_CXX11
  void set_num_channels_deltas(::std::string&& value);
  #endif
  void set_num_channels_deltas(const char* value);
  void set_num_channels_deltas(const void* value, size_t size);
  ::std::string* mutable_num_channels_deltas();
  ::std::string* release_num_channels_deltas();
  void set_allocated_num_channels_deltas(::std::string* num_channels_deltas);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional int32 bitrate_bps = 2;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 2;
  ::google::protobuf::int32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::int32 value);

  // optional int32 frame_length_ms = 3;
  bool has_frame_length_ms() const;
  void clear_frame_length_ms();
  static const int kFrameLengthMsFieldNumber = 3;
  ::google::protobuf::int32 frame_length_ms() const;
  void set_frame_length_ms(::google::protobuf::int32 value);

  // optional uint32 uplink_packet_loss_fraction = 4;
  bool has_uplink_packet_loss_fraction() const;
  void clear_uplink_packet_loss_fraction();
  static const int kUplinkPacketLossFractionFieldNumber = 4;
  ::google::protobuf::uint32 uplink_packet_loss_fraction() const;
  void set_uplink_packet_loss_fraction(::google::protobuf::uint32 value);

  // optional bool enable_fec = 5;
  bool has_enable_fec() const;
  void clear_enable_fec();
  static const int kEnableFecFieldNumber = 5;
  bool enable_fec() const;
  void set_enable_fec(bool value);

  // optional bool enable_dtx = 6;
  bool has_enable_dtx() const;
  void clear_enable_dtx();
  static const int kEnableDtxFieldNumber = 6;
  bool enable_dtx() const;
  void set_enable_dtx(bool value);

  // optional uint32 num_channels = 7;
  bool has_num_channels() const;
  void clear_num_channels();
  static const int kNumChannelsFieldNumber = 7;
  ::google::protobuf::uint32 num_channels() const;
  void set_num_channels(::google::protobuf::uint32 value);

  // optional uint32 number_of_deltas = 8;
  bool has_number_of_deltas() const;
  void clear_number_of_deltas();
  static const int kNumberOfDeltasFieldNumber = 8;
  ::google::protobuf::uint32 number_of_deltas() const;
  void set_number_of_deltas(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AudioNetworkAdaptations)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();
  void set_has_frame_length_ms();
  void clear_has_frame_length_ms();
  void set_has_uplink_packet_loss_fraction();
  void clear_has_uplink_packet_loss_fraction();
  void set_has_enable_fec();
  void clear_has_enable_fec();
  void set_has_enable_dtx();
  void clear_has_enable_dtx();
  void set_has_num_channels();
  void clear_has_num_channels();
  void set_has_number_of_deltas();
  void clear_has_number_of_deltas();
  void set_has_timestamp_ms_deltas();
  void clear_has_timestamp_ms_deltas();
  void set_has_bitrate_bps_deltas();
  void clear_has_bitrate_bps_deltas();
  void set_has_frame_length_ms_deltas();
  void clear_has_frame_length_ms_deltas();
  void set_has_uplink_packet_loss_fraction_deltas();
  void clear_has_uplink_packet_loss_fraction_deltas();
  void set_has_enable_fec_deltas();
  void clear_has_enable_fec_deltas();
  void set_has_enable_dtx_deltas();
  void clear_has_enable_dtx_deltas();
  void set_has_num_channels_deltas();
  void clear_has_num_channels_deltas();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_ms_deltas_;
  ::google::protobuf::internal::ArenaStringPtr bitrate_bps_deltas_;
  ::google::protobuf::internal::ArenaStringPtr frame_length_ms_deltas_;
  ::google::protobuf::internal::ArenaStringPtr uplink_packet_loss_fraction_deltas_;
  ::google::protobuf::internal::ArenaStringPtr enable_fec_deltas_;
  ::google::protobuf::internal::ArenaStringPtr enable_dtx_deltas_;
  ::google::protobuf::internal::ArenaStringPtr num_channels_deltas_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::int32 bitrate_bps_;
  ::google::protobuf::int32 frame_length_ms_;
  ::google::protobuf::uint32 uplink_packet_loss_fraction_;
  bool enable_fec_;
  bool enable_dtx_;
  ::google::protobuf::uint32 num_channels_;
  ::google::protobuf::uint32 number_of_deltas_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BweProbeCluster : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.BweProbeCluster) */ {
 public:
  BweProbeCluster();
  virtual ~BweProbeCluster();

  BweProbeCluster(const BweProbeCluster& from);

  inline BweProbeCluster& operator=(const BweProbeCluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BweProbeCluster(BweProbeCluster&& from) noexcept
    : BweProbeCluster() {
    *this = ::std::move(from);
  }

  inline BweProbeCluster& operator=(BweProbeCluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BweProbeCluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BweProbeCluster* internal_default_instance() {
    return reinterpret_cast<const BweProbeCluster*>(
               &_BweProbeCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BweProbeCluster* other);
  friend void swap(BweProbeCluster& a, BweProbeCluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BweProbeCluster* New() const final {
    return CreateMaybeMessage<BweProbeCluster>(NULL);
  }

  BweProbeCluster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BweProbeCluster>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BweProbeCluster& from);
  void MergeFrom(const BweProbeCluster& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BweProbeCluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 bitrate_bps = 3;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 3;
  ::google::protobuf::uint32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::uint32 value);

  // optional uint32 min_packets = 4;
  bool has_min_packets() const;
  void clear_min_packets();
  static const int kMinPacketsFieldNumber = 4;
  ::google::protobuf::uint32 min_packets() const;
  void set_min_packets(::google::protobuf::uint32 value);

  // optional uint32 min_bytes = 5;
  bool has_min_bytes() const;
  void clear_min_bytes();
  static const int kMinBytesFieldNumber = 5;
  ::google::protobuf::uint32 min_bytes() const;
  void set_min_bytes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.BweProbeCluster)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_id();
  void clear_has_id();
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();
  void set_has_min_packets();
  void clear_has_min_packets();
  void set_has_min_bytes();
  void clear_has_min_bytes();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 bitrate_bps_;
  ::google::protobuf::uint32 min_packets_;
  ::google::protobuf::uint32 min_bytes_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BweProbeResultSuccess : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.BweProbeResultSuccess) */ {
 public:
  BweProbeResultSuccess();
  virtual ~BweProbeResultSuccess();

  BweProbeResultSuccess(const BweProbeResultSuccess& from);

  inline BweProbeResultSuccess& operator=(const BweProbeResultSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BweProbeResultSuccess(BweProbeResultSuccess&& from) noexcept
    : BweProbeResultSuccess() {
    *this = ::std::move(from);
  }

  inline BweProbeResultSuccess& operator=(BweProbeResultSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BweProbeResultSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BweProbeResultSuccess* internal_default_instance() {
    return reinterpret_cast<const BweProbeResultSuccess*>(
               &_BweProbeResultSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BweProbeResultSuccess* other);
  friend void swap(BweProbeResultSuccess& a, BweProbeResultSuccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BweProbeResultSuccess* New() const final {
    return CreateMaybeMessage<BweProbeResultSuccess>(NULL);
  }

  BweProbeResultSuccess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BweProbeResultSuccess>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BweProbeResultSuccess& from);
  void MergeFrom(const BweProbeResultSuccess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BweProbeResultSuccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 bitrate_bps = 3;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 3;
  ::google::protobuf::uint32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.BweProbeResultSuccess)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_id();
  void clear_has_id();
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 bitrate_bps_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BweProbeResultFailure : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.BweProbeResultFailure) */ {
 public:
  BweProbeResultFailure();
  virtual ~BweProbeResultFailure();

  BweProbeResultFailure(const BweProbeResultFailure& from);

  inline BweProbeResultFailure& operator=(const BweProbeResultFailure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BweProbeResultFailure(BweProbeResultFailure&& from) noexcept
    : BweProbeResultFailure() {
    *this = ::std::move(from);
  }

  inline BweProbeResultFailure& operator=(BweProbeResultFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BweProbeResultFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BweProbeResultFailure* internal_default_instance() {
    return reinterpret_cast<const BweProbeResultFailure*>(
               &_BweProbeResultFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BweProbeResultFailure* other);
  friend void swap(BweProbeResultFailure& a, BweProbeResultFailure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BweProbeResultFailure* New() const final {
    return CreateMaybeMessage<BweProbeResultFailure>(NULL);
  }

  BweProbeResultFailure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BweProbeResultFailure>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BweProbeResultFailure& from);
  void MergeFrom(const BweProbeResultFailure& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BweProbeResultFailure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BweProbeResultFailure_FailureReason FailureReason;
  static const FailureReason UNKNOWN =
    BweProbeResultFailure_FailureReason_UNKNOWN;
  static const FailureReason INVALID_SEND_RECEIVE_INTERVAL =
    BweProbeResultFailure_FailureReason_INVALID_SEND_RECEIVE_INTERVAL;
  static const FailureReason INVALID_SEND_RECEIVE_RATIO =
    BweProbeResultFailure_FailureReason_INVALID_SEND_RECEIVE_RATIO;
  static const FailureReason TIMEOUT =
    BweProbeResultFailure_FailureReason_TIMEOUT;
  static inline bool FailureReason_IsValid(int value) {
    return BweProbeResultFailure_FailureReason_IsValid(value);
  }
  static const FailureReason FailureReason_MIN =
    BweProbeResultFailure_FailureReason_FailureReason_MIN;
  static const FailureReason FailureReason_MAX =
    BweProbeResultFailure_FailureReason_FailureReason_MAX;
  static const int FailureReason_ARRAYSIZE =
    BweProbeResultFailure_FailureReason_FailureReason_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
  bool has_failure() const;
  void clear_failure();
  static const int kFailureFieldNumber = 3;
  ::webrtc::rtclog2::BweProbeResultFailure_FailureReason failure() const;
  void set_failure(::webrtc::rtclog2::BweProbeResultFailure_FailureReason value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.BweProbeResultFailure)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_id();
  void clear_has_id();
  void set_has_failure();
  void clear_has_failure();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::uint32 id_;
  int failure_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlrState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.AlrState) */ {
 public:
  AlrState();
  virtual ~AlrState();

  AlrState(const AlrState& from);

  inline AlrState& operator=(const AlrState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlrState(AlrState&& from) noexcept
    : AlrState() {
    *this = ::std::move(from);
  }

  inline AlrState& operator=(AlrState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AlrState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlrState* internal_default_instance() {
    return reinterpret_cast<const AlrState*>(
               &_AlrState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AlrState* other);
  friend void swap(AlrState& a, AlrState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlrState* New() const final {
    return CreateMaybeMessage<AlrState>(NULL);
  }

  AlrState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlrState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AlrState& from);
  void MergeFrom(const AlrState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlrState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional bool in_alr = 2;
  bool has_in_alr() const;
  void clear_in_alr();
  static const int kInAlrFieldNumber = 2;
  bool in_alr() const;
  void set_in_alr(bool value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.AlrState)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_in_alr();
  void clear_has_in_alr();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 timestamp_ms_;
  bool in_alr_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IceCandidatePairConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.IceCandidatePairConfig) */ {
 public:
  IceCandidatePairConfig();
  virtual ~IceCandidatePairConfig();

  IceCandidatePairConfig(const IceCandidatePairConfig& from);

  inline IceCandidatePairConfig& operator=(const IceCandidatePairConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IceCandidatePairConfig(IceCandidatePairConfig&& from) noexcept
    : IceCandidatePairConfig() {
    *this = ::std::move(from);
  }

  inline IceCandidatePairConfig& operator=(IceCandidatePairConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IceCandidatePairConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IceCandidatePairConfig* internal_default_instance() {
    return reinterpret_cast<const IceCandidatePairConfig*>(
               &_IceCandidatePairConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(IceCandidatePairConfig* other);
  friend void swap(IceCandidatePairConfig& a, IceCandidatePairConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IceCandidatePairConfig* New() const final {
    return CreateMaybeMessage<IceCandidatePairConfig>(NULL);
  }

  IceCandidatePairConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IceCandidatePairConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IceCandidatePairConfig& from);
  void MergeFrom(const IceCandidatePairConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IceCandidatePairConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfigType;
  static const IceCandidatePairConfigType UNKNOWN_CONFIG_TYPE =
    IceCandidatePairConfig_IceCandidatePairConfigType_UNKNOWN_CONFIG_TYPE;
  static const IceCandidatePairConfigType ADDED =
    IceCandidatePairConfig_IceCandidatePairConfigType_ADDED;
  static const IceCandidatePairConfigType UPDATED =
    IceCandidatePairConfig_IceCandidatePairConfigType_UPDATED;
  static const IceCandidatePairConfigType DESTROYED =
    IceCandidatePairConfig_IceCandidatePairConfigType_DESTROYED;
  static const IceCandidatePairConfigType SELECTED =
    IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED;
  static inline bool IceCandidatePairConfigType_IsValid(int value) {
    return IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(value);
  }
  static const IceCandidatePairConfigType IceCandidatePairConfigType_MIN =
    IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MIN;
  static const IceCandidatePairConfigType IceCandidatePairConfigType_MAX =
    IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX;
  static const int IceCandidatePairConfigType_ARRAYSIZE =
    IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_ARRAYSIZE;

  typedef IceCandidatePairConfig_IceCandidateType IceCandidateType;
  static const IceCandidateType UNKNOWN_CANDIDATE_TYPE =
    IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE;
  static const IceCandidateType LOCAL =
    IceCandidatePairConfig_IceCandidateType_LOCAL;
  static const IceCandidateType STUN =
    IceCandidatePairConfig_IceCandidateType_STUN;
  static const IceCandidateType PRFLX =
    IceCandidatePairConfig_IceCandidateType_PRFLX;
  static const IceCandidateType RELAY =
    IceCandidatePairConfig_IceCandidateType_RELAY;
  static inline bool IceCandidateType_IsValid(int value) {
    return IceCandidatePairConfig_IceCandidateType_IsValid(value);
  }
  static const IceCandidateType IceCandidateType_MIN =
    IceCandidatePairConfig_IceCandidateType_IceCandidateType_MIN;
  static const IceCandidateType IceCandidateType_MAX =
    IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX;
  static const int IceCandidateType_ARRAYSIZE =
    IceCandidatePairConfig_IceCandidateType_IceCandidateType_ARRAYSIZE;

  typedef IceCandidatePairConfig_Protocol Protocol;
  static const Protocol UNKNOWN_PROTOCOL =
    IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL;
  static const Protocol UDP =
    IceCandidatePairConfig_Protocol_UDP;
  static const Protocol TCP =
    IceCandidatePairConfig_Protocol_TCP;
  static const Protocol SSLTCP =
    IceCandidatePairConfig_Protocol_SSLTCP;
  static const Protocol TLS =
    IceCandidatePairConfig_Protocol_TLS;
  static inline bool Protocol_IsValid(int value) {
    return IceCandidatePairConfig_Protocol_IsValid(value);
  }
  static const Protocol Protocol_MIN =
    IceCandidatePairConfig_Protocol_Protocol_MIN;
  static const Protocol Protocol_MAX =
    IceCandidatePairConfig_Protocol_Protocol_MAX;
  static const int Protocol_ARRAYSIZE =
    IceCandidatePairConfig_Protocol_Protocol_ARRAYSIZE;

  typedef IceCandidatePairConfig_AddressFamily AddressFamily;
  static const AddressFamily UNKNOWN_ADDRESS_FAMILY =
    IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY;
  static const AddressFamily IPV4 =
    IceCandidatePairConfig_AddressFamily_IPV4;
  static const AddressFamily IPV6 =
    IceCandidatePairConfig_AddressFamily_IPV6;
  static inline bool AddressFamily_IsValid(int value) {
    return IceCandidatePairConfig_AddressFamily_IsValid(value);
  }
  static const AddressFamily AddressFamily_MIN =
    IceCandidatePairConfig_AddressFamily_AddressFamily_MIN;
  static const AddressFamily AddressFamily_MAX =
    IceCandidatePairConfig_AddressFamily_AddressFamily_MAX;
  static const int AddressFamily_ARRAYSIZE =
    IceCandidatePairConfig_AddressFamily_AddressFamily_ARRAYSIZE;

  typedef IceCandidatePairConfig_NetworkType NetworkType;
  static const NetworkType UNKNOWN_NETWORK_TYPE =
    IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE;
  static const NetworkType ETHERNET =
    IceCandidatePairConfig_NetworkType_ETHERNET;
  static const NetworkType WIFI =
    IceCandidatePairConfig_NetworkType_WIFI;
  static const NetworkType CELLULAR =
    IceCandidatePairConfig_NetworkType_CELLULAR;
  static const NetworkType VPN =
    IceCandidatePairConfig_NetworkType_VPN;
  static const NetworkType LOOPBACK =
    IceCandidatePairConfig_NetworkType_LOOPBACK;
  static inline bool NetworkType_IsValid(int value) {
    return IceCandidatePairConfig_NetworkType_IsValid(value);
  }
  static const NetworkType NetworkType_MIN =
    IceCandidatePairConfig_NetworkType_NetworkType_MIN;
  static const NetworkType NetworkType_MAX =
    IceCandidatePairConfig_NetworkType_NetworkType_MAX;
  static const int NetworkType_ARRAYSIZE =
    IceCandidatePairConfig_NetworkType_NetworkType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
  bool has_config_type() const;
  void clear_config_type();
  static const int kConfigTypeFieldNumber = 2;
  ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType config_type() const;
  void set_config_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType value);

  // optional uint32 candidate_pair_id = 3;
  bool has_candidate_pair_id() const;
  void clear_candidate_pair_id();
  static const int kCandidatePairIdFieldNumber = 3;
  ::google::protobuf::uint32 candidate_pair_id() const;
  void set_candidate_pair_id(::google::protobuf::uint32 value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
  bool has_local_candidate_type() const;
  void clear_local_candidate_type();
  static const int kLocalCandidateTypeFieldNumber = 4;
  ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType local_candidate_type() const;
  void set_local_candidate_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
  bool has_local_relay_protocol() const;
  void clear_local_relay_protocol();
  static const int kLocalRelayProtocolFieldNumber = 5;
  ::webrtc::rtclog2::IceCandidatePairConfig_Protocol local_relay_protocol() const;
  void set_local_relay_protocol(::webrtc::rtclog2::IceCandidatePairConfig_Protocol value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
  bool has_local_network_type() const;
  void clear_local_network_type();
  static const int kLocalNetworkTypeFieldNumber = 6;
  ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType local_network_type() const;
  void set_local_network_type(::webrtc::rtclog2::IceCandidatePairConfig_NetworkType value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
  bool has_local_address_family() const;
  void clear_local_address_family();
  static const int kLocalAddressFamilyFieldNumber = 7;
  ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily local_address_family() const;
  void set_local_address_family(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
  bool has_remote_candidate_type() const;
  void clear_remote_candidate_type();
  static const int kRemoteCandidateTypeFieldNumber = 8;
  ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType remote_candidate_type() const;
  void set_remote_candidate_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
  bool has_remote_address_family() const;
  void clear_remote_address_family();
  static const int kRemoteAddressFamilyFieldNumber = 9;
  ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily remote_address_family() const;
  void set_remote_address_family(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily value);

  // optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
  bool has_candidate_pair_protocol() const;
  void clear_candidate_pair_protocol();
  static const int kCandidatePairProtocolFieldNumber = 10;
  ::webrtc::rtclog2::IceCandidatePairConfig_Protocol candidate_pair_protocol() const;
  void set_candidate_pair_protocol(::webrtc::rtclog2::IceCandidatePairConfig_Protocol value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.IceCandidatePairConfig)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_config_type();
  void clear_has_config_type();
  void set_has_candidate_pair_id();
  void clear_has_candidate_pair_id();
  void set_has_local_candidate_type();
  void clear_has_local_candidate_type();
  void set_has_local_relay_protocol();
  void clear_has_local_relay_protocol();
  void set_has_local_network_type();
  void clear_has_local_network_type();
  void set_has_local_address_family();
  void clear_has_local_address_family();
  void set_has_remote_candidate_type();
  void clear_has_remote_candidate_type();
  void set_has_remote_address_family();
  void clear_has_remote_address_family();
  void set_has_candidate_pair_protocol();
  void clear_has_candidate_pair_protocol();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 timestamp_ms_;
  int config_type_;
  ::google::protobuf::uint32 candidate_pair_id_;
  int local_candidate_type_;
  int local_relay_protocol_;
  int local_network_type_;
  int local_address_family_;
  int remote_candidate_type_;
  int remote_address_family_;
  int candidate_pair_protocol_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IceCandidatePairEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog2.IceCandidatePairEvent) */ {
 public:
  IceCandidatePairEvent();
  virtual ~IceCandidatePairEvent();

  IceCandidatePairEvent(const IceCandidatePairEvent& from);

  inline IceCandidatePairEvent& operator=(const IceCandidatePairEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IceCandidatePairEvent(IceCandidatePairEvent&& from) noexcept
    : IceCandidatePairEvent() {
    *this = ::std::move(from);
  }

  inline IceCandidatePairEvent& operator=(IceCandidatePairEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IceCandidatePairEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IceCandidatePairEvent* internal_default_instance() {
    return reinterpret_cast<const IceCandidatePairEvent*>(
               &_IceCandidatePairEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(IceCandidatePairEvent* other);
  friend void swap(IceCandidatePairEvent& a, IceCandidatePairEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IceCandidatePairEvent* New() const final {
    return CreateMaybeMessage<IceCandidatePairEvent>(NULL);
  }

  IceCandidatePairEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IceCandidatePairEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IceCandidatePairEvent& from);
  void MergeFrom(const IceCandidatePairEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IceCandidatePairEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEventType;
  static const IceCandidatePairEventType UNKNOWN_CHECK_TYPE =
    IceCandidatePairEvent_IceCandidatePairEventType_UNKNOWN_CHECK_TYPE;
  static const IceCandidatePairEventType CHECK_SENT =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_SENT;
  static const IceCandidatePairEventType CHECK_RECEIVED =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RECEIVED;
  static const IceCandidatePairEventType CHECK_RESPONSE_SENT =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_SENT;
  static const IceCandidatePairEventType CHECK_RESPONSE_RECEIVED =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED;
  static inline bool IceCandidatePairEventType_IsValid(int value) {
    return IceCandidatePairEvent_IceCandidatePairEventType_IsValid(value);
  }
  static const IceCandidatePairEventType IceCandidatePairEventType_MIN =
    IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MIN;
  static const IceCandidatePairEventType IceCandidatePairEventType_MAX =
    IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX;
  static const int IceCandidatePairEventType_ARRAYSIZE =
    IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType event_type() const;
  void set_event_type(::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType value);

  // optional uint32 candidate_pair_id = 3;
  bool has_candidate_pair_id() const;
  void clear_candidate_pair_id();
  static const int kCandidatePairIdFieldNumber = 3;
  ::google::protobuf::uint32 candidate_pair_id() const;
  void set_candidate_pair_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog2.IceCandidatePairEvent)
 private:
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_candidate_pair_id();
  void clear_has_candidate_pair_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 timestamp_ms_;
  int event_type_;
  ::google::protobuf::uint32 candidate_pair_id_;
  friend struct ::protobuf_rtc_5fevent_5flog2_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventStream

// repeated .webrtc.rtclog2.Event stream = 1 [deprecated = true];
inline int EventStream::stream_size() const {
  return stream_.size();
}
inline void EventStream::clear_stream() {
  stream_.Clear();
}
inline ::webrtc::rtclog2::Event* EventStream::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.stream)
  return stream_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::Event >*
EventStream::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.stream)
  return &stream_;
}
inline const ::webrtc::rtclog2::Event& EventStream::stream(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.stream)
  return stream_.Get(index);
}
inline ::webrtc::rtclog2::Event* EventStream::add_stream() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.stream)
  return stream_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::Event >&
EventStream::stream() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.stream)
  return stream_;
}

// repeated .webrtc.rtclog2.IncomingRtpPackets incoming_rtp_packets = 2;
inline int EventStream::incoming_rtp_packets_size() const {
  return incoming_rtp_packets_.size();
}
inline void EventStream::clear_incoming_rtp_packets() {
  incoming_rtp_packets_.Clear();
}
inline ::webrtc::rtclog2::IncomingRtpPackets* EventStream::mutable_incoming_rtp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >*
EventStream::mutable_incoming_rtp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return &incoming_rtp_packets_;
}
inline const ::webrtc::rtclog2::IncomingRtpPackets& EventStream::incoming_rtp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_.Get(index);
}
inline ::webrtc::rtclog2::IncomingRtpPackets* EventStream::add_incoming_rtp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtpPackets >&
EventStream::incoming_rtp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.incoming_rtp_packets)
  return incoming_rtp_packets_;
}

// repeated .webrtc.rtclog2.OutgoingRtpPackets outgoing_rtp_packets = 3;
inline int EventStream::outgoing_rtp_packets_size() const {
  return outgoing_rtp_packets_.size();
}
inline void EventStream::clear_outgoing_rtp_packets() {
  outgoing_rtp_packets_.Clear();
}
inline ::webrtc::rtclog2::OutgoingRtpPackets* EventStream::mutable_outgoing_rtp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >*
EventStream::mutable_outgoing_rtp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return &outgoing_rtp_packets_;
}
inline const ::webrtc::rtclog2::OutgoingRtpPackets& EventStream::outgoing_rtp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_.Get(index);
}
inline ::webrtc::rtclog2::OutgoingRtpPackets* EventStream::add_outgoing_rtp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtpPackets >&
EventStream::outgoing_rtp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.outgoing_rtp_packets)
  return outgoing_rtp_packets_;
}

// repeated .webrtc.rtclog2.IncomingRtcpPackets incoming_rtcp_packets = 4;
inline int EventStream::incoming_rtcp_packets_size() const {
  return incoming_rtcp_packets_.size();
}
inline void EventStream::clear_incoming_rtcp_packets() {
  incoming_rtcp_packets_.Clear();
}
inline ::webrtc::rtclog2::IncomingRtcpPackets* EventStream::mutable_incoming_rtcp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >*
EventStream::mutable_incoming_rtcp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return &incoming_rtcp_packets_;
}
inline const ::webrtc::rtclog2::IncomingRtcpPackets& EventStream::incoming_rtcp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_.Get(index);
}
inline ::webrtc::rtclog2::IncomingRtcpPackets* EventStream::add_incoming_rtcp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IncomingRtcpPackets >&
EventStream::incoming_rtcp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.incoming_rtcp_packets)
  return incoming_rtcp_packets_;
}

// repeated .webrtc.rtclog2.OutgoingRtcpPackets outgoing_rtcp_packets = 5;
inline int EventStream::outgoing_rtcp_packets_size() const {
  return outgoing_rtcp_packets_.size();
}
inline void EventStream::clear_outgoing_rtcp_packets() {
  outgoing_rtcp_packets_.Clear();
}
inline ::webrtc::rtclog2::OutgoingRtcpPackets* EventStream::mutable_outgoing_rtcp_packets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >*
EventStream::mutable_outgoing_rtcp_packets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return &outgoing_rtcp_packets_;
}
inline const ::webrtc::rtclog2::OutgoingRtcpPackets& EventStream::outgoing_rtcp_packets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_.Get(index);
}
inline ::webrtc::rtclog2::OutgoingRtcpPackets* EventStream::add_outgoing_rtcp_packets() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::OutgoingRtcpPackets >&
EventStream::outgoing_rtcp_packets() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.outgoing_rtcp_packets)
  return outgoing_rtcp_packets_;
}

// repeated .webrtc.rtclog2.AudioPlayoutEvents audio_playout_events = 6;
inline int EventStream::audio_playout_events_size() const {
  return audio_playout_events_.size();
}
inline void EventStream::clear_audio_playout_events() {
  audio_playout_events_.Clear();
}
inline ::webrtc::rtclog2::AudioPlayoutEvents* EventStream::mutable_audio_playout_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >*
EventStream::mutable_audio_playout_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_playout_events)
  return &audio_playout_events_;
}
inline const ::webrtc::rtclog2::AudioPlayoutEvents& EventStream::audio_playout_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_.Get(index);
}
inline ::webrtc::rtclog2::AudioPlayoutEvents* EventStream::add_audio_playout_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioPlayoutEvents >&
EventStream::audio_playout_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_playout_events)
  return audio_playout_events_;
}

// repeated .webrtc.rtclog2.BeginLogEvent begin_log_events = 16;
inline int EventStream::begin_log_events_size() const {
  return begin_log_events_.size();
}
inline void EventStream::clear_begin_log_events() {
  begin_log_events_.Clear();
}
inline ::webrtc::rtclog2::BeginLogEvent* EventStream::mutable_begin_log_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >*
EventStream::mutable_begin_log_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.begin_log_events)
  return &begin_log_events_;
}
inline const ::webrtc::rtclog2::BeginLogEvent& EventStream::begin_log_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_.Get(index);
}
inline ::webrtc::rtclog2::BeginLogEvent* EventStream::add_begin_log_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BeginLogEvent >&
EventStream::begin_log_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.begin_log_events)
  return begin_log_events_;
}

// repeated .webrtc.rtclog2.EndLogEvent end_log_events = 17;
inline int EventStream::end_log_events_size() const {
  return end_log_events_.size();
}
inline void EventStream::clear_end_log_events() {
  end_log_events_.Clear();
}
inline ::webrtc::rtclog2::EndLogEvent* EventStream::mutable_end_log_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >*
EventStream::mutable_end_log_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.end_log_events)
  return &end_log_events_;
}
inline const ::webrtc::rtclog2::EndLogEvent& EventStream::end_log_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_.Get(index);
}
inline ::webrtc::rtclog2::EndLogEvent* EventStream::add_end_log_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::EndLogEvent >&
EventStream::end_log_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.end_log_events)
  return end_log_events_;
}

// repeated .webrtc.rtclog2.LossBasedBweUpdates loss_based_bwe_updates = 18;
inline int EventStream::loss_based_bwe_updates_size() const {
  return loss_based_bwe_updates_.size();
}
inline void EventStream::clear_loss_based_bwe_updates() {
  loss_based_bwe_updates_.Clear();
}
inline ::webrtc::rtclog2::LossBasedBweUpdates* EventStream::mutable_loss_based_bwe_updates(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >*
EventStream::mutable_loss_based_bwe_updates() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return &loss_based_bwe_updates_;
}
inline const ::webrtc::rtclog2::LossBasedBweUpdates& EventStream::loss_based_bwe_updates(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_.Get(index);
}
inline ::webrtc::rtclog2::LossBasedBweUpdates* EventStream::add_loss_based_bwe_updates() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::LossBasedBweUpdates >&
EventStream::loss_based_bwe_updates() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.loss_based_bwe_updates)
  return loss_based_bwe_updates_;
}

// repeated .webrtc.rtclog2.DelayBasedBweUpdates delay_based_bwe_updates = 19;
inline int EventStream::delay_based_bwe_updates_size() const {
  return delay_based_bwe_updates_.size();
}
inline void EventStream::clear_delay_based_bwe_updates() {
  delay_based_bwe_updates_.Clear();
}
inline ::webrtc::rtclog2::DelayBasedBweUpdates* EventStream::mutable_delay_based_bwe_updates(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >*
EventStream::mutable_delay_based_bwe_updates() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return &delay_based_bwe_updates_;
}
inline const ::webrtc::rtclog2::DelayBasedBweUpdates& EventStream::delay_based_bwe_updates(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_.Get(index);
}
inline ::webrtc::rtclog2::DelayBasedBweUpdates* EventStream::add_delay_based_bwe_updates() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::DelayBasedBweUpdates >&
EventStream::delay_based_bwe_updates() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.delay_based_bwe_updates)
  return delay_based_bwe_updates_;
}

// repeated .webrtc.rtclog2.AudioNetworkAdaptations audio_network_adaptations = 20;
inline int EventStream::audio_network_adaptations_size() const {
  return audio_network_adaptations_.size();
}
inline void EventStream::clear_audio_network_adaptations() {
  audio_network_adaptations_.Clear();
}
inline ::webrtc::rtclog2::AudioNetworkAdaptations* EventStream::mutable_audio_network_adaptations(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >*
EventStream::mutable_audio_network_adaptations() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return &audio_network_adaptations_;
}
inline const ::webrtc::rtclog2::AudioNetworkAdaptations& EventStream::audio_network_adaptations(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_.Get(index);
}
inline ::webrtc::rtclog2::AudioNetworkAdaptations* EventStream::add_audio_network_adaptations() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioNetworkAdaptations >&
EventStream::audio_network_adaptations() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_network_adaptations)
  return audio_network_adaptations_;
}

// repeated .webrtc.rtclog2.BweProbeCluster probe_clusters = 21;
inline int EventStream::probe_clusters_size() const {
  return probe_clusters_.size();
}
inline void EventStream::clear_probe_clusters() {
  probe_clusters_.Clear();
}
inline ::webrtc::rtclog2::BweProbeCluster* EventStream::mutable_probe_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >*
EventStream::mutable_probe_clusters() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.probe_clusters)
  return &probe_clusters_;
}
inline const ::webrtc::rtclog2::BweProbeCluster& EventStream::probe_clusters(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_.Get(index);
}
inline ::webrtc::rtclog2::BweProbeCluster* EventStream::add_probe_clusters() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeCluster >&
EventStream::probe_clusters() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.probe_clusters)
  return probe_clusters_;
}

// repeated .webrtc.rtclog2.BweProbeResultSuccess probe_success = 22;
inline int EventStream::probe_success_size() const {
  return probe_success_.size();
}
inline void EventStream::clear_probe_success() {
  probe_success_.Clear();
}
inline ::webrtc::rtclog2::BweProbeResultSuccess* EventStream::mutable_probe_success(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >*
EventStream::mutable_probe_success() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.probe_success)
  return &probe_success_;
}
inline const ::webrtc::rtclog2::BweProbeResultSuccess& EventStream::probe_success(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_.Get(index);
}
inline ::webrtc::rtclog2::BweProbeResultSuccess* EventStream::add_probe_success() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultSuccess >&
EventStream::probe_success() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.probe_success)
  return probe_success_;
}

// repeated .webrtc.rtclog2.BweProbeResultFailure probe_failure = 23;
inline int EventStream::probe_failure_size() const {
  return probe_failure_.size();
}
inline void EventStream::clear_probe_failure() {
  probe_failure_.Clear();
}
inline ::webrtc::rtclog2::BweProbeResultFailure* EventStream::mutable_probe_failure(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >*
EventStream::mutable_probe_failure() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.probe_failure)
  return &probe_failure_;
}
inline const ::webrtc::rtclog2::BweProbeResultFailure& EventStream::probe_failure(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_.Get(index);
}
inline ::webrtc::rtclog2::BweProbeResultFailure* EventStream::add_probe_failure() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::BweProbeResultFailure >&
EventStream::probe_failure() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.probe_failure)
  return probe_failure_;
}

// repeated .webrtc.rtclog2.AlrState alr_states = 24;
inline int EventStream::alr_states_size() const {
  return alr_states_.size();
}
inline void EventStream::clear_alr_states() {
  alr_states_.Clear();
}
inline ::webrtc::rtclog2::AlrState* EventStream::mutable_alr_states(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.alr_states)
  return alr_states_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AlrState >*
EventStream::mutable_alr_states() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.alr_states)
  return &alr_states_;
}
inline const ::webrtc::rtclog2::AlrState& EventStream::alr_states(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.alr_states)
  return alr_states_.Get(index);
}
inline ::webrtc::rtclog2::AlrState* EventStream::add_alr_states() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.alr_states)
  return alr_states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AlrState >&
EventStream::alr_states() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.alr_states)
  return alr_states_;
}

// repeated .webrtc.rtclog2.IceCandidatePairConfig ice_candidate_configs = 25;
inline int EventStream::ice_candidate_configs_size() const {
  return ice_candidate_configs_.size();
}
inline void EventStream::clear_ice_candidate_configs() {
  ice_candidate_configs_.Clear();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig* EventStream::mutable_ice_candidate_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return ice_candidate_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig >*
EventStream::mutable_ice_candidate_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return &ice_candidate_configs_;
}
inline const ::webrtc::rtclog2::IceCandidatePairConfig& EventStream::ice_candidate_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return ice_candidate_configs_.Get(index);
}
inline ::webrtc::rtclog2::IceCandidatePairConfig* EventStream::add_ice_candidate_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return ice_candidate_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairConfig >&
EventStream::ice_candidate_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.ice_candidate_configs)
  return ice_candidate_configs_;
}

// repeated .webrtc.rtclog2.IceCandidatePairEvent ice_candidate_events = 26;
inline int EventStream::ice_candidate_events_size() const {
  return ice_candidate_events_.size();
}
inline void EventStream::clear_ice_candidate_events() {
  ice_candidate_events_.Clear();
}
inline ::webrtc::rtclog2::IceCandidatePairEvent* EventStream::mutable_ice_candidate_events(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.ice_candidate_events)
  return ice_candidate_events_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent >*
EventStream::mutable_ice_candidate_events() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.ice_candidate_events)
  return &ice_candidate_events_;
}
inline const ::webrtc::rtclog2::IceCandidatePairEvent& EventStream::ice_candidate_events(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.ice_candidate_events)
  return ice_candidate_events_.Get(index);
}
inline ::webrtc::rtclog2::IceCandidatePairEvent* EventStream::add_ice_candidate_events() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.ice_candidate_events)
  return ice_candidate_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::IceCandidatePairEvent >&
EventStream::ice_candidate_events() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.ice_candidate_events)
  return ice_candidate_events_;
}

// repeated .webrtc.rtclog2.AudioRecvStreamConfig audio_recv_stream_configs = 101;
inline int EventStream::audio_recv_stream_configs_size() const {
  return audio_recv_stream_configs_.size();
}
inline void EventStream::clear_audio_recv_stream_configs() {
  audio_recv_stream_configs_.Clear();
}
inline ::webrtc::rtclog2::AudioRecvStreamConfig* EventStream::mutable_audio_recv_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >*
EventStream::mutable_audio_recv_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return &audio_recv_stream_configs_;
}
inline const ::webrtc::rtclog2::AudioRecvStreamConfig& EventStream::audio_recv_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_.Get(index);
}
inline ::webrtc::rtclog2::AudioRecvStreamConfig* EventStream::add_audio_recv_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioRecvStreamConfig >&
EventStream::audio_recv_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_recv_stream_configs)
  return audio_recv_stream_configs_;
}

// repeated .webrtc.rtclog2.AudioSendStreamConfig audio_send_stream_configs = 102;
inline int EventStream::audio_send_stream_configs_size() const {
  return audio_send_stream_configs_.size();
}
inline void EventStream::clear_audio_send_stream_configs() {
  audio_send_stream_configs_.Clear();
}
inline ::webrtc::rtclog2::AudioSendStreamConfig* EventStream::mutable_audio_send_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >*
EventStream::mutable_audio_send_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return &audio_send_stream_configs_;
}
inline const ::webrtc::rtclog2::AudioSendStreamConfig& EventStream::audio_send_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_.Get(index);
}
inline ::webrtc::rtclog2::AudioSendStreamConfig* EventStream::add_audio_send_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::AudioSendStreamConfig >&
EventStream::audio_send_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.audio_send_stream_configs)
  return audio_send_stream_configs_;
}

// repeated .webrtc.rtclog2.VideoRecvStreamConfig video_recv_stream_configs = 103;
inline int EventStream::video_recv_stream_configs_size() const {
  return video_recv_stream_configs_.size();
}
inline void EventStream::clear_video_recv_stream_configs() {
  video_recv_stream_configs_.Clear();
}
inline ::webrtc::rtclog2::VideoRecvStreamConfig* EventStream::mutable_video_recv_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >*
EventStream::mutable_video_recv_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return &video_recv_stream_configs_;
}
inline const ::webrtc::rtclog2::VideoRecvStreamConfig& EventStream::video_recv_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_.Get(index);
}
inline ::webrtc::rtclog2::VideoRecvStreamConfig* EventStream::add_video_recv_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoRecvStreamConfig >&
EventStream::video_recv_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.video_recv_stream_configs)
  return video_recv_stream_configs_;
}

// repeated .webrtc.rtclog2.VideoSendStreamConfig video_send_stream_configs = 104;
inline int EventStream::video_send_stream_configs_size() const {
  return video_send_stream_configs_.size();
}
inline void EventStream::clear_video_send_stream_configs() {
  video_send_stream_configs_.Clear();
}
inline ::webrtc::rtclog2::VideoSendStreamConfig* EventStream::mutable_video_send_stream_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >*
EventStream::mutable_video_send_stream_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return &video_send_stream_configs_;
}
inline const ::webrtc::rtclog2::VideoSendStreamConfig& EventStream::video_send_stream_configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_.Get(index);
}
inline ::webrtc::rtclog2::VideoSendStreamConfig* EventStream::add_video_send_stream_configs() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog2::VideoSendStreamConfig >&
EventStream::video_send_stream_configs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog2.EventStream.video_send_stream_configs)
  return video_send_stream_configs_;
}

// -------------------------------------------------------------------

// Event

// -------------------------------------------------------------------

// IncomingRtpPackets

// optional int64 timestamp_ms = 1;
inline bool IncomingRtpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void IncomingRtpPackets::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00008000u;
}
inline void IncomingRtpPackets::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void IncomingRtpPackets::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 IncomingRtpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms)
  return timestamp_ms_;
}
inline void IncomingRtpPackets::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms)
}

// optional bool marker = 2;
inline bool IncomingRtpPackets::has_marker() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void IncomingRtpPackets::set_has_marker() {
  _has_bits_[0] |= 0x01000000u;
}
inline void IncomingRtpPackets::clear_has_marker() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void IncomingRtpPackets::clear_marker() {
  marker_ = false;
  clear_has_marker();
}
inline bool IncomingRtpPackets::marker() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.marker)
  return marker_;
}
inline void IncomingRtpPackets::set_marker(bool value) {
  set_has_marker();
  marker_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.marker)
}

// optional uint32 payload_type = 3;
inline bool IncomingRtpPackets::has_payload_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void IncomingRtpPackets::set_has_payload_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void IncomingRtpPackets::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void IncomingRtpPackets::clear_payload_type() {
  payload_type_ = 0u;
  clear_has_payload_type();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_type)
  return payload_type_;
}
inline void IncomingRtpPackets::set_payload_type(::google::protobuf::uint32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_type)
}

// optional uint32 sequence_number = 4;
inline bool IncomingRtpPackets::has_sequence_number() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void IncomingRtpPackets::set_has_sequence_number() {
  _has_bits_[0] |= 0x00020000u;
}
inline void IncomingRtpPackets::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void IncomingRtpPackets::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.sequence_number)
  return sequence_number_;
}
inline void IncomingRtpPackets::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.sequence_number)
}

// optional fixed32 rtp_timestamp = 5;
inline bool IncomingRtpPackets::has_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void IncomingRtpPackets::set_has_rtp_timestamp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void IncomingRtpPackets::clear_has_rtp_timestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void IncomingRtpPackets::clear_rtp_timestamp() {
  rtp_timestamp_ = 0u;
  clear_has_rtp_timestamp();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp)
  return rtp_timestamp_;
}
inline void IncomingRtpPackets::set_rtp_timestamp(::google::protobuf::uint32 value) {
  set_has_rtp_timestamp();
  rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp)
}

// optional fixed32 ssrc = 6;
inline bool IncomingRtpPackets::has_ssrc() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void IncomingRtpPackets::set_has_ssrc() {
  _has_bits_[0] |= 0x00080000u;
}
inline void IncomingRtpPackets::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void IncomingRtpPackets::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.ssrc)
  return ssrc_;
}
inline void IncomingRtpPackets::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.ssrc)
}

// optional uint32 payload_size = 8;
inline bool IncomingRtpPackets::has_payload_size() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void IncomingRtpPackets::set_has_payload_size() {
  _has_bits_[0] |= 0x00100000u;
}
inline void IncomingRtpPackets::clear_has_payload_size() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void IncomingRtpPackets::clear_payload_size() {
  payload_size_ = 0u;
  clear_has_payload_size();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::payload_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_size)
  return payload_size_;
}
inline void IncomingRtpPackets::set_payload_size(::google::protobuf::uint32 value) {
  set_has_payload_size();
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_size)
}

// optional uint32 header_size = 9;
inline bool IncomingRtpPackets::has_header_size() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void IncomingRtpPackets::set_has_header_size() {
  _has_bits_[0] |= 0x00200000u;
}
inline void IncomingRtpPackets::clear_has_header_size() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void IncomingRtpPackets::clear_header_size() {
  header_size_ = 0u;
  clear_has_header_size();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::header_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.header_size)
  return header_size_;
}
inline void IncomingRtpPackets::set_header_size(::google::protobuf::uint32 value) {
  set_has_header_size();
  header_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.header_size)
}

// optional uint32 padding_size = 10;
inline bool IncomingRtpPackets::has_padding_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void IncomingRtpPackets::set_has_padding_size() {
  _has_bits_[0] |= 0x00400000u;
}
inline void IncomingRtpPackets::clear_has_padding_size() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void IncomingRtpPackets::clear_padding_size() {
  padding_size_ = 0u;
  clear_has_padding_size();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::padding_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.padding_size)
  return padding_size_;
}
inline void IncomingRtpPackets::set_padding_size(::google::protobuf::uint32 value) {
  set_has_padding_size();
  padding_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.padding_size)
}

// optional uint32 number_of_deltas = 11;
inline bool IncomingRtpPackets::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void IncomingRtpPackets::set_has_number_of_deltas() {
  _has_bits_[0] |= 0x00800000u;
}
inline void IncomingRtpPackets::clear_has_number_of_deltas() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void IncomingRtpPackets::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  clear_has_number_of_deltas();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.number_of_deltas)
  return number_of_deltas_;
}
inline void IncomingRtpPackets::set_number_of_deltas(::google::protobuf::uint32 value) {
  set_has_number_of_deltas();
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.number_of_deltas)
}

// optional uint32 transport_sequence_number = 15;
inline bool IncomingRtpPackets::has_transport_sequence_number() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void IncomingRtpPackets::set_has_transport_sequence_number() {
  _has_bits_[0] |= 0x04000000u;
}
inline void IncomingRtpPackets::clear_has_transport_sequence_number() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void IncomingRtpPackets::clear_transport_sequence_number() {
  transport_sequence_number_ = 0u;
  clear_has_transport_sequence_number();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::transport_sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number)
  return transport_sequence_number_;
}
inline void IncomingRtpPackets::set_transport_sequence_number(::google::protobuf::uint32 value) {
  set_has_transport_sequence_number();
  transport_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number)
}

// optional int32 transmission_time_offset = 16;
inline bool IncomingRtpPackets::has_transmission_time_offset() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void IncomingRtpPackets::set_has_transmission_time_offset() {
  _has_bits_[0] |= 0x08000000u;
}
inline void IncomingRtpPackets::clear_has_transmission_time_offset() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void IncomingRtpPackets::clear_transmission_time_offset() {
  transmission_time_offset_ = 0;
  clear_has_transmission_time_offset();
}
inline ::google::protobuf::int32 IncomingRtpPackets::transmission_time_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset)
  return transmission_time_offset_;
}
inline void IncomingRtpPackets::set_transmission_time_offset(::google::protobuf::int32 value) {
  set_has_transmission_time_offset();
  transmission_time_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset)
}

// optional uint32 absolute_send_time = 17;
inline bool IncomingRtpPackets::has_absolute_send_time() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void IncomingRtpPackets::set_has_absolute_send_time() {
  _has_bits_[0] |= 0x10000000u;
}
inline void IncomingRtpPackets::clear_has_absolute_send_time() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void IncomingRtpPackets::clear_absolute_send_time() {
  absolute_send_time_ = 0u;
  clear_has_absolute_send_time();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::absolute_send_time() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time)
  return absolute_send_time_;
}
inline void IncomingRtpPackets::set_absolute_send_time(::google::protobuf::uint32 value) {
  set_has_absolute_send_time();
  absolute_send_time_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time)
}

// optional uint32 video_rotation = 18;
inline bool IncomingRtpPackets::has_video_rotation() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void IncomingRtpPackets::set_has_video_rotation() {
  _has_bits_[0] |= 0x20000000u;
}
inline void IncomingRtpPackets::clear_has_video_rotation() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void IncomingRtpPackets::clear_video_rotation() {
  video_rotation_ = 0u;
  clear_has_video_rotation();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::video_rotation() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.video_rotation)
  return video_rotation_;
}
inline void IncomingRtpPackets::set_video_rotation(::google::protobuf::uint32 value) {
  set_has_video_rotation();
  video_rotation_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.video_rotation)
}

// optional uint32 audio_level = 19;
inline bool IncomingRtpPackets::has_audio_level() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void IncomingRtpPackets::set_has_audio_level() {
  _has_bits_[0] |= 0x40000000u;
}
inline void IncomingRtpPackets::clear_has_audio_level() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void IncomingRtpPackets::clear_audio_level() {
  audio_level_ = 0u;
  clear_has_audio_level();
}
inline ::google::protobuf::uint32 IncomingRtpPackets::audio_level() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.audio_level)
  return audio_level_;
}
inline void IncomingRtpPackets::set_audio_level(::google::protobuf::uint32 value) {
  set_has_audio_level();
  audio_level_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.audio_level)
}

// optional bool voice_activity = 20;
inline bool IncomingRtpPackets::has_voice_activity() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void IncomingRtpPackets::set_has_voice_activity() {
  _has_bits_[0] |= 0x02000000u;
}
inline void IncomingRtpPackets::clear_has_voice_activity() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void IncomingRtpPackets::clear_voice_activity() {
  voice_activity_ = false;
  clear_has_voice_activity();
}
inline bool IncomingRtpPackets::voice_activity() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.voice_activity)
  return voice_activity_;
}
inline void IncomingRtpPackets::set_voice_activity(bool value) {
  set_has_voice_activity();
  voice_activity_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.voice_activity)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool IncomingRtpPackets::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncomingRtpPackets::set_has_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IncomingRtpPackets::clear_has_timestamp_ms_deltas() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IncomingRtpPackets::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_ms_deltas();
}
inline const ::std::string& IncomingRtpPackets::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_timestamp_ms_deltas(const ::std::string& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_timestamp_ms_deltas(::std::string&& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}
#endif
inline void IncomingRtpPackets::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}
inline void IncomingRtpPackets::set_timestamp_ms_deltas(const void* value, size_t size) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_timestamp_ms_deltas() {
  set_has_timestamp_ms_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return NULL;
  }
  clear_has_timestamp_ms_deltas();
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != NULL) {
    set_has_timestamp_ms_deltas();
  } else {
    clear_has_timestamp_ms_deltas();
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.timestamp_ms_deltas)
}

// optional bytes marker_deltas = 102;
inline bool IncomingRtpPackets::has_marker_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncomingRtpPackets::set_has_marker_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IncomingRtpPackets::clear_has_marker_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IncomingRtpPackets::clear_marker_deltas() {
  marker_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_marker_deltas();
}
inline const ::std::string& IncomingRtpPackets::marker_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
  return marker_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_marker_deltas(const ::std::string& value) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_marker_deltas(::std::string&& value) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
#endif
inline void IncomingRtpPackets::set_marker_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
inline void IncomingRtpPackets::set_marker_deltas(const void* value, size_t size) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_marker_deltas() {
  set_has_marker_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
  return marker_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_marker_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
  if (!has_marker_deltas()) {
    return NULL;
  }
  clear_has_marker_deltas();
  return marker_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_marker_deltas(::std::string* marker_deltas) {
  if (marker_deltas != NULL) {
    set_has_marker_deltas();
  } else {
    clear_has_marker_deltas();
  }
  marker_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marker_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.marker_deltas)
}

// optional bytes payload_type_deltas = 103;
inline bool IncomingRtpPackets::has_payload_type_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IncomingRtpPackets::set_has_payload_type_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IncomingRtpPackets::clear_has_payload_type_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IncomingRtpPackets::clear_payload_type_deltas() {
  payload_type_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_type_deltas();
}
inline const ::std::string& IncomingRtpPackets::payload_type_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_payload_type_deltas(const ::std::string& value) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_payload_type_deltas(::std::string&& value) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
#endif
inline void IncomingRtpPackets::set_payload_type_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
inline void IncomingRtpPackets::set_payload_type_deltas(const void* value, size_t size) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_payload_type_deltas() {
  set_has_payload_type_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_payload_type_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
  if (!has_payload_type_deltas()) {
    return NULL;
  }
  clear_has_payload_type_deltas();
  return payload_type_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_payload_type_deltas(::std::string* payload_type_deltas) {
  if (payload_type_deltas != NULL) {
    set_has_payload_type_deltas();
  } else {
    clear_has_payload_type_deltas();
  }
  payload_type_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_type_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.payload_type_deltas)
}

// optional bytes sequence_number_deltas = 104;
inline bool IncomingRtpPackets::has_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IncomingRtpPackets::set_has_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IncomingRtpPackets::clear_has_sequence_number_deltas() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IncomingRtpPackets::clear_sequence_number_deltas() {
  sequence_number_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_number_deltas();
}
inline const ::std::string& IncomingRtpPackets::sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_sequence_number_deltas(const ::std::string& value) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_sequence_number_deltas(::std::string&& value) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
#endif
inline void IncomingRtpPackets::set_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
inline void IncomingRtpPackets::set_sequence_number_deltas(const void* value, size_t size) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_sequence_number_deltas() {
  set_has_sequence_number_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
  if (!has_sequence_number_deltas()) {
    return NULL;
  }
  clear_has_sequence_number_deltas();
  return sequence_number_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_sequence_number_deltas(::std::string* sequence_number_deltas) {
  if (sequence_number_deltas != NULL) {
    set_has_sequence_number_deltas();
  } else {
    clear_has_sequence_number_deltas();
  }
  sequence_number_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.sequence_number_deltas)
}

// optional bytes rtp_timestamp_deltas = 105;
inline bool IncomingRtpPackets::has_rtp_timestamp_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IncomingRtpPackets::set_has_rtp_timestamp_deltas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IncomingRtpPackets::clear_has_rtp_timestamp_deltas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IncomingRtpPackets::clear_rtp_timestamp_deltas() {
  rtp_timestamp_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rtp_timestamp_deltas();
}
inline const ::std::string& IncomingRtpPackets::rtp_timestamp_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_rtp_timestamp_deltas(const ::std::string& value) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_rtp_timestamp_deltas(::std::string&& value) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
#endif
inline void IncomingRtpPackets::set_rtp_timestamp_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
inline void IncomingRtpPackets::set_rtp_timestamp_deltas(const void* value, size_t size) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_rtp_timestamp_deltas() {
  set_has_rtp_timestamp_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_rtp_timestamp_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
  if (!has_rtp_timestamp_deltas()) {
    return NULL;
  }
  clear_has_rtp_timestamp_deltas();
  return rtp_timestamp_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_rtp_timestamp_deltas(::std::string* rtp_timestamp_deltas) {
  if (rtp_timestamp_deltas != NULL) {
    set_has_rtp_timestamp_deltas();
  } else {
    clear_has_rtp_timestamp_deltas();
  }
  rtp_timestamp_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtp_timestamp_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.rtp_timestamp_deltas)
}

// optional bytes ssrc_deltas = 106;
inline bool IncomingRtpPackets::has_ssrc_deltas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IncomingRtpPackets::set_has_ssrc_deltas() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IncomingRtpPackets::clear_has_ssrc_deltas() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IncomingRtpPackets::clear_ssrc_deltas() {
  ssrc_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ssrc_deltas();
}
inline const ::std::string& IncomingRtpPackets::ssrc_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_ssrc_deltas(const ::std::string& value) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_ssrc_deltas(::std::string&& value) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
#endif
inline void IncomingRtpPackets::set_ssrc_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
inline void IncomingRtpPackets::set_ssrc_deltas(const void* value, size_t size) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_ssrc_deltas() {
  set_has_ssrc_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_ssrc_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
  if (!has_ssrc_deltas()) {
    return NULL;
  }
  clear_has_ssrc_deltas();
  return ssrc_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_ssrc_deltas(::std::string* ssrc_deltas) {
  if (ssrc_deltas != NULL) {
    set_has_ssrc_deltas();
  } else {
    clear_has_ssrc_deltas();
  }
  ssrc_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssrc_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.ssrc_deltas)
}

// optional bytes payload_size_deltas = 108;
inline bool IncomingRtpPackets::has_payload_size_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IncomingRtpPackets::set_has_payload_size_deltas() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IncomingRtpPackets::clear_has_payload_size_deltas() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IncomingRtpPackets::clear_payload_size_deltas() {
  payload_size_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_size_deltas();
}
inline const ::std::string& IncomingRtpPackets::payload_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
  return payload_size_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_payload_size_deltas(const ::std::string& value) {
  set_has_payload_size_deltas();
  payload_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_payload_size_deltas(::std::string&& value) {
  set_has_payload_size_deltas();
  payload_size_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}
#endif
inline void IncomingRtpPackets::set_payload_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_size_deltas();
  payload_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}
inline void IncomingRtpPackets::set_payload_size_deltas(const void* value, size_t size) {
  set_has_payload_size_deltas();
  payload_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_payload_size_deltas() {
  set_has_payload_size_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
  return payload_size_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_payload_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
  if (!has_payload_size_deltas()) {
    return NULL;
  }
  clear_has_payload_size_deltas();
  return payload_size_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_payload_size_deltas(::std::string* payload_size_deltas) {
  if (payload_size_deltas != NULL) {
    set_has_payload_size_deltas();
  } else {
    clear_has_payload_size_deltas();
  }
  payload_size_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.payload_size_deltas)
}

// optional bytes header_size_deltas = 109;
inline bool IncomingRtpPackets::has_header_size_deltas() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IncomingRtpPackets::set_has_header_size_deltas() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IncomingRtpPackets::clear_has_header_size_deltas() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IncomingRtpPackets::clear_header_size_deltas() {
  header_size_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_size_deltas();
}
inline const ::std::string& IncomingRtpPackets::header_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
  return header_size_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_header_size_deltas(const ::std::string& value) {
  set_has_header_size_deltas();
  header_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_header_size_deltas(::std::string&& value) {
  set_has_header_size_deltas();
  header_size_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}
#endif
inline void IncomingRtpPackets::set_header_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header_size_deltas();
  header_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}
inline void IncomingRtpPackets::set_header_size_deltas(const void* value, size_t size) {
  set_has_header_size_deltas();
  header_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_header_size_deltas() {
  set_has_header_size_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
  return header_size_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_header_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
  if (!has_header_size_deltas()) {
    return NULL;
  }
  clear_has_header_size_deltas();
  return header_size_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_header_size_deltas(::std::string* header_size_deltas) {
  if (header_size_deltas != NULL) {
    set_has_header_size_deltas();
  } else {
    clear_has_header_size_deltas();
  }
  header_size_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.header_size_deltas)
}

// optional bytes padding_size_deltas = 110;
inline bool IncomingRtpPackets::has_padding_size_deltas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IncomingRtpPackets::set_has_padding_size_deltas() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IncomingRtpPackets::clear_has_padding_size_deltas() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IncomingRtpPackets::clear_padding_size_deltas() {
  padding_size_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_padding_size_deltas();
}
inline const ::std::string& IncomingRtpPackets::padding_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
  return padding_size_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_padding_size_deltas(const ::std::string& value) {
  set_has_padding_size_deltas();
  padding_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_padding_size_deltas(::std::string&& value) {
  set_has_padding_size_deltas();
  padding_size_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}
#endif
inline void IncomingRtpPackets::set_padding_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_padding_size_deltas();
  padding_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}
inline void IncomingRtpPackets::set_padding_size_deltas(const void* value, size_t size) {
  set_has_padding_size_deltas();
  padding_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_padding_size_deltas() {
  set_has_padding_size_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
  return padding_size_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_padding_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
  if (!has_padding_size_deltas()) {
    return NULL;
  }
  clear_has_padding_size_deltas();
  return padding_size_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_padding_size_deltas(::std::string* padding_size_deltas) {
  if (padding_size_deltas != NULL) {
    set_has_padding_size_deltas();
  } else {
    clear_has_padding_size_deltas();
  }
  padding_size_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), padding_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.padding_size_deltas)
}

// optional bytes transport_sequence_number_deltas = 115;
inline bool IncomingRtpPackets::has_transport_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IncomingRtpPackets::set_has_transport_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IncomingRtpPackets::clear_has_transport_sequence_number_deltas() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IncomingRtpPackets::clear_transport_sequence_number_deltas() {
  transport_sequence_number_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transport_sequence_number_deltas();
}
inline const ::std::string& IncomingRtpPackets::transport_sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_transport_sequence_number_deltas(const ::std::string& value) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_transport_sequence_number_deltas(::std::string&& value) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
#endif
inline void IncomingRtpPackets::set_transport_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
inline void IncomingRtpPackets::set_transport_sequence_number_deltas(const void* value, size_t size) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_transport_sequence_number_deltas() {
  set_has_transport_sequence_number_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_transport_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
  if (!has_transport_sequence_number_deltas()) {
    return NULL;
  }
  clear_has_transport_sequence_number_deltas();
  return transport_sequence_number_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_transport_sequence_number_deltas(::std::string* transport_sequence_number_deltas) {
  if (transport_sequence_number_deltas != NULL) {
    set_has_transport_sequence_number_deltas();
  } else {
    clear_has_transport_sequence_number_deltas();
  }
  transport_sequence_number_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transport_sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.transport_sequence_number_deltas)
}

// optional bytes transmission_time_offset_deltas = 116;
inline bool IncomingRtpPackets::has_transmission_time_offset_deltas() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IncomingRtpPackets::set_has_transmission_time_offset_deltas() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IncomingRtpPackets::clear_has_transmission_time_offset_deltas() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IncomingRtpPackets::clear_transmission_time_offset_deltas() {
  transmission_time_offset_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transmission_time_offset_deltas();
}
inline const ::std::string& IncomingRtpPackets::transmission_time_offset_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_transmission_time_offset_deltas(const ::std::string& value) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_transmission_time_offset_deltas(::std::string&& value) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
#endif
inline void IncomingRtpPackets::set_transmission_time_offset_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
inline void IncomingRtpPackets::set_transmission_time_offset_deltas(const void* value, size_t size) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_transmission_time_offset_deltas() {
  set_has_transmission_time_offset_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_transmission_time_offset_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
  if (!has_transmission_time_offset_deltas()) {
    return NULL;
  }
  clear_has_transmission_time_offset_deltas();
  return transmission_time_offset_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_transmission_time_offset_deltas(::std::string* transmission_time_offset_deltas) {
  if (transmission_time_offset_deltas != NULL) {
    set_has_transmission_time_offset_deltas();
  } else {
    clear_has_transmission_time_offset_deltas();
  }
  transmission_time_offset_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transmission_time_offset_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.transmission_time_offset_deltas)
}

// optional bytes absolute_send_time_deltas = 117;
inline bool IncomingRtpPackets::has_absolute_send_time_deltas() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IncomingRtpPackets::set_has_absolute_send_time_deltas() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IncomingRtpPackets::clear_has_absolute_send_time_deltas() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IncomingRtpPackets::clear_absolute_send_time_deltas() {
  absolute_send_time_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_absolute_send_time_deltas();
}
inline const ::std::string& IncomingRtpPackets::absolute_send_time_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_absolute_send_time_deltas(const ::std::string& value) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_absolute_send_time_deltas(::std::string&& value) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
#endif
inline void IncomingRtpPackets::set_absolute_send_time_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
inline void IncomingRtpPackets::set_absolute_send_time_deltas(const void* value, size_t size) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_absolute_send_time_deltas() {
  set_has_absolute_send_time_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_absolute_send_time_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
  if (!has_absolute_send_time_deltas()) {
    return NULL;
  }
  clear_has_absolute_send_time_deltas();
  return absolute_send_time_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_absolute_send_time_deltas(::std::string* absolute_send_time_deltas) {
  if (absolute_send_time_deltas != NULL) {
    set_has_absolute_send_time_deltas();
  } else {
    clear_has_absolute_send_time_deltas();
  }
  absolute_send_time_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), absolute_send_time_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.absolute_send_time_deltas)
}

// optional bytes video_rotation_deltas = 118;
inline bool IncomingRtpPackets::has_video_rotation_deltas() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void IncomingRtpPackets::set_has_video_rotation_deltas() {
  _has_bits_[0] |= 0x00001000u;
}
inline void IncomingRtpPackets::clear_has_video_rotation_deltas() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void IncomingRtpPackets::clear_video_rotation_deltas() {
  video_rotation_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_rotation_deltas();
}
inline const ::std::string& IncomingRtpPackets::video_rotation_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
  return video_rotation_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_video_rotation_deltas(const ::std::string& value) {
  set_has_video_rotation_deltas();
  video_rotation_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_video_rotation_deltas(::std::string&& value) {
  set_has_video_rotation_deltas();
  video_rotation_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}
#endif
inline void IncomingRtpPackets::set_video_rotation_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_rotation_deltas();
  video_rotation_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}
inline void IncomingRtpPackets::set_video_rotation_deltas(const void* value, size_t size) {
  set_has_video_rotation_deltas();
  video_rotation_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_video_rotation_deltas() {
  set_has_video_rotation_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
  return video_rotation_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_video_rotation_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
  if (!has_video_rotation_deltas()) {
    return NULL;
  }
  clear_has_video_rotation_deltas();
  return video_rotation_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_video_rotation_deltas(::std::string* video_rotation_deltas) {
  if (video_rotation_deltas != NULL) {
    set_has_video_rotation_deltas();
  } else {
    clear_has_video_rotation_deltas();
  }
  video_rotation_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_rotation_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.video_rotation_deltas)
}

// optional bytes audio_level_deltas = 119;
inline bool IncomingRtpPackets::has_audio_level_deltas() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void IncomingRtpPackets::set_has_audio_level_deltas() {
  _has_bits_[0] |= 0x00002000u;
}
inline void IncomingRtpPackets::clear_has_audio_level_deltas() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void IncomingRtpPackets::clear_audio_level_deltas() {
  audio_level_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_level_deltas();
}
inline const ::std::string& IncomingRtpPackets::audio_level_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_audio_level_deltas(const ::std::string& value) {
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_audio_level_deltas(::std::string&& value) {
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
#endif
inline void IncomingRtpPackets::set_audio_level_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
inline void IncomingRtpPackets::set_audio_level_deltas(const void* value, size_t size) {
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_audio_level_deltas() {
  set_has_audio_level_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_audio_level_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
  if (!has_audio_level_deltas()) {
    return NULL;
  }
  clear_has_audio_level_deltas();
  return audio_level_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_audio_level_deltas(::std::string* audio_level_deltas) {
  if (audio_level_deltas != NULL) {
    set_has_audio_level_deltas();
  } else {
    clear_has_audio_level_deltas();
  }
  audio_level_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_level_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.audio_level_deltas)
}

// optional bytes voice_activity_deltas = 120;
inline bool IncomingRtpPackets::has_voice_activity_deltas() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void IncomingRtpPackets::set_has_voice_activity_deltas() {
  _has_bits_[0] |= 0x00004000u;
}
inline void IncomingRtpPackets::clear_has_voice_activity_deltas() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void IncomingRtpPackets::clear_voice_activity_deltas() {
  voice_activity_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voice_activity_deltas();
}
inline const ::std::string& IncomingRtpPackets::voice_activity_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
  return voice_activity_deltas_.GetNoArena();
}
inline void IncomingRtpPackets::set_voice_activity_deltas(const ::std::string& value) {
  set_has_voice_activity_deltas();
  voice_activity_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}
#if LANG_CXX11
inline void IncomingRtpPackets::set_voice_activity_deltas(::std::string&& value) {
  set_has_voice_activity_deltas();
  voice_activity_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}
#endif
inline void IncomingRtpPackets::set_voice_activity_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_voice_activity_deltas();
  voice_activity_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}
inline void IncomingRtpPackets::set_voice_activity_deltas(const void* value, size_t size) {
  set_has_voice_activity_deltas();
  voice_activity_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}
inline ::std::string* IncomingRtpPackets::mutable_voice_activity_deltas() {
  set_has_voice_activity_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
  return voice_activity_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtpPackets::release_voice_activity_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
  if (!has_voice_activity_deltas()) {
    return NULL;
  }
  clear_has_voice_activity_deltas();
  return voice_activity_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtpPackets::set_allocated_voice_activity_deltas(::std::string* voice_activity_deltas) {
  if (voice_activity_deltas != NULL) {
    set_has_voice_activity_deltas();
  } else {
    clear_has_voice_activity_deltas();
  }
  voice_activity_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voice_activity_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtpPackets.voice_activity_deltas)
}

// -------------------------------------------------------------------

// OutgoingRtpPackets

// optional int64 timestamp_ms = 1;
inline bool OutgoingRtpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OutgoingRtpPackets::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OutgoingRtpPackets::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OutgoingRtpPackets::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 OutgoingRtpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms)
  return timestamp_ms_;
}
inline void OutgoingRtpPackets::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms)
}

// optional bool marker = 2;
inline bool OutgoingRtpPackets::has_marker() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void OutgoingRtpPackets::set_has_marker() {
  _has_bits_[0] |= 0x01000000u;
}
inline void OutgoingRtpPackets::clear_has_marker() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void OutgoingRtpPackets::clear_marker() {
  marker_ = false;
  clear_has_marker();
}
inline bool OutgoingRtpPackets::marker() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.marker)
  return marker_;
}
inline void OutgoingRtpPackets::set_marker(bool value) {
  set_has_marker();
  marker_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.marker)
}

// optional uint32 payload_type = 3;
inline bool OutgoingRtpPackets::has_payload_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OutgoingRtpPackets::set_has_payload_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OutgoingRtpPackets::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OutgoingRtpPackets::clear_payload_type() {
  payload_type_ = 0u;
  clear_has_payload_type();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_type)
  return payload_type_;
}
inline void OutgoingRtpPackets::set_payload_type(::google::protobuf::uint32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_type)
}

// optional uint32 sequence_number = 4;
inline bool OutgoingRtpPackets::has_sequence_number() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OutgoingRtpPackets::set_has_sequence_number() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OutgoingRtpPackets::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OutgoingRtpPackets::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.sequence_number)
  return sequence_number_;
}
inline void OutgoingRtpPackets::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.sequence_number)
}

// optional fixed32 rtp_timestamp = 5;
inline bool OutgoingRtpPackets::has_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OutgoingRtpPackets::set_has_rtp_timestamp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OutgoingRtpPackets::clear_has_rtp_timestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OutgoingRtpPackets::clear_rtp_timestamp() {
  rtp_timestamp_ = 0u;
  clear_has_rtp_timestamp();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp)
  return rtp_timestamp_;
}
inline void OutgoingRtpPackets::set_rtp_timestamp(::google::protobuf::uint32 value) {
  set_has_rtp_timestamp();
  rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp)
}

// optional fixed32 ssrc = 6;
inline bool OutgoingRtpPackets::has_ssrc() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OutgoingRtpPackets::set_has_ssrc() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OutgoingRtpPackets::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OutgoingRtpPackets::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.ssrc)
  return ssrc_;
}
inline void OutgoingRtpPackets::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.ssrc)
}

// optional uint32 payload_size = 8;
inline bool OutgoingRtpPackets::has_payload_size() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OutgoingRtpPackets::set_has_payload_size() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OutgoingRtpPackets::clear_has_payload_size() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OutgoingRtpPackets::clear_payload_size() {
  payload_size_ = 0u;
  clear_has_payload_size();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::payload_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_size)
  return payload_size_;
}
inline void OutgoingRtpPackets::set_payload_size(::google::protobuf::uint32 value) {
  set_has_payload_size();
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_size)
}

// optional uint32 header_size = 9;
inline bool OutgoingRtpPackets::has_header_size() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OutgoingRtpPackets::set_has_header_size() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OutgoingRtpPackets::clear_has_header_size() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OutgoingRtpPackets::clear_header_size() {
  header_size_ = 0u;
  clear_has_header_size();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::header_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.header_size)
  return header_size_;
}
inline void OutgoingRtpPackets::set_header_size(::google::protobuf::uint32 value) {
  set_has_header_size();
  header_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.header_size)
}

// optional uint32 padding_size = 10;
inline bool OutgoingRtpPackets::has_padding_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void OutgoingRtpPackets::set_has_padding_size() {
  _has_bits_[0] |= 0x00400000u;
}
inline void OutgoingRtpPackets::clear_has_padding_size() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void OutgoingRtpPackets::clear_padding_size() {
  padding_size_ = 0u;
  clear_has_padding_size();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::padding_size() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.padding_size)
  return padding_size_;
}
inline void OutgoingRtpPackets::set_padding_size(::google::protobuf::uint32 value) {
  set_has_padding_size();
  padding_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.padding_size)
}

// optional uint32 number_of_deltas = 11;
inline bool OutgoingRtpPackets::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void OutgoingRtpPackets::set_has_number_of_deltas() {
  _has_bits_[0] |= 0x00800000u;
}
inline void OutgoingRtpPackets::clear_has_number_of_deltas() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void OutgoingRtpPackets::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  clear_has_number_of_deltas();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.number_of_deltas)
  return number_of_deltas_;
}
inline void OutgoingRtpPackets::set_number_of_deltas(::google::protobuf::uint32 value) {
  set_has_number_of_deltas();
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.number_of_deltas)
}

// optional uint32 transport_sequence_number = 15;
inline bool OutgoingRtpPackets::has_transport_sequence_number() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void OutgoingRtpPackets::set_has_transport_sequence_number() {
  _has_bits_[0] |= 0x04000000u;
}
inline void OutgoingRtpPackets::clear_has_transport_sequence_number() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void OutgoingRtpPackets::clear_transport_sequence_number() {
  transport_sequence_number_ = 0u;
  clear_has_transport_sequence_number();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::transport_sequence_number() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number)
  return transport_sequence_number_;
}
inline void OutgoingRtpPackets::set_transport_sequence_number(::google::protobuf::uint32 value) {
  set_has_transport_sequence_number();
  transport_sequence_number_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number)
}

// optional int32 transmission_time_offset = 16;
inline bool OutgoingRtpPackets::has_transmission_time_offset() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void OutgoingRtpPackets::set_has_transmission_time_offset() {
  _has_bits_[0] |= 0x08000000u;
}
inline void OutgoingRtpPackets::clear_has_transmission_time_offset() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void OutgoingRtpPackets::clear_transmission_time_offset() {
  transmission_time_offset_ = 0;
  clear_has_transmission_time_offset();
}
inline ::google::protobuf::int32 OutgoingRtpPackets::transmission_time_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset)
  return transmission_time_offset_;
}
inline void OutgoingRtpPackets::set_transmission_time_offset(::google::protobuf::int32 value) {
  set_has_transmission_time_offset();
  transmission_time_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset)
}

// optional uint32 absolute_send_time = 17;
inline bool OutgoingRtpPackets::has_absolute_send_time() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void OutgoingRtpPackets::set_has_absolute_send_time() {
  _has_bits_[0] |= 0x10000000u;
}
inline void OutgoingRtpPackets::clear_has_absolute_send_time() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void OutgoingRtpPackets::clear_absolute_send_time() {
  absolute_send_time_ = 0u;
  clear_has_absolute_send_time();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::absolute_send_time() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time)
  return absolute_send_time_;
}
inline void OutgoingRtpPackets::set_absolute_send_time(::google::protobuf::uint32 value) {
  set_has_absolute_send_time();
  absolute_send_time_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time)
}

// optional uint32 video_rotation = 18;
inline bool OutgoingRtpPackets::has_video_rotation() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void OutgoingRtpPackets::set_has_video_rotation() {
  _has_bits_[0] |= 0x20000000u;
}
inline void OutgoingRtpPackets::clear_has_video_rotation() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void OutgoingRtpPackets::clear_video_rotation() {
  video_rotation_ = 0u;
  clear_has_video_rotation();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::video_rotation() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.video_rotation)
  return video_rotation_;
}
inline void OutgoingRtpPackets::set_video_rotation(::google::protobuf::uint32 value) {
  set_has_video_rotation();
  video_rotation_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.video_rotation)
}

// optional uint32 audio_level = 19;
inline bool OutgoingRtpPackets::has_audio_level() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void OutgoingRtpPackets::set_has_audio_level() {
  _has_bits_[0] |= 0x40000000u;
}
inline void OutgoingRtpPackets::clear_has_audio_level() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void OutgoingRtpPackets::clear_audio_level() {
  audio_level_ = 0u;
  clear_has_audio_level();
}
inline ::google::protobuf::uint32 OutgoingRtpPackets::audio_level() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.audio_level)
  return audio_level_;
}
inline void OutgoingRtpPackets::set_audio_level(::google::protobuf::uint32 value) {
  set_has_audio_level();
  audio_level_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.audio_level)
}

// optional bool voice_activity = 20;
inline bool OutgoingRtpPackets::has_voice_activity() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void OutgoingRtpPackets::set_has_voice_activity() {
  _has_bits_[0] |= 0x02000000u;
}
inline void OutgoingRtpPackets::clear_has_voice_activity() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void OutgoingRtpPackets::clear_voice_activity() {
  voice_activity_ = false;
  clear_has_voice_activity();
}
inline bool OutgoingRtpPackets::voice_activity() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.voice_activity)
  return voice_activity_;
}
inline void OutgoingRtpPackets::set_voice_activity(bool value) {
  set_has_voice_activity();
  voice_activity_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.voice_activity)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool OutgoingRtpPackets::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutgoingRtpPackets::set_has_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutgoingRtpPackets::clear_has_timestamp_ms_deltas() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutgoingRtpPackets::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_ms_deltas();
}
inline const ::std::string& OutgoingRtpPackets::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_timestamp_ms_deltas(const ::std::string& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_timestamp_ms_deltas(::std::string&& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}
#endif
inline void OutgoingRtpPackets::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}
inline void OutgoingRtpPackets::set_timestamp_ms_deltas(const void* value, size_t size) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_timestamp_ms_deltas() {
  set_has_timestamp_ms_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return NULL;
  }
  clear_has_timestamp_ms_deltas();
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != NULL) {
    set_has_timestamp_ms_deltas();
  } else {
    clear_has_timestamp_ms_deltas();
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.timestamp_ms_deltas)
}

// optional bytes marker_deltas = 102;
inline bool OutgoingRtpPackets::has_marker_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutgoingRtpPackets::set_has_marker_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutgoingRtpPackets::clear_has_marker_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutgoingRtpPackets::clear_marker_deltas() {
  marker_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_marker_deltas();
}
inline const ::std::string& OutgoingRtpPackets::marker_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
  return marker_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_marker_deltas(const ::std::string& value) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_marker_deltas(::std::string&& value) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
#endif
inline void OutgoingRtpPackets::set_marker_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
inline void OutgoingRtpPackets::set_marker_deltas(const void* value, size_t size) {
  set_has_marker_deltas();
  marker_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_marker_deltas() {
  set_has_marker_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
  return marker_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_marker_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
  if (!has_marker_deltas()) {
    return NULL;
  }
  clear_has_marker_deltas();
  return marker_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_marker_deltas(::std::string* marker_deltas) {
  if (marker_deltas != NULL) {
    set_has_marker_deltas();
  } else {
    clear_has_marker_deltas();
  }
  marker_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marker_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.marker_deltas)
}

// optional bytes payload_type_deltas = 103;
inline bool OutgoingRtpPackets::has_payload_type_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutgoingRtpPackets::set_has_payload_type_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OutgoingRtpPackets::clear_has_payload_type_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OutgoingRtpPackets::clear_payload_type_deltas() {
  payload_type_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_type_deltas();
}
inline const ::std::string& OutgoingRtpPackets::payload_type_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_payload_type_deltas(const ::std::string& value) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_payload_type_deltas(::std::string&& value) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
#endif
inline void OutgoingRtpPackets::set_payload_type_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
inline void OutgoingRtpPackets::set_payload_type_deltas(const void* value, size_t size) {
  set_has_payload_type_deltas();
  payload_type_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_payload_type_deltas() {
  set_has_payload_type_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
  return payload_type_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_payload_type_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
  if (!has_payload_type_deltas()) {
    return NULL;
  }
  clear_has_payload_type_deltas();
  return payload_type_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_payload_type_deltas(::std::string* payload_type_deltas) {
  if (payload_type_deltas != NULL) {
    set_has_payload_type_deltas();
  } else {
    clear_has_payload_type_deltas();
  }
  payload_type_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_type_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.payload_type_deltas)
}

// optional bytes sequence_number_deltas = 104;
inline bool OutgoingRtpPackets::has_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OutgoingRtpPackets::set_has_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OutgoingRtpPackets::clear_has_sequence_number_deltas() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OutgoingRtpPackets::clear_sequence_number_deltas() {
  sequence_number_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_number_deltas();
}
inline const ::std::string& OutgoingRtpPackets::sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_sequence_number_deltas(const ::std::string& value) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_sequence_number_deltas(::std::string&& value) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
#endif
inline void OutgoingRtpPackets::set_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
inline void OutgoingRtpPackets::set_sequence_number_deltas(const void* value, size_t size) {
  set_has_sequence_number_deltas();
  sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_sequence_number_deltas() {
  set_has_sequence_number_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
  return sequence_number_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
  if (!has_sequence_number_deltas()) {
    return NULL;
  }
  clear_has_sequence_number_deltas();
  return sequence_number_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_sequence_number_deltas(::std::string* sequence_number_deltas) {
  if (sequence_number_deltas != NULL) {
    set_has_sequence_number_deltas();
  } else {
    clear_has_sequence_number_deltas();
  }
  sequence_number_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.sequence_number_deltas)
}

// optional bytes rtp_timestamp_deltas = 105;
inline bool OutgoingRtpPackets::has_rtp_timestamp_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OutgoingRtpPackets::set_has_rtp_timestamp_deltas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OutgoingRtpPackets::clear_has_rtp_timestamp_deltas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OutgoingRtpPackets::clear_rtp_timestamp_deltas() {
  rtp_timestamp_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rtp_timestamp_deltas();
}
inline const ::std::string& OutgoingRtpPackets::rtp_timestamp_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_rtp_timestamp_deltas(const ::std::string& value) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_rtp_timestamp_deltas(::std::string&& value) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
#endif
inline void OutgoingRtpPackets::set_rtp_timestamp_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
inline void OutgoingRtpPackets::set_rtp_timestamp_deltas(const void* value, size_t size) {
  set_has_rtp_timestamp_deltas();
  rtp_timestamp_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_rtp_timestamp_deltas() {
  set_has_rtp_timestamp_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
  return rtp_timestamp_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_rtp_timestamp_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
  if (!has_rtp_timestamp_deltas()) {
    return NULL;
  }
  clear_has_rtp_timestamp_deltas();
  return rtp_timestamp_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_rtp_timestamp_deltas(::std::string* rtp_timestamp_deltas) {
  if (rtp_timestamp_deltas != NULL) {
    set_has_rtp_timestamp_deltas();
  } else {
    clear_has_rtp_timestamp_deltas();
  }
  rtp_timestamp_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtp_timestamp_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.rtp_timestamp_deltas)
}

// optional bytes ssrc_deltas = 106;
inline bool OutgoingRtpPackets::has_ssrc_deltas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OutgoingRtpPackets::set_has_ssrc_deltas() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OutgoingRtpPackets::clear_has_ssrc_deltas() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OutgoingRtpPackets::clear_ssrc_deltas() {
  ssrc_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ssrc_deltas();
}
inline const ::std::string& OutgoingRtpPackets::ssrc_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_ssrc_deltas(const ::std::string& value) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_ssrc_deltas(::std::string&& value) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
#endif
inline void OutgoingRtpPackets::set_ssrc_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
inline void OutgoingRtpPackets::set_ssrc_deltas(const void* value, size_t size) {
  set_has_ssrc_deltas();
  ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_ssrc_deltas() {
  set_has_ssrc_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
  return ssrc_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_ssrc_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
  if (!has_ssrc_deltas()) {
    return NULL;
  }
  clear_has_ssrc_deltas();
  return ssrc_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_ssrc_deltas(::std::string* ssrc_deltas) {
  if (ssrc_deltas != NULL) {
    set_has_ssrc_deltas();
  } else {
    clear_has_ssrc_deltas();
  }
  ssrc_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssrc_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.ssrc_deltas)
}

// optional bytes payload_size_deltas = 108;
inline bool OutgoingRtpPackets::has_payload_size_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OutgoingRtpPackets::set_has_payload_size_deltas() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OutgoingRtpPackets::clear_has_payload_size_deltas() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OutgoingRtpPackets::clear_payload_size_deltas() {
  payload_size_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_size_deltas();
}
inline const ::std::string& OutgoingRtpPackets::payload_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
  return payload_size_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_payload_size_deltas(const ::std::string& value) {
  set_has_payload_size_deltas();
  payload_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_payload_size_deltas(::std::string&& value) {
  set_has_payload_size_deltas();
  payload_size_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}
#endif
inline void OutgoingRtpPackets::set_payload_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_size_deltas();
  payload_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}
inline void OutgoingRtpPackets::set_payload_size_deltas(const void* value, size_t size) {
  set_has_payload_size_deltas();
  payload_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_payload_size_deltas() {
  set_has_payload_size_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
  return payload_size_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_payload_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
  if (!has_payload_size_deltas()) {
    return NULL;
  }
  clear_has_payload_size_deltas();
  return payload_size_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_payload_size_deltas(::std::string* payload_size_deltas) {
  if (payload_size_deltas != NULL) {
    set_has_payload_size_deltas();
  } else {
    clear_has_payload_size_deltas();
  }
  payload_size_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.payload_size_deltas)
}

// optional bytes header_size_deltas = 109;
inline bool OutgoingRtpPackets::has_header_size_deltas() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OutgoingRtpPackets::set_has_header_size_deltas() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OutgoingRtpPackets::clear_has_header_size_deltas() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OutgoingRtpPackets::clear_header_size_deltas() {
  header_size_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_size_deltas();
}
inline const ::std::string& OutgoingRtpPackets::header_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
  return header_size_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_header_size_deltas(const ::std::string& value) {
  set_has_header_size_deltas();
  header_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_header_size_deltas(::std::string&& value) {
  set_has_header_size_deltas();
  header_size_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}
#endif
inline void OutgoingRtpPackets::set_header_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header_size_deltas();
  header_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}
inline void OutgoingRtpPackets::set_header_size_deltas(const void* value, size_t size) {
  set_has_header_size_deltas();
  header_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_header_size_deltas() {
  set_has_header_size_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
  return header_size_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_header_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
  if (!has_header_size_deltas()) {
    return NULL;
  }
  clear_has_header_size_deltas();
  return header_size_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_header_size_deltas(::std::string* header_size_deltas) {
  if (header_size_deltas != NULL) {
    set_has_header_size_deltas();
  } else {
    clear_has_header_size_deltas();
  }
  header_size_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.header_size_deltas)
}

// optional bytes padding_size_deltas = 110;
inline bool OutgoingRtpPackets::has_padding_size_deltas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OutgoingRtpPackets::set_has_padding_size_deltas() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OutgoingRtpPackets::clear_has_padding_size_deltas() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OutgoingRtpPackets::clear_padding_size_deltas() {
  padding_size_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_padding_size_deltas();
}
inline const ::std::string& OutgoingRtpPackets::padding_size_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
  return padding_size_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_padding_size_deltas(const ::std::string& value) {
  set_has_padding_size_deltas();
  padding_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_padding_size_deltas(::std::string&& value) {
  set_has_padding_size_deltas();
  padding_size_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}
#endif
inline void OutgoingRtpPackets::set_padding_size_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_padding_size_deltas();
  padding_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}
inline void OutgoingRtpPackets::set_padding_size_deltas(const void* value, size_t size) {
  set_has_padding_size_deltas();
  padding_size_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_padding_size_deltas() {
  set_has_padding_size_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
  return padding_size_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_padding_size_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
  if (!has_padding_size_deltas()) {
    return NULL;
  }
  clear_has_padding_size_deltas();
  return padding_size_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_padding_size_deltas(::std::string* padding_size_deltas) {
  if (padding_size_deltas != NULL) {
    set_has_padding_size_deltas();
  } else {
    clear_has_padding_size_deltas();
  }
  padding_size_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), padding_size_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.padding_size_deltas)
}

// optional bytes transport_sequence_number_deltas = 115;
inline bool OutgoingRtpPackets::has_transport_sequence_number_deltas() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OutgoingRtpPackets::set_has_transport_sequence_number_deltas() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OutgoingRtpPackets::clear_has_transport_sequence_number_deltas() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OutgoingRtpPackets::clear_transport_sequence_number_deltas() {
  transport_sequence_number_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transport_sequence_number_deltas();
}
inline const ::std::string& OutgoingRtpPackets::transport_sequence_number_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_transport_sequence_number_deltas(const ::std::string& value) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_transport_sequence_number_deltas(::std::string&& value) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
#endif
inline void OutgoingRtpPackets::set_transport_sequence_number_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
inline void OutgoingRtpPackets::set_transport_sequence_number_deltas(const void* value, size_t size) {
  set_has_transport_sequence_number_deltas();
  transport_sequence_number_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_transport_sequence_number_deltas() {
  set_has_transport_sequence_number_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
  return transport_sequence_number_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_transport_sequence_number_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
  if (!has_transport_sequence_number_deltas()) {
    return NULL;
  }
  clear_has_transport_sequence_number_deltas();
  return transport_sequence_number_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_transport_sequence_number_deltas(::std::string* transport_sequence_number_deltas) {
  if (transport_sequence_number_deltas != NULL) {
    set_has_transport_sequence_number_deltas();
  } else {
    clear_has_transport_sequence_number_deltas();
  }
  transport_sequence_number_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transport_sequence_number_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.transport_sequence_number_deltas)
}

// optional bytes transmission_time_offset_deltas = 116;
inline bool OutgoingRtpPackets::has_transmission_time_offset_deltas() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OutgoingRtpPackets::set_has_transmission_time_offset_deltas() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OutgoingRtpPackets::clear_has_transmission_time_offset_deltas() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OutgoingRtpPackets::clear_transmission_time_offset_deltas() {
  transmission_time_offset_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transmission_time_offset_deltas();
}
inline const ::std::string& OutgoingRtpPackets::transmission_time_offset_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_transmission_time_offset_deltas(const ::std::string& value) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_transmission_time_offset_deltas(::std::string&& value) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
#endif
inline void OutgoingRtpPackets::set_transmission_time_offset_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
inline void OutgoingRtpPackets::set_transmission_time_offset_deltas(const void* value, size_t size) {
  set_has_transmission_time_offset_deltas();
  transmission_time_offset_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_transmission_time_offset_deltas() {
  set_has_transmission_time_offset_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
  return transmission_time_offset_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_transmission_time_offset_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
  if (!has_transmission_time_offset_deltas()) {
    return NULL;
  }
  clear_has_transmission_time_offset_deltas();
  return transmission_time_offset_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_transmission_time_offset_deltas(::std::string* transmission_time_offset_deltas) {
  if (transmission_time_offset_deltas != NULL) {
    set_has_transmission_time_offset_deltas();
  } else {
    clear_has_transmission_time_offset_deltas();
  }
  transmission_time_offset_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transmission_time_offset_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.transmission_time_offset_deltas)
}

// optional bytes absolute_send_time_deltas = 117;
inline bool OutgoingRtpPackets::has_absolute_send_time_deltas() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OutgoingRtpPackets::set_has_absolute_send_time_deltas() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OutgoingRtpPackets::clear_has_absolute_send_time_deltas() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OutgoingRtpPackets::clear_absolute_send_time_deltas() {
  absolute_send_time_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_absolute_send_time_deltas();
}
inline const ::std::string& OutgoingRtpPackets::absolute_send_time_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_absolute_send_time_deltas(const ::std::string& value) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_absolute_send_time_deltas(::std::string&& value) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
#endif
inline void OutgoingRtpPackets::set_absolute_send_time_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
inline void OutgoingRtpPackets::set_absolute_send_time_deltas(const void* value, size_t size) {
  set_has_absolute_send_time_deltas();
  absolute_send_time_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_absolute_send_time_deltas() {
  set_has_absolute_send_time_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
  return absolute_send_time_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_absolute_send_time_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
  if (!has_absolute_send_time_deltas()) {
    return NULL;
  }
  clear_has_absolute_send_time_deltas();
  return absolute_send_time_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_absolute_send_time_deltas(::std::string* absolute_send_time_deltas) {
  if (absolute_send_time_deltas != NULL) {
    set_has_absolute_send_time_deltas();
  } else {
    clear_has_absolute_send_time_deltas();
  }
  absolute_send_time_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), absolute_send_time_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.absolute_send_time_deltas)
}

// optional bytes video_rotation_deltas = 118;
inline bool OutgoingRtpPackets::has_video_rotation_deltas() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OutgoingRtpPackets::set_has_video_rotation_deltas() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OutgoingRtpPackets::clear_has_video_rotation_deltas() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OutgoingRtpPackets::clear_video_rotation_deltas() {
  video_rotation_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_rotation_deltas();
}
inline const ::std::string& OutgoingRtpPackets::video_rotation_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
  return video_rotation_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_video_rotation_deltas(const ::std::string& value) {
  set_has_video_rotation_deltas();
  video_rotation_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_video_rotation_deltas(::std::string&& value) {
  set_has_video_rotation_deltas();
  video_rotation_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}
#endif
inline void OutgoingRtpPackets::set_video_rotation_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_video_rotation_deltas();
  video_rotation_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}
inline void OutgoingRtpPackets::set_video_rotation_deltas(const void* value, size_t size) {
  set_has_video_rotation_deltas();
  video_rotation_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_video_rotation_deltas() {
  set_has_video_rotation_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
  return video_rotation_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_video_rotation_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
  if (!has_video_rotation_deltas()) {
    return NULL;
  }
  clear_has_video_rotation_deltas();
  return video_rotation_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_video_rotation_deltas(::std::string* video_rotation_deltas) {
  if (video_rotation_deltas != NULL) {
    set_has_video_rotation_deltas();
  } else {
    clear_has_video_rotation_deltas();
  }
  video_rotation_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_rotation_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.video_rotation_deltas)
}

// optional bytes audio_level_deltas = 119;
inline bool OutgoingRtpPackets::has_audio_level_deltas() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OutgoingRtpPackets::set_has_audio_level_deltas() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OutgoingRtpPackets::clear_has_audio_level_deltas() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OutgoingRtpPackets::clear_audio_level_deltas() {
  audio_level_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audio_level_deltas();
}
inline const ::std::string& OutgoingRtpPackets::audio_level_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_audio_level_deltas(const ::std::string& value) {
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_audio_level_deltas(::std::string&& value) {
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}
#endif
inline void OutgoingRtpPackets::set_audio_level_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}
inline void OutgoingRtpPackets::set_audio_level_deltas(const void* value, size_t size) {
  set_has_audio_level_deltas();
  audio_level_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_audio_level_deltas() {
  set_has_audio_level_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
  return audio_level_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_audio_level_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
  if (!has_audio_level_deltas()) {
    return NULL;
  }
  clear_has_audio_level_deltas();
  return audio_level_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_audio_level_deltas(::std::string* audio_level_deltas) {
  if (audio_level_deltas != NULL) {
    set_has_audio_level_deltas();
  } else {
    clear_has_audio_level_deltas();
  }
  audio_level_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_level_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.audio_level_deltas)
}

// optional bytes voice_activity_deltas = 120;
inline bool OutgoingRtpPackets::has_voice_activity_deltas() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OutgoingRtpPackets::set_has_voice_activity_deltas() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OutgoingRtpPackets::clear_has_voice_activity_deltas() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OutgoingRtpPackets::clear_voice_activity_deltas() {
  voice_activity_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voice_activity_deltas();
}
inline const ::std::string& OutgoingRtpPackets::voice_activity_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
  return voice_activity_deltas_.GetNoArena();
}
inline void OutgoingRtpPackets::set_voice_activity_deltas(const ::std::string& value) {
  set_has_voice_activity_deltas();
  voice_activity_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}
#if LANG_CXX11
inline void OutgoingRtpPackets::set_voice_activity_deltas(::std::string&& value) {
  set_has_voice_activity_deltas();
  voice_activity_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}
#endif
inline void OutgoingRtpPackets::set_voice_activity_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_voice_activity_deltas();
  voice_activity_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}
inline void OutgoingRtpPackets::set_voice_activity_deltas(const void* value, size_t size) {
  set_has_voice_activity_deltas();
  voice_activity_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}
inline ::std::string* OutgoingRtpPackets::mutable_voice_activity_deltas() {
  set_has_voice_activity_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
  return voice_activity_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtpPackets::release_voice_activity_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
  if (!has_voice_activity_deltas()) {
    return NULL;
  }
  clear_has_voice_activity_deltas();
  return voice_activity_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtpPackets::set_allocated_voice_activity_deltas(::std::string* voice_activity_deltas) {
  if (voice_activity_deltas != NULL) {
    set_has_voice_activity_deltas();
  } else {
    clear_has_voice_activity_deltas();
  }
  voice_activity_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voice_activity_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtpPackets.voice_activity_deltas)
}

// -------------------------------------------------------------------

// IncomingRtcpPackets

// optional int64 timestamp_ms = 1;
inline bool IncomingRtcpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IncomingRtcpPackets::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IncomingRtcpPackets::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IncomingRtcpPackets::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 IncomingRtcpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms)
  return timestamp_ms_;
}
inline void IncomingRtcpPackets::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms)
}

// optional bytes raw_packet = 2;
inline bool IncomingRtcpPackets::has_raw_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncomingRtcpPackets::set_has_raw_packet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IncomingRtcpPackets::clear_has_raw_packet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IncomingRtcpPackets::clear_raw_packet() {
  raw_packet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_packet();
}
inline const ::std::string& IncomingRtcpPackets::raw_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
  return raw_packet_.GetNoArena();
}
inline void IncomingRtcpPackets::set_raw_packet(const ::std::string& value) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
#if LANG_CXX11
inline void IncomingRtcpPackets::set_raw_packet(::std::string&& value) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
#endif
inline void IncomingRtcpPackets::set_raw_packet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
inline void IncomingRtcpPackets::set_raw_packet(const void* value, size_t size) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}
inline ::std::string* IncomingRtcpPackets::mutable_raw_packet() {
  set_has_raw_packet();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
  return raw_packet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtcpPackets::release_raw_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
  if (!has_raw_packet()) {
    return NULL;
  }
  clear_has_raw_packet();
  return raw_packet_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtcpPackets::set_allocated_raw_packet(::std::string* raw_packet) {
  if (raw_packet != NULL) {
    set_has_raw_packet();
  } else {
    clear_has_raw_packet();
  }
  raw_packet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_packet);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtcpPackets.raw_packet)
}

// optional uint32 number_of_deltas = 3;
inline bool IncomingRtcpPackets::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IncomingRtcpPackets::set_has_number_of_deltas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IncomingRtcpPackets::clear_has_number_of_deltas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IncomingRtcpPackets::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  clear_has_number_of_deltas();
}
inline ::google::protobuf::uint32 IncomingRtcpPackets::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.number_of_deltas)
  return number_of_deltas_;
}
inline void IncomingRtcpPackets::set_number_of_deltas(::google::protobuf::uint32 value) {
  set_has_number_of_deltas();
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool IncomingRtcpPackets::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncomingRtcpPackets::set_has_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IncomingRtcpPackets::clear_has_timestamp_ms_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IncomingRtcpPackets::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_ms_deltas();
}
inline const ::std::string& IncomingRtcpPackets::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void IncomingRtcpPackets::set_timestamp_ms_deltas(const ::std::string& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}
#if LANG_CXX11
inline void IncomingRtcpPackets::set_timestamp_ms_deltas(::std::string&& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}
#endif
inline void IncomingRtcpPackets::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}
inline void IncomingRtcpPackets::set_timestamp_ms_deltas(const void* value, size_t size) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}
inline ::std::string* IncomingRtcpPackets::mutable_timestamp_ms_deltas() {
  set_has_timestamp_ms_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtcpPackets::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return NULL;
  }
  clear_has_timestamp_ms_deltas();
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtcpPackets::set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != NULL) {
    set_has_timestamp_ms_deltas();
  } else {
    clear_has_timestamp_ms_deltas();
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtcpPackets.timestamp_ms_deltas)
}

// optional bytes raw_packet_blobs = 102;
inline bool IncomingRtcpPackets::has_raw_packet_blobs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IncomingRtcpPackets::set_has_raw_packet_blobs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IncomingRtcpPackets::clear_has_raw_packet_blobs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IncomingRtcpPackets::clear_raw_packet_blobs() {
  raw_packet_blobs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_packet_blobs();
}
inline const ::std::string& IncomingRtcpPackets::raw_packet_blobs() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
  return raw_packet_blobs_.GetNoArena();
}
inline void IncomingRtcpPackets::set_raw_packet_blobs(const ::std::string& value) {
  set_has_raw_packet_blobs();
  raw_packet_blobs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}
#if LANG_CXX11
inline void IncomingRtcpPackets::set_raw_packet_blobs(::std::string&& value) {
  set_has_raw_packet_blobs();
  raw_packet_blobs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}
#endif
inline void IncomingRtcpPackets::set_raw_packet_blobs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_packet_blobs();
  raw_packet_blobs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}
inline void IncomingRtcpPackets::set_raw_packet_blobs(const void* value, size_t size) {
  set_has_raw_packet_blobs();
  raw_packet_blobs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}
inline ::std::string* IncomingRtcpPackets::mutable_raw_packet_blobs() {
  set_has_raw_packet_blobs();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
  return raw_packet_blobs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncomingRtcpPackets::release_raw_packet_blobs() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
  if (!has_raw_packet_blobs()) {
    return NULL;
  }
  clear_has_raw_packet_blobs();
  return raw_packet_blobs_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncomingRtcpPackets::set_allocated_raw_packet_blobs(::std::string* raw_packet_blobs) {
  if (raw_packet_blobs != NULL) {
    set_has_raw_packet_blobs();
  } else {
    clear_has_raw_packet_blobs();
  }
  raw_packet_blobs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_packet_blobs);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.IncomingRtcpPackets.raw_packet_blobs)
}

// -------------------------------------------------------------------

// OutgoingRtcpPackets

// optional int64 timestamp_ms = 1;
inline bool OutgoingRtcpPackets::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OutgoingRtcpPackets::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OutgoingRtcpPackets::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OutgoingRtcpPackets::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 OutgoingRtcpPackets::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms)
  return timestamp_ms_;
}
inline void OutgoingRtcpPackets::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms)
}

// optional bytes raw_packet = 2;
inline bool OutgoingRtcpPackets::has_raw_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutgoingRtcpPackets::set_has_raw_packet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutgoingRtcpPackets::clear_has_raw_packet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutgoingRtcpPackets::clear_raw_packet() {
  raw_packet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_packet();
}
inline const ::std::string& OutgoingRtcpPackets::raw_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
  return raw_packet_.GetNoArena();
}
inline void OutgoingRtcpPackets::set_raw_packet(const ::std::string& value) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
#if LANG_CXX11
inline void OutgoingRtcpPackets::set_raw_packet(::std::string&& value) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
#endif
inline void OutgoingRtcpPackets::set_raw_packet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
inline void OutgoingRtcpPackets::set_raw_packet(const void* value, size_t size) {
  set_has_raw_packet();
  raw_packet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}
inline ::std::string* OutgoingRtcpPackets::mutable_raw_packet() {
  set_has_raw_packet();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
  return raw_packet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtcpPackets::release_raw_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
  if (!has_raw_packet()) {
    return NULL;
  }
  clear_has_raw_packet();
  return raw_packet_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtcpPackets::set_allocated_raw_packet(::std::string* raw_packet) {
  if (raw_packet != NULL) {
    set_has_raw_packet();
  } else {
    clear_has_raw_packet();
  }
  raw_packet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_packet);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet)
}

// optional uint32 number_of_deltas = 3;
inline bool OutgoingRtcpPackets::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OutgoingRtcpPackets::set_has_number_of_deltas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OutgoingRtcpPackets::clear_has_number_of_deltas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OutgoingRtcpPackets::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  clear_has_number_of_deltas();
}
inline ::google::protobuf::uint32 OutgoingRtcpPackets::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.number_of_deltas)
  return number_of_deltas_;
}
inline void OutgoingRtcpPackets::set_number_of_deltas(::google::protobuf::uint32 value) {
  set_has_number_of_deltas();
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool OutgoingRtcpPackets::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutgoingRtcpPackets::set_has_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutgoingRtcpPackets::clear_has_timestamp_ms_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutgoingRtcpPackets::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_ms_deltas();
}
inline const ::std::string& OutgoingRtcpPackets::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void OutgoingRtcpPackets::set_timestamp_ms_deltas(const ::std::string& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}
#if LANG_CXX11
inline void OutgoingRtcpPackets::set_timestamp_ms_deltas(::std::string&& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}
#endif
inline void OutgoingRtcpPackets::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}
inline void OutgoingRtcpPackets::set_timestamp_ms_deltas(const void* value, size_t size) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}
inline ::std::string* OutgoingRtcpPackets::mutable_timestamp_ms_deltas() {
  set_has_timestamp_ms_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtcpPackets::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return NULL;
  }
  clear_has_timestamp_ms_deltas();
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtcpPackets::set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != NULL) {
    set_has_timestamp_ms_deltas();
  } else {
    clear_has_timestamp_ms_deltas();
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtcpPackets.timestamp_ms_deltas)
}

// optional bytes raw_packet_blobs = 102;
inline bool OutgoingRtcpPackets::has_raw_packet_blobs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutgoingRtcpPackets::set_has_raw_packet_blobs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OutgoingRtcpPackets::clear_has_raw_packet_blobs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OutgoingRtcpPackets::clear_raw_packet_blobs() {
  raw_packet_blobs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_packet_blobs();
}
inline const ::std::string& OutgoingRtcpPackets::raw_packet_blobs() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
  return raw_packet_blobs_.GetNoArena();
}
inline void OutgoingRtcpPackets::set_raw_packet_blobs(const ::std::string& value) {
  set_has_raw_packet_blobs();
  raw_packet_blobs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}
#if LANG_CXX11
inline void OutgoingRtcpPackets::set_raw_packet_blobs(::std::string&& value) {
  set_has_raw_packet_blobs();
  raw_packet_blobs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}
#endif
inline void OutgoingRtcpPackets::set_raw_packet_blobs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_packet_blobs();
  raw_packet_blobs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}
inline void OutgoingRtcpPackets::set_raw_packet_blobs(const void* value, size_t size) {
  set_has_raw_packet_blobs();
  raw_packet_blobs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}
inline ::std::string* OutgoingRtcpPackets::mutable_raw_packet_blobs() {
  set_has_raw_packet_blobs();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
  return raw_packet_blobs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OutgoingRtcpPackets::release_raw_packet_blobs() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
  if (!has_raw_packet_blobs()) {
    return NULL;
  }
  clear_has_raw_packet_blobs();
  return raw_packet_blobs_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OutgoingRtcpPackets::set_allocated_raw_packet_blobs(::std::string* raw_packet_blobs) {
  if (raw_packet_blobs != NULL) {
    set_has_raw_packet_blobs();
  } else {
    clear_has_raw_packet_blobs();
  }
  raw_packet_blobs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_packet_blobs);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.OutgoingRtcpPackets.raw_packet_blobs)
}

// -------------------------------------------------------------------

// AudioPlayoutEvents

// optional int64 timestamp_ms = 1;
inline bool AudioPlayoutEvents::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioPlayoutEvents::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioPlayoutEvents::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioPlayoutEvents::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 AudioPlayoutEvents::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms)
  return timestamp_ms_;
}
inline void AudioPlayoutEvents::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms)
}

// optional uint32 local_ssrc = 2;
inline bool AudioPlayoutEvents::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioPlayoutEvents::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioPlayoutEvents::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioPlayoutEvents::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
inline ::google::protobuf::uint32 AudioPlayoutEvents::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc)
  return local_ssrc_;
}
inline void AudioPlayoutEvents::set_local_ssrc(::google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc)
}

// optional uint32 number_of_deltas = 3;
inline bool AudioPlayoutEvents::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioPlayoutEvents::set_has_number_of_deltas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AudioPlayoutEvents::clear_has_number_of_deltas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AudioPlayoutEvents::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  clear_has_number_of_deltas();
}
inline ::google::protobuf::uint32 AudioPlayoutEvents::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.number_of_deltas)
  return number_of_deltas_;
}
inline void AudioPlayoutEvents::set_number_of_deltas(::google::protobuf::uint32 value) {
  set_has_number_of_deltas();
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool AudioPlayoutEvents::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioPlayoutEvents::set_has_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioPlayoutEvents::clear_has_timestamp_ms_deltas() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioPlayoutEvents::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_ms_deltas();
}
inline const ::std::string& AudioPlayoutEvents::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void AudioPlayoutEvents::set_timestamp_ms_deltas(const ::std::string& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}
#if LANG_CXX11
inline void AudioPlayoutEvents::set_timestamp_ms_deltas(::std::string&& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}
#endif
inline void AudioPlayoutEvents::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}
inline void AudioPlayoutEvents::set_timestamp_ms_deltas(const void* value, size_t size) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}
inline ::std::string* AudioPlayoutEvents::mutable_timestamp_ms_deltas() {
  set_has_timestamp_ms_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioPlayoutEvents::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return NULL;
  }
  clear_has_timestamp_ms_deltas();
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPlayoutEvents::set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != NULL) {
    set_has_timestamp_ms_deltas();
  } else {
    clear_has_timestamp_ms_deltas();
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioPlayoutEvents.timestamp_ms_deltas)
}

// optional bytes local_ssrc_deltas = 102;
inline bool AudioPlayoutEvents::has_local_ssrc_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioPlayoutEvents::set_has_local_ssrc_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioPlayoutEvents::clear_has_local_ssrc_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioPlayoutEvents::clear_local_ssrc_deltas() {
  local_ssrc_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_ssrc_deltas();
}
inline const ::std::string& AudioPlayoutEvents::local_ssrc_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
  return local_ssrc_deltas_.GetNoArena();
}
inline void AudioPlayoutEvents::set_local_ssrc_deltas(const ::std::string& value) {
  set_has_local_ssrc_deltas();
  local_ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
#if LANG_CXX11
inline void AudioPlayoutEvents::set_local_ssrc_deltas(::std::string&& value) {
  set_has_local_ssrc_deltas();
  local_ssrc_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
#endif
inline void AudioPlayoutEvents::set_local_ssrc_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_local_ssrc_deltas();
  local_ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
inline void AudioPlayoutEvents::set_local_ssrc_deltas(const void* value, size_t size) {
  set_has_local_ssrc_deltas();
  local_ssrc_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}
inline ::std::string* AudioPlayoutEvents::mutable_local_ssrc_deltas() {
  set_has_local_ssrc_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
  return local_ssrc_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioPlayoutEvents::release_local_ssrc_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
  if (!has_local_ssrc_deltas()) {
    return NULL;
  }
  clear_has_local_ssrc_deltas();
  return local_ssrc_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPlayoutEvents::set_allocated_local_ssrc_deltas(::std::string* local_ssrc_deltas) {
  if (local_ssrc_deltas != NULL) {
    set_has_local_ssrc_deltas();
  } else {
    clear_has_local_ssrc_deltas();
  }
  local_ssrc_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ssrc_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioPlayoutEvents.local_ssrc_deltas)
}

// -------------------------------------------------------------------

// BeginLogEvent

// optional int64 timestamp_ms = 1;
inline bool BeginLogEvent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginLogEvent::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginLogEvent::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginLogEvent::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 BeginLogEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BeginLogEvent.timestamp_ms)
  return timestamp_ms_;
}
inline void BeginLogEvent::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BeginLogEvent.timestamp_ms)
}

// optional uint32 version = 2;
inline bool BeginLogEvent::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeginLogEvent::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeginLogEvent::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeginLogEvent::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BeginLogEvent::version() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BeginLogEvent.version)
  return version_;
}
inline void BeginLogEvent::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BeginLogEvent.version)
}

// optional int64 utc_time_ms = 3;
inline bool BeginLogEvent::has_utc_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginLogEvent::set_has_utc_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeginLogEvent::clear_has_utc_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeginLogEvent::clear_utc_time_ms() {
  utc_time_ms_ = GOOGLE_LONGLONG(0);
  clear_has_utc_time_ms();
}
inline ::google::protobuf::int64 BeginLogEvent::utc_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BeginLogEvent.utc_time_ms)
  return utc_time_ms_;
}
inline void BeginLogEvent::set_utc_time_ms(::google::protobuf::int64 value) {
  set_has_utc_time_ms();
  utc_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BeginLogEvent.utc_time_ms)
}

// -------------------------------------------------------------------

// EndLogEvent

// optional int64 timestamp_ms = 1;
inline bool EndLogEvent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndLogEvent::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndLogEvent::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndLogEvent::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 EndLogEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.EndLogEvent.timestamp_ms)
  return timestamp_ms_;
}
inline void EndLogEvent::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.EndLogEvent.timestamp_ms)
}

// -------------------------------------------------------------------

// LossBasedBweUpdates

// optional int64 timestamp_ms = 1;
inline bool LossBasedBweUpdates::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LossBasedBweUpdates::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LossBasedBweUpdates::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LossBasedBweUpdates::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 LossBasedBweUpdates::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms)
  return timestamp_ms_;
}
inline void LossBasedBweUpdates::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms)
}

// optional uint32 bitrate_bps = 2;
inline bool LossBasedBweUpdates::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LossBasedBweUpdates::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LossBasedBweUpdates::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LossBasedBweUpdates::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::uint32 LossBasedBweUpdates::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps)
  return bitrate_bps_;
}
inline void LossBasedBweUpdates::set_bitrate_bps(::google::protobuf::uint32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps)
}

// optional uint32 fraction_loss = 3;
inline bool LossBasedBweUpdates::has_fraction_loss() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LossBasedBweUpdates::set_has_fraction_loss() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LossBasedBweUpdates::clear_has_fraction_loss() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LossBasedBweUpdates::clear_fraction_loss() {
  fraction_loss_ = 0u;
  clear_has_fraction_loss();
}
inline ::google::protobuf::uint32 LossBasedBweUpdates::fraction_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss)
  return fraction_loss_;
}
inline void LossBasedBweUpdates::set_fraction_loss(::google::protobuf::uint32 value) {
  set_has_fraction_loss();
  fraction_loss_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss)
}

// optional uint32 total_packets = 4;
inline bool LossBasedBweUpdates::has_total_packets() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LossBasedBweUpdates::set_has_total_packets() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LossBasedBweUpdates::clear_has_total_packets() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LossBasedBweUpdates::clear_total_packets() {
  total_packets_ = 0u;
  clear_has_total_packets();
}
inline ::google::protobuf::uint32 LossBasedBweUpdates::total_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.total_packets)
  return total_packets_;
}
inline void LossBasedBweUpdates::set_total_packets(::google::protobuf::uint32 value) {
  set_has_total_packets();
  total_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.total_packets)
}

// optional uint32 number_of_deltas = 5;
inline bool LossBasedBweUpdates::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LossBasedBweUpdates::set_has_number_of_deltas() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LossBasedBweUpdates::clear_has_number_of_deltas() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LossBasedBweUpdates::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  clear_has_number_of_deltas();
}
inline ::google::protobuf::uint32 LossBasedBweUpdates::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.number_of_deltas)
  return number_of_deltas_;
}
inline void LossBasedBweUpdates::set_number_of_deltas(::google::protobuf::uint32 value) {
  set_has_number_of_deltas();
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool LossBasedBweUpdates::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossBasedBweUpdates::set_has_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossBasedBweUpdates::clear_has_timestamp_ms_deltas() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossBasedBweUpdates::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_ms_deltas();
}
inline const ::std::string& LossBasedBweUpdates::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void LossBasedBweUpdates::set_timestamp_ms_deltas(const ::std::string& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}
#if LANG_CXX11
inline void LossBasedBweUpdates::set_timestamp_ms_deltas(::std::string&& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}
#endif
inline void LossBasedBweUpdates::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}
inline void LossBasedBweUpdates::set_timestamp_ms_deltas(const void* value, size_t size) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}
inline ::std::string* LossBasedBweUpdates::mutable_timestamp_ms_deltas() {
  set_has_timestamp_ms_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LossBasedBweUpdates::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return NULL;
  }
  clear_has_timestamp_ms_deltas();
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LossBasedBweUpdates::set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != NULL) {
    set_has_timestamp_ms_deltas();
  } else {
    clear_has_timestamp_ms_deltas();
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.timestamp_ms_deltas)
}

// optional bytes bitrate_bps_deltas = 102;
inline bool LossBasedBweUpdates::has_bitrate_bps_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossBasedBweUpdates::set_has_bitrate_bps_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossBasedBweUpdates::clear_has_bitrate_bps_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossBasedBweUpdates::clear_bitrate_bps_deltas() {
  bitrate_bps_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bitrate_bps_deltas();
}
inline const ::std::string& LossBasedBweUpdates::bitrate_bps_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
  return bitrate_bps_deltas_.GetNoArena();
}
inline void LossBasedBweUpdates::set_bitrate_bps_deltas(const ::std::string& value) {
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}
#if LANG_CXX11
inline void LossBasedBweUpdates::set_bitrate_bps_deltas(::std::string&& value) {
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}
#endif
inline void LossBasedBweUpdates::set_bitrate_bps_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}
inline void LossBasedBweUpdates::set_bitrate_bps_deltas(const void* value, size_t size) {
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}
inline ::std::string* LossBasedBweUpdates::mutable_bitrate_bps_deltas() {
  set_has_bitrate_bps_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
  return bitrate_bps_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LossBasedBweUpdates::release_bitrate_bps_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
  if (!has_bitrate_bps_deltas()) {
    return NULL;
  }
  clear_has_bitrate_bps_deltas();
  return bitrate_bps_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LossBasedBweUpdates::set_allocated_bitrate_bps_deltas(::std::string* bitrate_bps_deltas) {
  if (bitrate_bps_deltas != NULL) {
    set_has_bitrate_bps_deltas();
  } else {
    clear_has_bitrate_bps_deltas();
  }
  bitrate_bps_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitrate_bps_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.bitrate_bps_deltas)
}

// optional bytes fraction_loss_deltas = 103;
inline bool LossBasedBweUpdates::has_fraction_loss_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossBasedBweUpdates::set_has_fraction_loss_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossBasedBweUpdates::clear_has_fraction_loss_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossBasedBweUpdates::clear_fraction_loss_deltas() {
  fraction_loss_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fraction_loss_deltas();
}
inline const ::std::string& LossBasedBweUpdates::fraction_loss_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
  return fraction_loss_deltas_.GetNoArena();
}
inline void LossBasedBweUpdates::set_fraction_loss_deltas(const ::std::string& value) {
  set_has_fraction_loss_deltas();
  fraction_loss_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
#if LANG_CXX11
inline void LossBasedBweUpdates::set_fraction_loss_deltas(::std::string&& value) {
  set_has_fraction_loss_deltas();
  fraction_loss_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
#endif
inline void LossBasedBweUpdates::set_fraction_loss_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fraction_loss_deltas();
  fraction_loss_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
inline void LossBasedBweUpdates::set_fraction_loss_deltas(const void* value, size_t size) {
  set_has_fraction_loss_deltas();
  fraction_loss_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}
inline ::std::string* LossBasedBweUpdates::mutable_fraction_loss_deltas() {
  set_has_fraction_loss_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
  return fraction_loss_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LossBasedBweUpdates::release_fraction_loss_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
  if (!has_fraction_loss_deltas()) {
    return NULL;
  }
  clear_has_fraction_loss_deltas();
  return fraction_loss_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LossBasedBweUpdates::set_allocated_fraction_loss_deltas(::std::string* fraction_loss_deltas) {
  if (fraction_loss_deltas != NULL) {
    set_has_fraction_loss_deltas();
  } else {
    clear_has_fraction_loss_deltas();
  }
  fraction_loss_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fraction_loss_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.fraction_loss_deltas)
}

// optional bytes total_packets_deltas = 104;
inline bool LossBasedBweUpdates::has_total_packets_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LossBasedBweUpdates::set_has_total_packets_deltas() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LossBasedBweUpdates::clear_has_total_packets_deltas() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LossBasedBweUpdates::clear_total_packets_deltas() {
  total_packets_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_total_packets_deltas();
}
inline const ::std::string& LossBasedBweUpdates::total_packets_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
  return total_packets_deltas_.GetNoArena();
}
inline void LossBasedBweUpdates::set_total_packets_deltas(const ::std::string& value) {
  set_has_total_packets_deltas();
  total_packets_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
#if LANG_CXX11
inline void LossBasedBweUpdates::set_total_packets_deltas(::std::string&& value) {
  set_has_total_packets_deltas();
  total_packets_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
#endif
inline void LossBasedBweUpdates::set_total_packets_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_total_packets_deltas();
  total_packets_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
inline void LossBasedBweUpdates::set_total_packets_deltas(const void* value, size_t size) {
  set_has_total_packets_deltas();
  total_packets_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}
inline ::std::string* LossBasedBweUpdates::mutable_total_packets_deltas() {
  set_has_total_packets_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
  return total_packets_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LossBasedBweUpdates::release_total_packets_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
  if (!has_total_packets_deltas()) {
    return NULL;
  }
  clear_has_total_packets_deltas();
  return total_packets_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LossBasedBweUpdates::set_allocated_total_packets_deltas(::std::string* total_packets_deltas) {
  if (total_packets_deltas != NULL) {
    set_has_total_packets_deltas();
  } else {
    clear_has_total_packets_deltas();
  }
  total_packets_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), total_packets_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.LossBasedBweUpdates.total_packets_deltas)
}

// -------------------------------------------------------------------

// DelayBasedBweUpdates

// optional int64 timestamp_ms = 1;
inline bool DelayBasedBweUpdates::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelayBasedBweUpdates::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelayBasedBweUpdates::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelayBasedBweUpdates::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 DelayBasedBweUpdates::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms)
  return timestamp_ms_;
}
inline void DelayBasedBweUpdates::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms)
}

// optional uint32 bitrate_bps = 2;
inline bool DelayBasedBweUpdates::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DelayBasedBweUpdates::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DelayBasedBweUpdates::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DelayBasedBweUpdates::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::uint32 DelayBasedBweUpdates::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps)
  return bitrate_bps_;
}
inline void DelayBasedBweUpdates::set_bitrate_bps(::google::protobuf::uint32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps)
}

// optional .webrtc.rtclog2.DelayBasedBweUpdates.DetectorState detector_state = 3;
inline bool DelayBasedBweUpdates::has_detector_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DelayBasedBweUpdates::set_has_detector_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DelayBasedBweUpdates::clear_has_detector_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DelayBasedBweUpdates::clear_detector_state() {
  detector_state_ = 0;
  clear_has_detector_state();
}
inline ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState DelayBasedBweUpdates::detector_state() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.detector_state)
  return static_cast< ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState >(detector_state_);
}
inline void DelayBasedBweUpdates::set_detector_state(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState value) {
  assert(::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState_IsValid(value));
  set_has_detector_state();
  detector_state_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.detector_state)
}

// optional uint32 number_of_deltas = 4;
inline bool DelayBasedBweUpdates::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DelayBasedBweUpdates::set_has_number_of_deltas() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DelayBasedBweUpdates::clear_has_number_of_deltas() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DelayBasedBweUpdates::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  clear_has_number_of_deltas();
}
inline ::google::protobuf::uint32 DelayBasedBweUpdates::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.number_of_deltas)
  return number_of_deltas_;
}
inline void DelayBasedBweUpdates::set_number_of_deltas(::google::protobuf::uint32 value) {
  set_has_number_of_deltas();
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool DelayBasedBweUpdates::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelayBasedBweUpdates::set_has_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelayBasedBweUpdates::clear_has_timestamp_ms_deltas() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelayBasedBweUpdates::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_ms_deltas();
}
inline const ::std::string& DelayBasedBweUpdates::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void DelayBasedBweUpdates::set_timestamp_ms_deltas(const ::std::string& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}
#if LANG_CXX11
inline void DelayBasedBweUpdates::set_timestamp_ms_deltas(::std::string&& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}
#endif
inline void DelayBasedBweUpdates::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}
inline void DelayBasedBweUpdates::set_timestamp_ms_deltas(const void* value, size_t size) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}
inline ::std::string* DelayBasedBweUpdates::mutable_timestamp_ms_deltas() {
  set_has_timestamp_ms_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelayBasedBweUpdates::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return NULL;
  }
  clear_has_timestamp_ms_deltas();
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelayBasedBweUpdates::set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != NULL) {
    set_has_timestamp_ms_deltas();
  } else {
    clear_has_timestamp_ms_deltas();
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.DelayBasedBweUpdates.timestamp_ms_deltas)
}

// optional bytes bitrate_bps_deltas = 102;
inline bool DelayBasedBweUpdates::has_bitrate_bps_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelayBasedBweUpdates::set_has_bitrate_bps_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelayBasedBweUpdates::clear_has_bitrate_bps_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelayBasedBweUpdates::clear_bitrate_bps_deltas() {
  bitrate_bps_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bitrate_bps_deltas();
}
inline const ::std::string& DelayBasedBweUpdates::bitrate_bps_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
  return bitrate_bps_deltas_.GetNoArena();
}
inline void DelayBasedBweUpdates::set_bitrate_bps_deltas(const ::std::string& value) {
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}
#if LANG_CXX11
inline void DelayBasedBweUpdates::set_bitrate_bps_deltas(::std::string&& value) {
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}
#endif
inline void DelayBasedBweUpdates::set_bitrate_bps_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}
inline void DelayBasedBweUpdates::set_bitrate_bps_deltas(const void* value, size_t size) {
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}
inline ::std::string* DelayBasedBweUpdates::mutable_bitrate_bps_deltas() {
  set_has_bitrate_bps_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
  return bitrate_bps_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelayBasedBweUpdates::release_bitrate_bps_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
  if (!has_bitrate_bps_deltas()) {
    return NULL;
  }
  clear_has_bitrate_bps_deltas();
  return bitrate_bps_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelayBasedBweUpdates::set_allocated_bitrate_bps_deltas(::std::string* bitrate_bps_deltas) {
  if (bitrate_bps_deltas != NULL) {
    set_has_bitrate_bps_deltas();
  } else {
    clear_has_bitrate_bps_deltas();
  }
  bitrate_bps_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitrate_bps_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.DelayBasedBweUpdates.bitrate_bps_deltas)
}

// optional bytes detector_state_deltas = 103;
inline bool DelayBasedBweUpdates::has_detector_state_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelayBasedBweUpdates::set_has_detector_state_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelayBasedBweUpdates::clear_has_detector_state_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelayBasedBweUpdates::clear_detector_state_deltas() {
  detector_state_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detector_state_deltas();
}
inline const ::std::string& DelayBasedBweUpdates::detector_state_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
  return detector_state_deltas_.GetNoArena();
}
inline void DelayBasedBweUpdates::set_detector_state_deltas(const ::std::string& value) {
  set_has_detector_state_deltas();
  detector_state_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
#if LANG_CXX11
inline void DelayBasedBweUpdates::set_detector_state_deltas(::std::string&& value) {
  set_has_detector_state_deltas();
  detector_state_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
#endif
inline void DelayBasedBweUpdates::set_detector_state_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_detector_state_deltas();
  detector_state_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
inline void DelayBasedBweUpdates::set_detector_state_deltas(const void* value, size_t size) {
  set_has_detector_state_deltas();
  detector_state_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}
inline ::std::string* DelayBasedBweUpdates::mutable_detector_state_deltas() {
  set_has_detector_state_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
  return detector_state_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelayBasedBweUpdates::release_detector_state_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
  if (!has_detector_state_deltas()) {
    return NULL;
  }
  clear_has_detector_state_deltas();
  return detector_state_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelayBasedBweUpdates::set_allocated_detector_state_deltas(::std::string* detector_state_deltas) {
  if (detector_state_deltas != NULL) {
    set_has_detector_state_deltas();
  } else {
    clear_has_detector_state_deltas();
  }
  detector_state_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detector_state_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.DelayBasedBweUpdates.detector_state_deltas)
}

// -------------------------------------------------------------------

// RtpHeaderExtensionConfig

// optional int32 transmission_time_offset_id = 1;
inline bool RtpHeaderExtensionConfig::has_transmission_time_offset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtpHeaderExtensionConfig::set_has_transmission_time_offset_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtpHeaderExtensionConfig::clear_has_transmission_time_offset_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtpHeaderExtensionConfig::clear_transmission_time_offset_id() {
  transmission_time_offset_id_ = 0;
  clear_has_transmission_time_offset_id();
}
inline ::google::protobuf::int32 RtpHeaderExtensionConfig::transmission_time_offset_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.transmission_time_offset_id)
  return transmission_time_offset_id_;
}
inline void RtpHeaderExtensionConfig::set_transmission_time_offset_id(::google::protobuf::int32 value) {
  set_has_transmission_time_offset_id();
  transmission_time_offset_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.transmission_time_offset_id)
}

// optional int32 absolute_send_time_id = 2;
inline bool RtpHeaderExtensionConfig::has_absolute_send_time_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtpHeaderExtensionConfig::set_has_absolute_send_time_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtpHeaderExtensionConfig::clear_has_absolute_send_time_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtpHeaderExtensionConfig::clear_absolute_send_time_id() {
  absolute_send_time_id_ = 0;
  clear_has_absolute_send_time_id();
}
inline ::google::protobuf::int32 RtpHeaderExtensionConfig::absolute_send_time_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.absolute_send_time_id)
  return absolute_send_time_id_;
}
inline void RtpHeaderExtensionConfig::set_absolute_send_time_id(::google::protobuf::int32 value) {
  set_has_absolute_send_time_id();
  absolute_send_time_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.absolute_send_time_id)
}

// optional int32 transport_sequence_number_id = 3;
inline bool RtpHeaderExtensionConfig::has_transport_sequence_number_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtpHeaderExtensionConfig::set_has_transport_sequence_number_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtpHeaderExtensionConfig::clear_has_transport_sequence_number_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtpHeaderExtensionConfig::clear_transport_sequence_number_id() {
  transport_sequence_number_id_ = 0;
  clear_has_transport_sequence_number_id();
}
inline ::google::protobuf::int32 RtpHeaderExtensionConfig::transport_sequence_number_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.transport_sequence_number_id)
  return transport_sequence_number_id_;
}
inline void RtpHeaderExtensionConfig::set_transport_sequence_number_id(::google::protobuf::int32 value) {
  set_has_transport_sequence_number_id();
  transport_sequence_number_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.transport_sequence_number_id)
}

// optional int32 video_rotation_id = 4;
inline bool RtpHeaderExtensionConfig::has_video_rotation_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtpHeaderExtensionConfig::set_has_video_rotation_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtpHeaderExtensionConfig::clear_has_video_rotation_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtpHeaderExtensionConfig::clear_video_rotation_id() {
  video_rotation_id_ = 0;
  clear_has_video_rotation_id();
}
inline ::google::protobuf::int32 RtpHeaderExtensionConfig::video_rotation_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.video_rotation_id)
  return video_rotation_id_;
}
inline void RtpHeaderExtensionConfig::set_video_rotation_id(::google::protobuf::int32 value) {
  set_has_video_rotation_id();
  video_rotation_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.video_rotation_id)
}

// optional int32 audio_level_id = 5;
inline bool RtpHeaderExtensionConfig::has_audio_level_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtpHeaderExtensionConfig::set_has_audio_level_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtpHeaderExtensionConfig::clear_has_audio_level_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtpHeaderExtensionConfig::clear_audio_level_id() {
  audio_level_id_ = 0;
  clear_has_audio_level_id();
}
inline ::google::protobuf::int32 RtpHeaderExtensionConfig::audio_level_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.RtpHeaderExtensionConfig.audio_level_id)
  return audio_level_id_;
}
inline void RtpHeaderExtensionConfig::set_audio_level_id(::google::protobuf::int32 value) {
  set_has_audio_level_id();
  audio_level_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.RtpHeaderExtensionConfig.audio_level_id)
}

// -------------------------------------------------------------------

// VideoRecvStreamConfig

// optional int64 timestamp_ms = 1;
inline bool VideoRecvStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoRecvStreamConfig::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoRecvStreamConfig::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoRecvStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 VideoRecvStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void VideoRecvStreamConfig::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.timestamp_ms)
}

// optional uint32 remote_ssrc = 2;
inline bool VideoRecvStreamConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoRecvStreamConfig::set_has_remote_ssrc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoRecvStreamConfig::clear_has_remote_ssrc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoRecvStreamConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  clear_has_remote_ssrc();
}
inline ::google::protobuf::uint32 VideoRecvStreamConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.remote_ssrc)
  return remote_ssrc_;
}
inline void VideoRecvStreamConfig::set_remote_ssrc(::google::protobuf::uint32 value) {
  set_has_remote_ssrc();
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 3;
inline bool VideoRecvStreamConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoRecvStreamConfig::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoRecvStreamConfig::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoRecvStreamConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
inline ::google::protobuf::uint32 VideoRecvStreamConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.local_ssrc)
  return local_ssrc_;
}
inline void VideoRecvStreamConfig::set_local_ssrc(::google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.local_ssrc)
}

// optional uint32 rtx_ssrc = 4;
inline bool VideoRecvStreamConfig::has_rtx_ssrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoRecvStreamConfig::set_has_rtx_ssrc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoRecvStreamConfig::clear_has_rtx_ssrc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoRecvStreamConfig::clear_rtx_ssrc() {
  rtx_ssrc_ = 0u;
  clear_has_rtx_ssrc();
}
inline ::google::protobuf::uint32 VideoRecvStreamConfig::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.rtx_ssrc)
  return rtx_ssrc_;
}
inline void VideoRecvStreamConfig::set_rtx_ssrc(::google::protobuf::uint32 value) {
  set_has_rtx_ssrc();
  rtx_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoRecvStreamConfig.rtx_ssrc)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
inline bool VideoRecvStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoRecvStreamConfig::set_has_header_extensions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoRecvStreamConfig::clear_has_header_extensions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoRecvStreamConfig::clear_header_extensions() {
  if (header_extensions_ != NULL) header_extensions_->Clear();
  clear_has_header_extensions();
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& VideoRecvStreamConfig::_internal_header_extensions() const {
  return *header_extensions_;
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& VideoRecvStreamConfig::header_extensions() const {
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig* p = header_extensions_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_);
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoRecvStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
  clear_has_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = NULL;
  return temp;
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoRecvStreamConfig::mutable_header_extensions() {
  set_has_header_extensions();
  if (header_extensions_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(GetArenaNoVirtual());
    header_extensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
  return header_extensions_;
}
inline void VideoRecvStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_extensions_;
  }
  if (header_extensions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header_extensions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header_extensions, submessage_arena);
    }
    set_has_header_extensions();
  } else {
    clear_has_header_extensions();
  }
  header_extensions_ = header_extensions;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.VideoRecvStreamConfig.header_extensions)
}

// -------------------------------------------------------------------

// VideoSendStreamConfig

// optional int64 timestamp_ms = 1;
inline bool VideoSendStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoSendStreamConfig::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoSendStreamConfig::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoSendStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 VideoSendStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void VideoSendStreamConfig::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.timestamp_ms)
}

// optional uint32 ssrc = 2;
inline bool VideoSendStreamConfig::has_ssrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoSendStreamConfig::set_has_ssrc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoSendStreamConfig::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoSendStreamConfig::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
inline ::google::protobuf::uint32 VideoSendStreamConfig::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.ssrc)
  return ssrc_;
}
inline void VideoSendStreamConfig::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.ssrc)
}

// optional uint32 rtx_ssrc = 3;
inline bool VideoSendStreamConfig::has_rtx_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoSendStreamConfig::set_has_rtx_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoSendStreamConfig::clear_has_rtx_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoSendStreamConfig::clear_rtx_ssrc() {
  rtx_ssrc_ = 0u;
  clear_has_rtx_ssrc();
}
inline ::google::protobuf::uint32 VideoSendStreamConfig::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.rtx_ssrc)
  return rtx_ssrc_;
}
inline void VideoSendStreamConfig::set_rtx_ssrc(::google::protobuf::uint32 value) {
  set_has_rtx_ssrc();
  rtx_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.VideoSendStreamConfig.rtx_ssrc)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
inline bool VideoSendStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoSendStreamConfig::set_has_header_extensions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoSendStreamConfig::clear_has_header_extensions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoSendStreamConfig::clear_header_extensions() {
  if (header_extensions_ != NULL) header_extensions_->Clear();
  clear_has_header_extensions();
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& VideoSendStreamConfig::_internal_header_extensions() const {
  return *header_extensions_;
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& VideoSendStreamConfig::header_extensions() const {
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig* p = header_extensions_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_);
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoSendStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
  clear_has_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = NULL;
  return temp;
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* VideoSendStreamConfig::mutable_header_extensions() {
  set_has_header_extensions();
  if (header_extensions_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(GetArenaNoVirtual());
    header_extensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
  return header_extensions_;
}
inline void VideoSendStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_extensions_;
  }
  if (header_extensions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header_extensions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header_extensions, submessage_arena);
    }
    set_has_header_extensions();
  } else {
    clear_has_header_extensions();
  }
  header_extensions_ = header_extensions;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.VideoSendStreamConfig.header_extensions)
}

// -------------------------------------------------------------------

// AudioRecvStreamConfig

// optional int64 timestamp_ms = 1;
inline bool AudioRecvStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioRecvStreamConfig::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioRecvStreamConfig::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioRecvStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 AudioRecvStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void AudioRecvStreamConfig::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.timestamp_ms)
}

// optional uint32 remote_ssrc = 2;
inline bool AudioRecvStreamConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioRecvStreamConfig::set_has_remote_ssrc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioRecvStreamConfig::clear_has_remote_ssrc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioRecvStreamConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  clear_has_remote_ssrc();
}
inline ::google::protobuf::uint32 AudioRecvStreamConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.remote_ssrc)
  return remote_ssrc_;
}
inline void AudioRecvStreamConfig::set_remote_ssrc(::google::protobuf::uint32 value) {
  set_has_remote_ssrc();
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 3;
inline bool AudioRecvStreamConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioRecvStreamConfig::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioRecvStreamConfig::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioRecvStreamConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
inline ::google::protobuf::uint32 AudioRecvStreamConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.local_ssrc)
  return local_ssrc_;
}
inline void AudioRecvStreamConfig::set_local_ssrc(::google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioRecvStreamConfig.local_ssrc)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 5;
inline bool AudioRecvStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioRecvStreamConfig::set_has_header_extensions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioRecvStreamConfig::clear_has_header_extensions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioRecvStreamConfig::clear_header_extensions() {
  if (header_extensions_ != NULL) header_extensions_->Clear();
  clear_has_header_extensions();
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& AudioRecvStreamConfig::_internal_header_extensions() const {
  return *header_extensions_;
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& AudioRecvStreamConfig::header_extensions() const {
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig* p = header_extensions_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_);
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioRecvStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
  clear_has_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = NULL;
  return temp;
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioRecvStreamConfig::mutable_header_extensions() {
  set_has_header_extensions();
  if (header_extensions_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(GetArenaNoVirtual());
    header_extensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
  return header_extensions_;
}
inline void AudioRecvStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_extensions_;
  }
  if (header_extensions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header_extensions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header_extensions, submessage_arena);
    }
    set_has_header_extensions();
  } else {
    clear_has_header_extensions();
  }
  header_extensions_ = header_extensions;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioRecvStreamConfig.header_extensions)
}

// -------------------------------------------------------------------

// AudioSendStreamConfig

// optional int64 timestamp_ms = 1;
inline bool AudioSendStreamConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioSendStreamConfig::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioSendStreamConfig::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioSendStreamConfig::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 AudioSendStreamConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void AudioSendStreamConfig::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioSendStreamConfig.timestamp_ms)
}

// optional uint32 ssrc = 2;
inline bool AudioSendStreamConfig::has_ssrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioSendStreamConfig::set_has_ssrc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioSendStreamConfig::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioSendStreamConfig::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
inline ::google::protobuf::uint32 AudioSendStreamConfig::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.ssrc)
  return ssrc_;
}
inline void AudioSendStreamConfig::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioSendStreamConfig.ssrc)
}

// optional .webrtc.rtclog2.RtpHeaderExtensionConfig header_extensions = 4;
inline bool AudioSendStreamConfig::has_header_extensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioSendStreamConfig::set_has_header_extensions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioSendStreamConfig::clear_has_header_extensions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioSendStreamConfig::clear_header_extensions() {
  if (header_extensions_ != NULL) header_extensions_->Clear();
  clear_has_header_extensions();
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& AudioSendStreamConfig::_internal_header_extensions() const {
  return *header_extensions_;
}
inline const ::webrtc::rtclog2::RtpHeaderExtensionConfig& AudioSendStreamConfig::header_extensions() const {
  const ::webrtc::rtclog2::RtpHeaderExtensionConfig* p = header_extensions_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::rtclog2::RtpHeaderExtensionConfig*>(
      &::webrtc::rtclog2::_RtpHeaderExtensionConfig_default_instance_);
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioSendStreamConfig::release_header_extensions() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
  clear_has_header_extensions();
  ::webrtc::rtclog2::RtpHeaderExtensionConfig* temp = header_extensions_;
  header_extensions_ = NULL;
  return temp;
}
inline ::webrtc::rtclog2::RtpHeaderExtensionConfig* AudioSendStreamConfig::mutable_header_extensions() {
  set_has_header_extensions();
  if (header_extensions_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog2::RtpHeaderExtensionConfig>(GetArenaNoVirtual());
    header_extensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
  return header_extensions_;
}
inline void AudioSendStreamConfig::set_allocated_header_extensions(::webrtc::rtclog2::RtpHeaderExtensionConfig* header_extensions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_extensions_;
  }
  if (header_extensions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header_extensions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header_extensions, submessage_arena);
    }
    set_has_header_extensions();
  } else {
    clear_has_header_extensions();
  }
  header_extensions_ = header_extensions;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioSendStreamConfig.header_extensions)
}

// -------------------------------------------------------------------

// AudioNetworkAdaptations

// optional int64 timestamp_ms = 1;
inline bool AudioNetworkAdaptations::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AudioNetworkAdaptations::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AudioNetworkAdaptations::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AudioNetworkAdaptations::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 AudioNetworkAdaptations::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms)
  return timestamp_ms_;
}
inline void AudioNetworkAdaptations::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms)
}

// optional int32 bitrate_bps = 2;
inline bool AudioNetworkAdaptations::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AudioNetworkAdaptations::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AudioNetworkAdaptations::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AudioNetworkAdaptations::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::int32 AudioNetworkAdaptations::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps)
  return bitrate_bps_;
}
inline void AudioNetworkAdaptations::set_bitrate_bps(::google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps)
}

// optional int32 frame_length_ms = 3;
inline bool AudioNetworkAdaptations::has_frame_length_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AudioNetworkAdaptations::set_has_frame_length_ms() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AudioNetworkAdaptations::clear_has_frame_length_ms() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AudioNetworkAdaptations::clear_frame_length_ms() {
  frame_length_ms_ = 0;
  clear_has_frame_length_ms();
}
inline ::google::protobuf::int32 AudioNetworkAdaptations::frame_length_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms)
  return frame_length_ms_;
}
inline void AudioNetworkAdaptations::set_frame_length_ms(::google::protobuf::int32 value) {
  set_has_frame_length_ms();
  frame_length_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms)
}

// optional uint32 uplink_packet_loss_fraction = 4;
inline bool AudioNetworkAdaptations::has_uplink_packet_loss_fraction() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AudioNetworkAdaptations::set_has_uplink_packet_loss_fraction() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AudioNetworkAdaptations::clear_has_uplink_packet_loss_fraction() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AudioNetworkAdaptations::clear_uplink_packet_loss_fraction() {
  uplink_packet_loss_fraction_ = 0u;
  clear_has_uplink_packet_loss_fraction();
}
inline ::google::protobuf::uint32 AudioNetworkAdaptations::uplink_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction)
  return uplink_packet_loss_fraction_;
}
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction(::google::protobuf::uint32 value) {
  set_has_uplink_packet_loss_fraction();
  uplink_packet_loss_fraction_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction)
}

// optional bool enable_fec = 5;
inline bool AudioNetworkAdaptations::has_enable_fec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AudioNetworkAdaptations::set_has_enable_fec() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AudioNetworkAdaptations::clear_has_enable_fec() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AudioNetworkAdaptations::clear_enable_fec() {
  enable_fec_ = false;
  clear_has_enable_fec();
}
inline bool AudioNetworkAdaptations::enable_fec() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec)
  return enable_fec_;
}
inline void AudioNetworkAdaptations::set_enable_fec(bool value) {
  set_has_enable_fec();
  enable_fec_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec)
}

// optional bool enable_dtx = 6;
inline bool AudioNetworkAdaptations::has_enable_dtx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AudioNetworkAdaptations::set_has_enable_dtx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AudioNetworkAdaptations::clear_has_enable_dtx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AudioNetworkAdaptations::clear_enable_dtx() {
  enable_dtx_ = false;
  clear_has_enable_dtx();
}
inline bool AudioNetworkAdaptations::enable_dtx() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx)
  return enable_dtx_;
}
inline void AudioNetworkAdaptations::set_enable_dtx(bool value) {
  set_has_enable_dtx();
  enable_dtx_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx)
}

// optional uint32 num_channels = 7;
inline bool AudioNetworkAdaptations::has_num_channels() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AudioNetworkAdaptations::set_has_num_channels() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AudioNetworkAdaptations::clear_has_num_channels() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AudioNetworkAdaptations::clear_num_channels() {
  num_channels_ = 0u;
  clear_has_num_channels();
}
inline ::google::protobuf::uint32 AudioNetworkAdaptations::num_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.num_channels)
  return num_channels_;
}
inline void AudioNetworkAdaptations::set_num_channels(::google::protobuf::uint32 value) {
  set_has_num_channels();
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.num_channels)
}

// optional uint32 number_of_deltas = 8;
inline bool AudioNetworkAdaptations::has_number_of_deltas() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AudioNetworkAdaptations::set_has_number_of_deltas() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AudioNetworkAdaptations::clear_has_number_of_deltas() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AudioNetworkAdaptations::clear_number_of_deltas() {
  number_of_deltas_ = 0u;
  clear_has_number_of_deltas();
}
inline ::google::protobuf::uint32 AudioNetworkAdaptations::number_of_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.number_of_deltas)
  return number_of_deltas_;
}
inline void AudioNetworkAdaptations::set_number_of_deltas(::google::protobuf::uint32 value) {
  set_has_number_of_deltas();
  number_of_deltas_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.number_of_deltas)
}

// optional bytes timestamp_ms_deltas = 101;
inline bool AudioNetworkAdaptations::has_timestamp_ms_deltas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioNetworkAdaptations::set_has_timestamp_ms_deltas() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioNetworkAdaptations::clear_has_timestamp_ms_deltas() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioNetworkAdaptations::clear_timestamp_ms_deltas() {
  timestamp_ms_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_ms_deltas();
}
inline const ::std::string& AudioNetworkAdaptations::timestamp_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
  return timestamp_ms_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_timestamp_ms_deltas(const ::std::string& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}
#if LANG_CXX11
inline void AudioNetworkAdaptations::set_timestamp_ms_deltas(::std::string&& value) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}
#endif
inline void AudioNetworkAdaptations::set_timestamp_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}
inline void AudioNetworkAdaptations::set_timestamp_ms_deltas(const void* value, size_t size) {
  set_has_timestamp_ms_deltas();
  timestamp_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}
inline ::std::string* AudioNetworkAdaptations::mutable_timestamp_ms_deltas() {
  set_has_timestamp_ms_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
  return timestamp_ms_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioNetworkAdaptations::release_timestamp_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
  if (!has_timestamp_ms_deltas()) {
    return NULL;
  }
  clear_has_timestamp_ms_deltas();
  return timestamp_ms_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_timestamp_ms_deltas(::std::string* timestamp_ms_deltas) {
  if (timestamp_ms_deltas != NULL) {
    set_has_timestamp_ms_deltas();
  } else {
    clear_has_timestamp_ms_deltas();
  }
  timestamp_ms_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.timestamp_ms_deltas)
}

// optional bytes bitrate_bps_deltas = 102;
inline bool AudioNetworkAdaptations::has_bitrate_bps_deltas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioNetworkAdaptations::set_has_bitrate_bps_deltas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioNetworkAdaptations::clear_has_bitrate_bps_deltas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioNetworkAdaptations::clear_bitrate_bps_deltas() {
  bitrate_bps_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bitrate_bps_deltas();
}
inline const ::std::string& AudioNetworkAdaptations::bitrate_bps_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
  return bitrate_bps_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_bitrate_bps_deltas(const ::std::string& value) {
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}
#if LANG_CXX11
inline void AudioNetworkAdaptations::set_bitrate_bps_deltas(::std::string&& value) {
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}
#endif
inline void AudioNetworkAdaptations::set_bitrate_bps_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}
inline void AudioNetworkAdaptations::set_bitrate_bps_deltas(const void* value, size_t size) {
  set_has_bitrate_bps_deltas();
  bitrate_bps_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}
inline ::std::string* AudioNetworkAdaptations::mutable_bitrate_bps_deltas() {
  set_has_bitrate_bps_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
  return bitrate_bps_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioNetworkAdaptations::release_bitrate_bps_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
  if (!has_bitrate_bps_deltas()) {
    return NULL;
  }
  clear_has_bitrate_bps_deltas();
  return bitrate_bps_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_bitrate_bps_deltas(::std::string* bitrate_bps_deltas) {
  if (bitrate_bps_deltas != NULL) {
    set_has_bitrate_bps_deltas();
  } else {
    clear_has_bitrate_bps_deltas();
  }
  bitrate_bps_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitrate_bps_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.bitrate_bps_deltas)
}

// optional bytes frame_length_ms_deltas = 103;
inline bool AudioNetworkAdaptations::has_frame_length_ms_deltas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioNetworkAdaptations::set_has_frame_length_ms_deltas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioNetworkAdaptations::clear_has_frame_length_ms_deltas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioNetworkAdaptations::clear_frame_length_ms_deltas() {
  frame_length_ms_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_length_ms_deltas();
}
inline const ::std::string& AudioNetworkAdaptations::frame_length_ms_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
  return frame_length_ms_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_frame_length_ms_deltas(const ::std::string& value) {
  set_has_frame_length_ms_deltas();
  frame_length_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}
#if LANG_CXX11
inline void AudioNetworkAdaptations::set_frame_length_ms_deltas(::std::string&& value) {
  set_has_frame_length_ms_deltas();
  frame_length_ms_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}
#endif
inline void AudioNetworkAdaptations::set_frame_length_ms_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_length_ms_deltas();
  frame_length_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}
inline void AudioNetworkAdaptations::set_frame_length_ms_deltas(const void* value, size_t size) {
  set_has_frame_length_ms_deltas();
  frame_length_ms_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}
inline ::std::string* AudioNetworkAdaptations::mutable_frame_length_ms_deltas() {
  set_has_frame_length_ms_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
  return frame_length_ms_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioNetworkAdaptations::release_frame_length_ms_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
  if (!has_frame_length_ms_deltas()) {
    return NULL;
  }
  clear_has_frame_length_ms_deltas();
  return frame_length_ms_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_frame_length_ms_deltas(::std::string* frame_length_ms_deltas) {
  if (frame_length_ms_deltas != NULL) {
    set_has_frame_length_ms_deltas();
  } else {
    clear_has_frame_length_ms_deltas();
  }
  frame_length_ms_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_length_ms_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.frame_length_ms_deltas)
}

// optional bytes uplink_packet_loss_fraction_deltas = 104;
inline bool AudioNetworkAdaptations::has_uplink_packet_loss_fraction_deltas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioNetworkAdaptations::set_has_uplink_packet_loss_fraction_deltas() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioNetworkAdaptations::clear_has_uplink_packet_loss_fraction_deltas() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioNetworkAdaptations::clear_uplink_packet_loss_fraction_deltas() {
  uplink_packet_loss_fraction_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uplink_packet_loss_fraction_deltas();
}
inline const ::std::string& AudioNetworkAdaptations::uplink_packet_loss_fraction_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
  return uplink_packet_loss_fraction_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(const ::std::string& value) {
  set_has_uplink_packet_loss_fraction_deltas();
  uplink_packet_loss_fraction_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
#if LANG_CXX11
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(::std::string&& value) {
  set_has_uplink_packet_loss_fraction_deltas();
  uplink_packet_loss_fraction_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
#endif
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uplink_packet_loss_fraction_deltas();
  uplink_packet_loss_fraction_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
inline void AudioNetworkAdaptations::set_uplink_packet_loss_fraction_deltas(const void* value, size_t size) {
  set_has_uplink_packet_loss_fraction_deltas();
  uplink_packet_loss_fraction_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}
inline ::std::string* AudioNetworkAdaptations::mutable_uplink_packet_loss_fraction_deltas() {
  set_has_uplink_packet_loss_fraction_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
  return uplink_packet_loss_fraction_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioNetworkAdaptations::release_uplink_packet_loss_fraction_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
  if (!has_uplink_packet_loss_fraction_deltas()) {
    return NULL;
  }
  clear_has_uplink_packet_loss_fraction_deltas();
  return uplink_packet_loss_fraction_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_uplink_packet_loss_fraction_deltas(::std::string* uplink_packet_loss_fraction_deltas) {
  if (uplink_packet_loss_fraction_deltas != NULL) {
    set_has_uplink_packet_loss_fraction_deltas();
  } else {
    clear_has_uplink_packet_loss_fraction_deltas();
  }
  uplink_packet_loss_fraction_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uplink_packet_loss_fraction_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.uplink_packet_loss_fraction_deltas)
}

// optional bytes enable_fec_deltas = 105;
inline bool AudioNetworkAdaptations::has_enable_fec_deltas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioNetworkAdaptations::set_has_enable_fec_deltas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AudioNetworkAdaptations::clear_has_enable_fec_deltas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AudioNetworkAdaptations::clear_enable_fec_deltas() {
  enable_fec_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enable_fec_deltas();
}
inline const ::std::string& AudioNetworkAdaptations::enable_fec_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
  return enable_fec_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_enable_fec_deltas(const ::std::string& value) {
  set_has_enable_fec_deltas();
  enable_fec_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
#if LANG_CXX11
inline void AudioNetworkAdaptations::set_enable_fec_deltas(::std::string&& value) {
  set_has_enable_fec_deltas();
  enable_fec_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
#endif
inline void AudioNetworkAdaptations::set_enable_fec_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enable_fec_deltas();
  enable_fec_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
inline void AudioNetworkAdaptations::set_enable_fec_deltas(const void* value, size_t size) {
  set_has_enable_fec_deltas();
  enable_fec_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}
inline ::std::string* AudioNetworkAdaptations::mutable_enable_fec_deltas() {
  set_has_enable_fec_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
  return enable_fec_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioNetworkAdaptations::release_enable_fec_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
  if (!has_enable_fec_deltas()) {
    return NULL;
  }
  clear_has_enable_fec_deltas();
  return enable_fec_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_enable_fec_deltas(::std::string* enable_fec_deltas) {
  if (enable_fec_deltas != NULL) {
    set_has_enable_fec_deltas();
  } else {
    clear_has_enable_fec_deltas();
  }
  enable_fec_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enable_fec_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.enable_fec_deltas)
}

// optional bytes enable_dtx_deltas = 106;
inline bool AudioNetworkAdaptations::has_enable_dtx_deltas() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioNetworkAdaptations::set_has_enable_dtx_deltas() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AudioNetworkAdaptations::clear_has_enable_dtx_deltas() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AudioNetworkAdaptations::clear_enable_dtx_deltas() {
  enable_dtx_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enable_dtx_deltas();
}
inline const ::std::string& AudioNetworkAdaptations::enable_dtx_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
  return enable_dtx_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_enable_dtx_deltas(const ::std::string& value) {
  set_has_enable_dtx_deltas();
  enable_dtx_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
#if LANG_CXX11
inline void AudioNetworkAdaptations::set_enable_dtx_deltas(::std::string&& value) {
  set_has_enable_dtx_deltas();
  enable_dtx_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
#endif
inline void AudioNetworkAdaptations::set_enable_dtx_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enable_dtx_deltas();
  enable_dtx_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
inline void AudioNetworkAdaptations::set_enable_dtx_deltas(const void* value, size_t size) {
  set_has_enable_dtx_deltas();
  enable_dtx_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}
inline ::std::string* AudioNetworkAdaptations::mutable_enable_dtx_deltas() {
  set_has_enable_dtx_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
  return enable_dtx_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioNetworkAdaptations::release_enable_dtx_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
  if (!has_enable_dtx_deltas()) {
    return NULL;
  }
  clear_has_enable_dtx_deltas();
  return enable_dtx_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_enable_dtx_deltas(::std::string* enable_dtx_deltas) {
  if (enable_dtx_deltas != NULL) {
    set_has_enable_dtx_deltas();
  } else {
    clear_has_enable_dtx_deltas();
  }
  enable_dtx_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enable_dtx_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.enable_dtx_deltas)
}

// optional bytes num_channels_deltas = 107;
inline bool AudioNetworkAdaptations::has_num_channels_deltas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AudioNetworkAdaptations::set_has_num_channels_deltas() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AudioNetworkAdaptations::clear_has_num_channels_deltas() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AudioNetworkAdaptations::clear_num_channels_deltas() {
  num_channels_deltas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_num_channels_deltas();
}
inline const ::std::string& AudioNetworkAdaptations::num_channels_deltas() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
  return num_channels_deltas_.GetNoArena();
}
inline void AudioNetworkAdaptations::set_num_channels_deltas(const ::std::string& value) {
  set_has_num_channels_deltas();
  num_channels_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
#if LANG_CXX11
inline void AudioNetworkAdaptations::set_num_channels_deltas(::std::string&& value) {
  set_has_num_channels_deltas();
  num_channels_deltas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
#endif
inline void AudioNetworkAdaptations::set_num_channels_deltas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_num_channels_deltas();
  num_channels_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
inline void AudioNetworkAdaptations::set_num_channels_deltas(const void* value, size_t size) {
  set_has_num_channels_deltas();
  num_channels_deltas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}
inline ::std::string* AudioNetworkAdaptations::mutable_num_channels_deltas() {
  set_has_num_channels_deltas();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
  return num_channels_deltas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioNetworkAdaptations::release_num_channels_deltas() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
  if (!has_num_channels_deltas()) {
    return NULL;
  }
  clear_has_num_channels_deltas();
  return num_channels_deltas_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioNetworkAdaptations::set_allocated_num_channels_deltas(::std::string* num_channels_deltas) {
  if (num_channels_deltas != NULL) {
    set_has_num_channels_deltas();
  } else {
    clear_has_num_channels_deltas();
  }
  num_channels_deltas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num_channels_deltas);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog2.AudioNetworkAdaptations.num_channels_deltas)
}

// -------------------------------------------------------------------

// BweProbeCluster

// optional int64 timestamp_ms = 1;
inline bool BweProbeCluster::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeCluster::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BweProbeCluster::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BweProbeCluster::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 BweProbeCluster::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.timestamp_ms)
  return timestamp_ms_;
}
inline void BweProbeCluster::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.timestamp_ms)
}

// optional uint32 id = 2;
inline bool BweProbeCluster::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeCluster::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BweProbeCluster::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BweProbeCluster::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BweProbeCluster::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.id)
  return id_;
}
inline void BweProbeCluster::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.id)
}

// optional uint32 bitrate_bps = 3;
inline bool BweProbeCluster::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeCluster::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BweProbeCluster::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BweProbeCluster::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::uint32 BweProbeCluster::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.bitrate_bps)
  return bitrate_bps_;
}
inline void BweProbeCluster::set_bitrate_bps(::google::protobuf::uint32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.bitrate_bps)
}

// optional uint32 min_packets = 4;
inline bool BweProbeCluster::has_min_packets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BweProbeCluster::set_has_min_packets() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BweProbeCluster::clear_has_min_packets() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BweProbeCluster::clear_min_packets() {
  min_packets_ = 0u;
  clear_has_min_packets();
}
inline ::google::protobuf::uint32 BweProbeCluster::min_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.min_packets)
  return min_packets_;
}
inline void BweProbeCluster::set_min_packets(::google::protobuf::uint32 value) {
  set_has_min_packets();
  min_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.min_packets)
}

// optional uint32 min_bytes = 5;
inline bool BweProbeCluster::has_min_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BweProbeCluster::set_has_min_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BweProbeCluster::clear_has_min_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BweProbeCluster::clear_min_bytes() {
  min_bytes_ = 0u;
  clear_has_min_bytes();
}
inline ::google::protobuf::uint32 BweProbeCluster::min_bytes() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeCluster.min_bytes)
  return min_bytes_;
}
inline void BweProbeCluster::set_min_bytes(::google::protobuf::uint32 value) {
  set_has_min_bytes();
  min_bytes_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeCluster.min_bytes)
}

// -------------------------------------------------------------------

// BweProbeResultSuccess

// optional int64 timestamp_ms = 1;
inline bool BweProbeResultSuccess::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeResultSuccess::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BweProbeResultSuccess::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BweProbeResultSuccess::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 BweProbeResultSuccess::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultSuccess.timestamp_ms)
  return timestamp_ms_;
}
inline void BweProbeResultSuccess::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultSuccess.timestamp_ms)
}

// optional uint32 id = 2;
inline bool BweProbeResultSuccess::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeResultSuccess::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BweProbeResultSuccess::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BweProbeResultSuccess::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BweProbeResultSuccess::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultSuccess.id)
  return id_;
}
inline void BweProbeResultSuccess::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultSuccess.id)
}

// optional uint32 bitrate_bps = 3;
inline bool BweProbeResultSuccess::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeResultSuccess::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BweProbeResultSuccess::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BweProbeResultSuccess::clear_bitrate_bps() {
  bitrate_bps_ = 0u;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::uint32 BweProbeResultSuccess::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultSuccess.bitrate_bps)
  return bitrate_bps_;
}
inline void BweProbeResultSuccess::set_bitrate_bps(::google::protobuf::uint32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultSuccess.bitrate_bps)
}

// -------------------------------------------------------------------

// BweProbeResultFailure

// optional int64 timestamp_ms = 1;
inline bool BweProbeResultFailure::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeResultFailure::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BweProbeResultFailure::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BweProbeResultFailure::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 BweProbeResultFailure::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultFailure.timestamp_ms)
  return timestamp_ms_;
}
inline void BweProbeResultFailure::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultFailure.timestamp_ms)
}

// optional uint32 id = 2;
inline bool BweProbeResultFailure::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeResultFailure::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BweProbeResultFailure::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BweProbeResultFailure::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BweProbeResultFailure::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultFailure.id)
  return id_;
}
inline void BweProbeResultFailure::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultFailure.id)
}

// optional .webrtc.rtclog2.BweProbeResultFailure.FailureReason failure = 3;
inline bool BweProbeResultFailure::has_failure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeResultFailure::set_has_failure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BweProbeResultFailure::clear_has_failure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BweProbeResultFailure::clear_failure() {
  failure_ = 0;
  clear_has_failure();
}
inline ::webrtc::rtclog2::BweProbeResultFailure_FailureReason BweProbeResultFailure::failure() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.BweProbeResultFailure.failure)
  return static_cast< ::webrtc::rtclog2::BweProbeResultFailure_FailureReason >(failure_);
}
inline void BweProbeResultFailure::set_failure(::webrtc::rtclog2::BweProbeResultFailure_FailureReason value) {
  assert(::webrtc::rtclog2::BweProbeResultFailure_FailureReason_IsValid(value));
  set_has_failure();
  failure_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.BweProbeResultFailure.failure)
}

// -------------------------------------------------------------------

// AlrState

// optional int64 timestamp_ms = 1;
inline bool AlrState::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlrState::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlrState::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlrState::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 AlrState::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AlrState.timestamp_ms)
  return timestamp_ms_;
}
inline void AlrState::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AlrState.timestamp_ms)
}

// optional bool in_alr = 2;
inline bool AlrState::has_in_alr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlrState::set_has_in_alr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlrState::clear_has_in_alr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlrState::clear_in_alr() {
  in_alr_ = false;
  clear_has_in_alr();
}
inline bool AlrState::in_alr() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.AlrState.in_alr)
  return in_alr_;
}
inline void AlrState::set_in_alr(bool value) {
  set_has_in_alr();
  in_alr_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.AlrState.in_alr)
}

// -------------------------------------------------------------------

// IceCandidatePairConfig

// optional int64 timestamp_ms = 1;
inline bool IceCandidatePairConfig::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IceCandidatePairConfig::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IceCandidatePairConfig::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IceCandidatePairConfig::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 IceCandidatePairConfig::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.timestamp_ms)
  return timestamp_ms_;
}
inline void IceCandidatePairConfig::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.timestamp_ms)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 2;
inline bool IceCandidatePairConfig::has_config_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IceCandidatePairConfig::set_has_config_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IceCandidatePairConfig::clear_has_config_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IceCandidatePairConfig::clear_config_type() {
  config_type_ = 0;
  clear_has_config_type();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::config_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.config_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType >(config_type_);
}
inline void IceCandidatePairConfig::set_config_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(value));
  set_has_config_type();
  config_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.config_type)
}

// optional uint32 candidate_pair_id = 3;
inline bool IceCandidatePairConfig::has_candidate_pair_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IceCandidatePairConfig::set_has_candidate_pair_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IceCandidatePairConfig::clear_has_candidate_pair_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IceCandidatePairConfig::clear_candidate_pair_id() {
  candidate_pair_id_ = 0u;
  clear_has_candidate_pair_id();
}
inline ::google::protobuf::uint32 IceCandidatePairConfig::candidate_pair_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.candidate_pair_id)
  return candidate_pair_id_;
}
inline void IceCandidatePairConfig::set_candidate_pair_id(::google::protobuf::uint32 value) {
  set_has_candidate_pair_id();
  candidate_pair_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.candidate_pair_id)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType local_candidate_type = 4;
inline bool IceCandidatePairConfig::has_local_candidate_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IceCandidatePairConfig::set_has_local_candidate_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IceCandidatePairConfig::clear_has_local_candidate_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IceCandidatePairConfig::clear_local_candidate_type() {
  local_candidate_type_ = 0;
  clear_has_local_candidate_type();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::local_candidate_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.local_candidate_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType >(local_candidate_type_);
}
inline void IceCandidatePairConfig::set_local_candidate_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(value));
  set_has_local_candidate_type();
  local_candidate_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.local_candidate_type)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol local_relay_protocol = 5;
inline bool IceCandidatePairConfig::has_local_relay_protocol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IceCandidatePairConfig::set_has_local_relay_protocol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IceCandidatePairConfig::clear_has_local_relay_protocol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IceCandidatePairConfig::clear_local_relay_protocol() {
  local_relay_protocol_ = 0;
  clear_has_local_relay_protocol();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_Protocol IceCandidatePairConfig::local_relay_protocol() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.local_relay_protocol)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol >(local_relay_protocol_);
}
inline void IceCandidatePairConfig::set_local_relay_protocol(::webrtc::rtclog2::IceCandidatePairConfig_Protocol value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(value));
  set_has_local_relay_protocol();
  local_relay_protocol_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.local_relay_protocol)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.NetworkType local_network_type = 6;
inline bool IceCandidatePairConfig::has_local_network_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IceCandidatePairConfig::set_has_local_network_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IceCandidatePairConfig::clear_has_local_network_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IceCandidatePairConfig::clear_local_network_type() {
  local_network_type_ = 0;
  clear_has_local_network_type();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType IceCandidatePairConfig::local_network_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.local_network_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType >(local_network_type_);
}
inline void IceCandidatePairConfig::set_local_network_type(::webrtc::rtclog2::IceCandidatePairConfig_NetworkType value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_NetworkType_IsValid(value));
  set_has_local_network_type();
  local_network_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.local_network_type)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily local_address_family = 7;
inline bool IceCandidatePairConfig::has_local_address_family() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IceCandidatePairConfig::set_has_local_address_family() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IceCandidatePairConfig::clear_has_local_address_family() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IceCandidatePairConfig::clear_local_address_family() {
  local_address_family_ = 0;
  clear_has_local_address_family();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::local_address_family() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.local_address_family)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily >(local_address_family_);
}
inline void IceCandidatePairConfig::set_local_address_family(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(value));
  set_has_local_address_family();
  local_address_family_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.local_address_family)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 8;
inline bool IceCandidatePairConfig::has_remote_candidate_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IceCandidatePairConfig::set_has_remote_candidate_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IceCandidatePairConfig::clear_has_remote_candidate_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IceCandidatePairConfig::clear_remote_candidate_type() {
  remote_candidate_type_ = 0;
  clear_has_remote_candidate_type();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::remote_candidate_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.remote_candidate_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType >(remote_candidate_type_);
}
inline void IceCandidatePairConfig::set_remote_candidate_type(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType_IsValid(value));
  set_has_remote_candidate_type();
  remote_candidate_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.remote_candidate_type)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.AddressFamily remote_address_family = 9;
inline bool IceCandidatePairConfig::has_remote_address_family() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IceCandidatePairConfig::set_has_remote_address_family() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IceCandidatePairConfig::clear_has_remote_address_family() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IceCandidatePairConfig::clear_remote_address_family() {
  remote_address_family_ = 0;
  clear_has_remote_address_family();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::remote_address_family() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.remote_address_family)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily >(remote_address_family_);
}
inline void IceCandidatePairConfig::set_remote_address_family(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily_IsValid(value));
  set_has_remote_address_family();
  remote_address_family_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.remote_address_family)
}

// optional .webrtc.rtclog2.IceCandidatePairConfig.Protocol candidate_pair_protocol = 10;
inline bool IceCandidatePairConfig::has_candidate_pair_protocol() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IceCandidatePairConfig::set_has_candidate_pair_protocol() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IceCandidatePairConfig::clear_has_candidate_pair_protocol() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IceCandidatePairConfig::clear_candidate_pair_protocol() {
  candidate_pair_protocol_ = 0;
  clear_has_candidate_pair_protocol();
}
inline ::webrtc::rtclog2::IceCandidatePairConfig_Protocol IceCandidatePairConfig::candidate_pair_protocol() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairConfig.candidate_pair_protocol)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol >(candidate_pair_protocol_);
}
inline void IceCandidatePairConfig::set_candidate_pair_protocol(::webrtc::rtclog2::IceCandidatePairConfig_Protocol value) {
  assert(::webrtc::rtclog2::IceCandidatePairConfig_Protocol_IsValid(value));
  set_has_candidate_pair_protocol();
  candidate_pair_protocol_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairConfig.candidate_pair_protocol)
}

// -------------------------------------------------------------------

// IceCandidatePairEvent

// optional int64 timestamp_ms = 1;
inline bool IceCandidatePairEvent::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IceCandidatePairEvent::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IceCandidatePairEvent::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IceCandidatePairEvent::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 IceCandidatePairEvent::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairEvent.timestamp_ms)
  return timestamp_ms_;
}
inline void IceCandidatePairEvent::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairEvent.timestamp_ms)
}

// optional .webrtc.rtclog2.IceCandidatePairEvent.IceCandidatePairEventType event_type = 2;
inline bool IceCandidatePairEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IceCandidatePairEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IceCandidatePairEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IceCandidatePairEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::event_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairEvent.event_type)
  return static_cast< ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType >(event_type_);
}
inline void IceCandidatePairEvent::set_event_type(::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType value) {
  assert(::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairEvent.event_type)
}

// optional uint32 candidate_pair_id = 3;
inline bool IceCandidatePairEvent::has_candidate_pair_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IceCandidatePairEvent::set_has_candidate_pair_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IceCandidatePairEvent::clear_has_candidate_pair_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IceCandidatePairEvent::clear_candidate_pair_id() {
  candidate_pair_id_ = 0u;
  clear_has_candidate_pair_id();
}
inline ::google::protobuf::uint32 IceCandidatePairEvent::candidate_pair_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog2.IceCandidatePairEvent.candidate_pair_id)
  return candidate_pair_id_;
}
inline void IceCandidatePairEvent::set_candidate_pair_id(::google::protobuf::uint32 value) {
  set_has_candidate_pair_id();
  candidate_pair_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog2.IceCandidatePairEvent.candidate_pair_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtclog2
}  // namespace webrtc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::webrtc::rtclog2::DelayBasedBweUpdates_DetectorState> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::BweProbeResultFailure_FailureReason> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidatePairConfigType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_IceCandidateType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_Protocol> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_AddressFamily> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairConfig_NetworkType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog2::IceCandidatePairEvent_IceCandidatePairEventType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rtc_5fevent_5flog2_2eproto
