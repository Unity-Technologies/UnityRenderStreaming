// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log.proto

#ifndef PROTOBUF_INCLUDED_rtc_5fevent_5flog_2eproto
#define PROTOBUF_INCLUDED_rtc_5fevent_5flog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rtc_5fevent_5flog_2eproto 

namespace protobuf_rtc_5fevent_5flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[22];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_rtc_5fevent_5flog_2eproto
namespace webrtc {
namespace rtclog {
class AlrState;
class AlrStateDefaultTypeInternal;
extern AlrStateDefaultTypeInternal _AlrState_default_instance_;
class AudioNetworkAdaptation;
class AudioNetworkAdaptationDefaultTypeInternal;
extern AudioNetworkAdaptationDefaultTypeInternal _AudioNetworkAdaptation_default_instance_;
class AudioPlayoutEvent;
class AudioPlayoutEventDefaultTypeInternal;
extern AudioPlayoutEventDefaultTypeInternal _AudioPlayoutEvent_default_instance_;
class AudioReceiveConfig;
class AudioReceiveConfigDefaultTypeInternal;
extern AudioReceiveConfigDefaultTypeInternal _AudioReceiveConfig_default_instance_;
class AudioSendConfig;
class AudioSendConfigDefaultTypeInternal;
extern AudioSendConfigDefaultTypeInternal _AudioSendConfig_default_instance_;
class BweProbeCluster;
class BweProbeClusterDefaultTypeInternal;
extern BweProbeClusterDefaultTypeInternal _BweProbeCluster_default_instance_;
class BweProbeResult;
class BweProbeResultDefaultTypeInternal;
extern BweProbeResultDefaultTypeInternal _BweProbeResult_default_instance_;
class DecoderConfig;
class DecoderConfigDefaultTypeInternal;
extern DecoderConfigDefaultTypeInternal _DecoderConfig_default_instance_;
class DelayBasedBweUpdate;
class DelayBasedBweUpdateDefaultTypeInternal;
extern DelayBasedBweUpdateDefaultTypeInternal _DelayBasedBweUpdate_default_instance_;
class EncoderConfig;
class EncoderConfigDefaultTypeInternal;
extern EncoderConfigDefaultTypeInternal _EncoderConfig_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventStream;
class EventStreamDefaultTypeInternal;
extern EventStreamDefaultTypeInternal _EventStream_default_instance_;
class IceCandidatePairConfig;
class IceCandidatePairConfigDefaultTypeInternal;
extern IceCandidatePairConfigDefaultTypeInternal _IceCandidatePairConfig_default_instance_;
class IceCandidatePairEvent;
class IceCandidatePairEventDefaultTypeInternal;
extern IceCandidatePairEventDefaultTypeInternal _IceCandidatePairEvent_default_instance_;
class LossBasedBweUpdate;
class LossBasedBweUpdateDefaultTypeInternal;
extern LossBasedBweUpdateDefaultTypeInternal _LossBasedBweUpdate_default_instance_;
class RtcpPacket;
class RtcpPacketDefaultTypeInternal;
extern RtcpPacketDefaultTypeInternal _RtcpPacket_default_instance_;
class RtpHeaderExtension;
class RtpHeaderExtensionDefaultTypeInternal;
extern RtpHeaderExtensionDefaultTypeInternal _RtpHeaderExtension_default_instance_;
class RtpPacket;
class RtpPacketDefaultTypeInternal;
extern RtpPacketDefaultTypeInternal _RtpPacket_default_instance_;
class RtxConfig;
class RtxConfigDefaultTypeInternal;
extern RtxConfigDefaultTypeInternal _RtxConfig_default_instance_;
class RtxMap;
class RtxMapDefaultTypeInternal;
extern RtxMapDefaultTypeInternal _RtxMap_default_instance_;
class VideoReceiveConfig;
class VideoReceiveConfigDefaultTypeInternal;
extern VideoReceiveConfigDefaultTypeInternal _VideoReceiveConfig_default_instance_;
class VideoSendConfig;
class VideoSendConfigDefaultTypeInternal;
extern VideoSendConfigDefaultTypeInternal _VideoSendConfig_default_instance_;
}  // namespace rtclog
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> ::webrtc::rtclog::AlrState* Arena::CreateMaybeMessage<::webrtc::rtclog::AlrState>(Arena*);
template<> ::webrtc::rtclog::AudioNetworkAdaptation* Arena::CreateMaybeMessage<::webrtc::rtclog::AudioNetworkAdaptation>(Arena*);
template<> ::webrtc::rtclog::AudioPlayoutEvent* Arena::CreateMaybeMessage<::webrtc::rtclog::AudioPlayoutEvent>(Arena*);
template<> ::webrtc::rtclog::AudioReceiveConfig* Arena::CreateMaybeMessage<::webrtc::rtclog::AudioReceiveConfig>(Arena*);
template<> ::webrtc::rtclog::AudioSendConfig* Arena::CreateMaybeMessage<::webrtc::rtclog::AudioSendConfig>(Arena*);
template<> ::webrtc::rtclog::BweProbeCluster* Arena::CreateMaybeMessage<::webrtc::rtclog::BweProbeCluster>(Arena*);
template<> ::webrtc::rtclog::BweProbeResult* Arena::CreateMaybeMessage<::webrtc::rtclog::BweProbeResult>(Arena*);
template<> ::webrtc::rtclog::DecoderConfig* Arena::CreateMaybeMessage<::webrtc::rtclog::DecoderConfig>(Arena*);
template<> ::webrtc::rtclog::DelayBasedBweUpdate* Arena::CreateMaybeMessage<::webrtc::rtclog::DelayBasedBweUpdate>(Arena*);
template<> ::webrtc::rtclog::EncoderConfig* Arena::CreateMaybeMessage<::webrtc::rtclog::EncoderConfig>(Arena*);
template<> ::webrtc::rtclog::Event* Arena::CreateMaybeMessage<::webrtc::rtclog::Event>(Arena*);
template<> ::webrtc::rtclog::EventStream* Arena::CreateMaybeMessage<::webrtc::rtclog::EventStream>(Arena*);
template<> ::webrtc::rtclog::IceCandidatePairConfig* Arena::CreateMaybeMessage<::webrtc::rtclog::IceCandidatePairConfig>(Arena*);
template<> ::webrtc::rtclog::IceCandidatePairEvent* Arena::CreateMaybeMessage<::webrtc::rtclog::IceCandidatePairEvent>(Arena*);
template<> ::webrtc::rtclog::LossBasedBweUpdate* Arena::CreateMaybeMessage<::webrtc::rtclog::LossBasedBweUpdate>(Arena*);
template<> ::webrtc::rtclog::RtcpPacket* Arena::CreateMaybeMessage<::webrtc::rtclog::RtcpPacket>(Arena*);
template<> ::webrtc::rtclog::RtpHeaderExtension* Arena::CreateMaybeMessage<::webrtc::rtclog::RtpHeaderExtension>(Arena*);
template<> ::webrtc::rtclog::RtpPacket* Arena::CreateMaybeMessage<::webrtc::rtclog::RtpPacket>(Arena*);
template<> ::webrtc::rtclog::RtxConfig* Arena::CreateMaybeMessage<::webrtc::rtclog::RtxConfig>(Arena*);
template<> ::webrtc::rtclog::RtxMap* Arena::CreateMaybeMessage<::webrtc::rtclog::RtxMap>(Arena*);
template<> ::webrtc::rtclog::VideoReceiveConfig* Arena::CreateMaybeMessage<::webrtc::rtclog::VideoReceiveConfig>(Arena*);
template<> ::webrtc::rtclog::VideoSendConfig* Arena::CreateMaybeMessage<::webrtc::rtclog::VideoSendConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace webrtc {
namespace rtclog {

enum Event_EventType {
  Event_EventType_UNKNOWN_EVENT = 0,
  Event_EventType_LOG_START = 1,
  Event_EventType_LOG_END = 2,
  Event_EventType_RTP_EVENT = 3,
  Event_EventType_RTCP_EVENT = 4,
  Event_EventType_AUDIO_PLAYOUT_EVENT = 5,
  Event_EventType_LOSS_BASED_BWE_UPDATE = 6,
  Event_EventType_DELAY_BASED_BWE_UPDATE = 7,
  Event_EventType_VIDEO_RECEIVER_CONFIG_EVENT = 8,
  Event_EventType_VIDEO_SENDER_CONFIG_EVENT = 9,
  Event_EventType_AUDIO_RECEIVER_CONFIG_EVENT = 10,
  Event_EventType_AUDIO_SENDER_CONFIG_EVENT = 11,
  Event_EventType_AUDIO_NETWORK_ADAPTATION_EVENT = 16,
  Event_EventType_BWE_PROBE_CLUSTER_CREATED_EVENT = 17,
  Event_EventType_BWE_PROBE_RESULT_EVENT = 18,
  Event_EventType_ALR_STATE_EVENT = 19,
  Event_EventType_ICE_CANDIDATE_PAIR_CONFIG = 20,
  Event_EventType_ICE_CANDIDATE_PAIR_EVENT = 21
};
bool Event_EventType_IsValid(int value);
const Event_EventType Event_EventType_EventType_MIN = Event_EventType_UNKNOWN_EVENT;
const Event_EventType Event_EventType_EventType_MAX = Event_EventType_ICE_CANDIDATE_PAIR_EVENT;
const int Event_EventType_EventType_ARRAYSIZE = Event_EventType_EventType_MAX + 1;

enum DelayBasedBweUpdate_DetectorState {
  DelayBasedBweUpdate_DetectorState_BWE_NORMAL = 0,
  DelayBasedBweUpdate_DetectorState_BWE_UNDERUSING = 1,
  DelayBasedBweUpdate_DetectorState_BWE_OVERUSING = 2
};
bool DelayBasedBweUpdate_DetectorState_IsValid(int value);
const DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate_DetectorState_DetectorState_MIN = DelayBasedBweUpdate_DetectorState_BWE_NORMAL;
const DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate_DetectorState_DetectorState_MAX = DelayBasedBweUpdate_DetectorState_BWE_OVERUSING;
const int DelayBasedBweUpdate_DetectorState_DetectorState_ARRAYSIZE = DelayBasedBweUpdate_DetectorState_DetectorState_MAX + 1;

enum VideoReceiveConfig_RtcpMode {
  VideoReceiveConfig_RtcpMode_RTCP_COMPOUND = 1,
  VideoReceiveConfig_RtcpMode_RTCP_REDUCEDSIZE = 2
};
bool VideoReceiveConfig_RtcpMode_IsValid(int value);
const VideoReceiveConfig_RtcpMode VideoReceiveConfig_RtcpMode_RtcpMode_MIN = VideoReceiveConfig_RtcpMode_RTCP_COMPOUND;
const VideoReceiveConfig_RtcpMode VideoReceiveConfig_RtcpMode_RtcpMode_MAX = VideoReceiveConfig_RtcpMode_RTCP_REDUCEDSIZE;
const int VideoReceiveConfig_RtcpMode_RtcpMode_ARRAYSIZE = VideoReceiveConfig_RtcpMode_RtcpMode_MAX + 1;

enum BweProbeResult_ResultType {
  BweProbeResult_ResultType_SUCCESS = 0,
  BweProbeResult_ResultType_INVALID_SEND_RECEIVE_INTERVAL = 1,
  BweProbeResult_ResultType_INVALID_SEND_RECEIVE_RATIO = 2,
  BweProbeResult_ResultType_TIMEOUT = 3
};
bool BweProbeResult_ResultType_IsValid(int value);
const BweProbeResult_ResultType BweProbeResult_ResultType_ResultType_MIN = BweProbeResult_ResultType_SUCCESS;
const BweProbeResult_ResultType BweProbeResult_ResultType_ResultType_MAX = BweProbeResult_ResultType_TIMEOUT;
const int BweProbeResult_ResultType_ResultType_ARRAYSIZE = BweProbeResult_ResultType_ResultType_MAX + 1;

enum IceCandidatePairConfig_IceCandidatePairConfigType {
  IceCandidatePairConfig_IceCandidatePairConfigType_ADDED = 0,
  IceCandidatePairConfig_IceCandidatePairConfigType_UPDATED = 1,
  IceCandidatePairConfig_IceCandidatePairConfigType_DESTROYED = 2,
  IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED = 3
};
bool IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(int value);
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MIN = IceCandidatePairConfig_IceCandidatePairConfigType_ADDED;
const IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX = IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED;
const int IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_ARRAYSIZE = IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX + 1;

enum IceCandidatePairConfig_IceCandidateType {
  IceCandidatePairConfig_IceCandidateType_LOCAL = 0,
  IceCandidatePairConfig_IceCandidateType_STUN = 1,
  IceCandidatePairConfig_IceCandidateType_PRFLX = 2,
  IceCandidatePairConfig_IceCandidateType_RELAY = 3,
  IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE = 4
};
bool IceCandidatePairConfig_IceCandidateType_IsValid(int value);
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig_IceCandidateType_IceCandidateType_MIN = IceCandidatePairConfig_IceCandidateType_LOCAL;
const IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX = IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE;
const int IceCandidatePairConfig_IceCandidateType_IceCandidateType_ARRAYSIZE = IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX + 1;

enum IceCandidatePairConfig_Protocol {
  IceCandidatePairConfig_Protocol_UDP = 0,
  IceCandidatePairConfig_Protocol_TCP = 1,
  IceCandidatePairConfig_Protocol_SSLTCP = 2,
  IceCandidatePairConfig_Protocol_TLS = 3,
  IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL = 4
};
bool IceCandidatePairConfig_Protocol_IsValid(int value);
const IceCandidatePairConfig_Protocol IceCandidatePairConfig_Protocol_Protocol_MIN = IceCandidatePairConfig_Protocol_UDP;
const IceCandidatePairConfig_Protocol IceCandidatePairConfig_Protocol_Protocol_MAX = IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL;
const int IceCandidatePairConfig_Protocol_Protocol_ARRAYSIZE = IceCandidatePairConfig_Protocol_Protocol_MAX + 1;

enum IceCandidatePairConfig_AddressFamily {
  IceCandidatePairConfig_AddressFamily_IPV4 = 0,
  IceCandidatePairConfig_AddressFamily_IPV6 = 1,
  IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY = 2
};
bool IceCandidatePairConfig_AddressFamily_IsValid(int value);
const IceCandidatePairConfig_AddressFamily IceCandidatePairConfig_AddressFamily_AddressFamily_MIN = IceCandidatePairConfig_AddressFamily_IPV4;
const IceCandidatePairConfig_AddressFamily IceCandidatePairConfig_AddressFamily_AddressFamily_MAX = IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY;
const int IceCandidatePairConfig_AddressFamily_AddressFamily_ARRAYSIZE = IceCandidatePairConfig_AddressFamily_AddressFamily_MAX + 1;

enum IceCandidatePairConfig_NetworkType {
  IceCandidatePairConfig_NetworkType_ETHERNET = 0,
  IceCandidatePairConfig_NetworkType_LOOPBACK = 1,
  IceCandidatePairConfig_NetworkType_WIFI = 2,
  IceCandidatePairConfig_NetworkType_VPN = 3,
  IceCandidatePairConfig_NetworkType_CELLULAR = 4,
  IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE = 5
};
bool IceCandidatePairConfig_NetworkType_IsValid(int value);
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig_NetworkType_NetworkType_MIN = IceCandidatePairConfig_NetworkType_ETHERNET;
const IceCandidatePairConfig_NetworkType IceCandidatePairConfig_NetworkType_NetworkType_MAX = IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE;
const int IceCandidatePairConfig_NetworkType_NetworkType_ARRAYSIZE = IceCandidatePairConfig_NetworkType_NetworkType_MAX + 1;

enum IceCandidatePairEvent_IceCandidatePairEventType {
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_SENT = 0,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RECEIVED = 1,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_SENT = 2,
  IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED = 3
};
bool IceCandidatePairEvent_IceCandidatePairEventType_IsValid(int value);
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MIN = IceCandidatePairEvent_IceCandidatePairEventType_CHECK_SENT;
const IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX = IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED;
const int IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_ARRAYSIZE = IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX + 1;

enum MediaType {
  ANY = 0,
  AUDIO = 1,
  VIDEO = 2,
  DATA = 3
};
bool MediaType_IsValid(int value);
const MediaType MediaType_MIN = ANY;
const MediaType MediaType_MAX = DATA;
const int MediaType_ARRAYSIZE = MediaType_MAX + 1;

// ===================================================================

class EventStream : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.EventStream) */ {
 public:
  EventStream();
  virtual ~EventStream();

  EventStream(const EventStream& from);

  inline EventStream& operator=(const EventStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventStream(EventStream&& from) noexcept
    : EventStream() {
    *this = ::std::move(from);
  }

  inline EventStream& operator=(EventStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventStream* internal_default_instance() {
    return reinterpret_cast<const EventStream*>(
               &_EventStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(EventStream* other);
  friend void swap(EventStream& a, EventStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventStream* New() const final {
    return CreateMaybeMessage<EventStream>(NULL);
  }

  EventStream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventStream>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EventStream& from);
  void MergeFrom(const EventStream& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .webrtc.rtclog.Event stream = 1;
  int stream_size() const;
  void clear_stream();
  static const int kStreamFieldNumber = 1;
  ::webrtc::rtclog::Event* mutable_stream(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::Event >*
      mutable_stream();
  const ::webrtc::rtclog::Event& stream(int index) const;
  ::webrtc::rtclog::Event* add_stream();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::Event >&
      stream() const;

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.EventStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::Event > stream_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Event& default_instance();

  enum SubtypeCase {
    kRtpPacket = 3,
    kRtcpPacket = 4,
    kAudioPlayoutEvent = 5,
    kLossBasedBweUpdate = 6,
    kDelayBasedBweUpdate = 7,
    kVideoReceiverConfig = 8,
    kVideoSenderConfig = 9,
    kAudioReceiverConfig = 10,
    kAudioSenderConfig = 11,
    kAudioNetworkAdaptation = 16,
    kProbeCluster = 17,
    kProbeResult = 18,
    kAlrState = 19,
    kIceCandidatePairConfig = 20,
    kIceCandidatePairEvent = 21,
    SUBTYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Event_EventType EventType;
  static const EventType UNKNOWN_EVENT =
    Event_EventType_UNKNOWN_EVENT;
  static const EventType LOG_START =
    Event_EventType_LOG_START;
  static const EventType LOG_END =
    Event_EventType_LOG_END;
  static const EventType RTP_EVENT =
    Event_EventType_RTP_EVENT;
  static const EventType RTCP_EVENT =
    Event_EventType_RTCP_EVENT;
  static const EventType AUDIO_PLAYOUT_EVENT =
    Event_EventType_AUDIO_PLAYOUT_EVENT;
  static const EventType LOSS_BASED_BWE_UPDATE =
    Event_EventType_LOSS_BASED_BWE_UPDATE;
  static const EventType DELAY_BASED_BWE_UPDATE =
    Event_EventType_DELAY_BASED_BWE_UPDATE;
  static const EventType VIDEO_RECEIVER_CONFIG_EVENT =
    Event_EventType_VIDEO_RECEIVER_CONFIG_EVENT;
  static const EventType VIDEO_SENDER_CONFIG_EVENT =
    Event_EventType_VIDEO_SENDER_CONFIG_EVENT;
  static const EventType AUDIO_RECEIVER_CONFIG_EVENT =
    Event_EventType_AUDIO_RECEIVER_CONFIG_EVENT;
  static const EventType AUDIO_SENDER_CONFIG_EVENT =
    Event_EventType_AUDIO_SENDER_CONFIG_EVENT;
  static const EventType AUDIO_NETWORK_ADAPTATION_EVENT =
    Event_EventType_AUDIO_NETWORK_ADAPTATION_EVENT;
  static const EventType BWE_PROBE_CLUSTER_CREATED_EVENT =
    Event_EventType_BWE_PROBE_CLUSTER_CREATED_EVENT;
  static const EventType BWE_PROBE_RESULT_EVENT =
    Event_EventType_BWE_PROBE_RESULT_EVENT;
  static const EventType ALR_STATE_EVENT =
    Event_EventType_ALR_STATE_EVENT;
  static const EventType ICE_CANDIDATE_PAIR_CONFIG =
    Event_EventType_ICE_CANDIDATE_PAIR_CONFIG;
  static const EventType ICE_CANDIDATE_PAIR_EVENT =
    Event_EventType_ICE_CANDIDATE_PAIR_EVENT;
  static inline bool EventType_IsValid(int value) {
    return Event_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    Event_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    Event_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    Event_EventType_EventType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int64 timestamp_us = 1;
  bool has_timestamp_us() const;
  void clear_timestamp_us();
  static const int kTimestampUsFieldNumber = 1;
  ::google::protobuf::int64 timestamp_us() const;
  void set_timestamp_us(::google::protobuf::int64 value);

  // optional .webrtc.rtclog.Event.EventType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::webrtc::rtclog::Event_EventType type() const;
  void set_type(::webrtc::rtclog::Event_EventType value);

  // optional .webrtc.rtclog.RtpPacket rtp_packet = 3;
  bool has_rtp_packet() const;
  void clear_rtp_packet();
  static const int kRtpPacketFieldNumber = 3;
  private:
  const ::webrtc::rtclog::RtpPacket& _internal_rtp_packet() const;
  public:
  const ::webrtc::rtclog::RtpPacket& rtp_packet() const;
  ::webrtc::rtclog::RtpPacket* release_rtp_packet();
  ::webrtc::rtclog::RtpPacket* mutable_rtp_packet();
  void set_allocated_rtp_packet(::webrtc::rtclog::RtpPacket* rtp_packet);

  // optional .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
  bool has_rtcp_packet() const;
  void clear_rtcp_packet();
  static const int kRtcpPacketFieldNumber = 4;
  private:
  const ::webrtc::rtclog::RtcpPacket& _internal_rtcp_packet() const;
  public:
  const ::webrtc::rtclog::RtcpPacket& rtcp_packet() const;
  ::webrtc::rtclog::RtcpPacket* release_rtcp_packet();
  ::webrtc::rtclog::RtcpPacket* mutable_rtcp_packet();
  void set_allocated_rtcp_packet(::webrtc::rtclog::RtcpPacket* rtcp_packet);

  // optional .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
  bool has_audio_playout_event() const;
  void clear_audio_playout_event();
  static const int kAudioPlayoutEventFieldNumber = 5;
  private:
  const ::webrtc::rtclog::AudioPlayoutEvent& _internal_audio_playout_event() const;
  public:
  const ::webrtc::rtclog::AudioPlayoutEvent& audio_playout_event() const;
  ::webrtc::rtclog::AudioPlayoutEvent* release_audio_playout_event();
  ::webrtc::rtclog::AudioPlayoutEvent* mutable_audio_playout_event();
  void set_allocated_audio_playout_event(::webrtc::rtclog::AudioPlayoutEvent* audio_playout_event);

  // optional .webrtc.rtclog.LossBasedBweUpdate loss_based_bwe_update = 6;
  bool has_loss_based_bwe_update() const;
  void clear_loss_based_bwe_update();
  static const int kLossBasedBweUpdateFieldNumber = 6;
  private:
  const ::webrtc::rtclog::LossBasedBweUpdate& _internal_loss_based_bwe_update() const;
  public:
  const ::webrtc::rtclog::LossBasedBweUpdate& loss_based_bwe_update() const;
  ::webrtc::rtclog::LossBasedBweUpdate* release_loss_based_bwe_update();
  ::webrtc::rtclog::LossBasedBweUpdate* mutable_loss_based_bwe_update();
  void set_allocated_loss_based_bwe_update(::webrtc::rtclog::LossBasedBweUpdate* loss_based_bwe_update);

  // optional .webrtc.rtclog.DelayBasedBweUpdate delay_based_bwe_update = 7;
  bool has_delay_based_bwe_update() const;
  void clear_delay_based_bwe_update();
  static const int kDelayBasedBweUpdateFieldNumber = 7;
  private:
  const ::webrtc::rtclog::DelayBasedBweUpdate& _internal_delay_based_bwe_update() const;
  public:
  const ::webrtc::rtclog::DelayBasedBweUpdate& delay_based_bwe_update() const;
  ::webrtc::rtclog::DelayBasedBweUpdate* release_delay_based_bwe_update();
  ::webrtc::rtclog::DelayBasedBweUpdate* mutable_delay_based_bwe_update();
  void set_allocated_delay_based_bwe_update(::webrtc::rtclog::DelayBasedBweUpdate* delay_based_bwe_update);

  // optional .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
  bool has_video_receiver_config() const;
  void clear_video_receiver_config();
  static const int kVideoReceiverConfigFieldNumber = 8;
  private:
  const ::webrtc::rtclog::VideoReceiveConfig& _internal_video_receiver_config() const;
  public:
  const ::webrtc::rtclog::VideoReceiveConfig& video_receiver_config() const;
  ::webrtc::rtclog::VideoReceiveConfig* release_video_receiver_config();
  ::webrtc::rtclog::VideoReceiveConfig* mutable_video_receiver_config();
  void set_allocated_video_receiver_config(::webrtc::rtclog::VideoReceiveConfig* video_receiver_config);

  // optional .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
  bool has_video_sender_config() const;
  void clear_video_sender_config();
  static const int kVideoSenderConfigFieldNumber = 9;
  private:
  const ::webrtc::rtclog::VideoSendConfig& _internal_video_sender_config() const;
  public:
  const ::webrtc::rtclog::VideoSendConfig& video_sender_config() const;
  ::webrtc::rtclog::VideoSendConfig* release_video_sender_config();
  ::webrtc::rtclog::VideoSendConfig* mutable_video_sender_config();
  void set_allocated_video_sender_config(::webrtc::rtclog::VideoSendConfig* video_sender_config);

  // optional .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
  bool has_audio_receiver_config() const;
  void clear_audio_receiver_config();
  static const int kAudioReceiverConfigFieldNumber = 10;
  private:
  const ::webrtc::rtclog::AudioReceiveConfig& _internal_audio_receiver_config() const;
  public:
  const ::webrtc::rtclog::AudioReceiveConfig& audio_receiver_config() const;
  ::webrtc::rtclog::AudioReceiveConfig* release_audio_receiver_config();
  ::webrtc::rtclog::AudioReceiveConfig* mutable_audio_receiver_config();
  void set_allocated_audio_receiver_config(::webrtc::rtclog::AudioReceiveConfig* audio_receiver_config);

  // optional .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
  bool has_audio_sender_config() const;
  void clear_audio_sender_config();
  static const int kAudioSenderConfigFieldNumber = 11;
  private:
  const ::webrtc::rtclog::AudioSendConfig& _internal_audio_sender_config() const;
  public:
  const ::webrtc::rtclog::AudioSendConfig& audio_sender_config() const;
  ::webrtc::rtclog::AudioSendConfig* release_audio_sender_config();
  ::webrtc::rtclog::AudioSendConfig* mutable_audio_sender_config();
  void set_allocated_audio_sender_config(::webrtc::rtclog::AudioSendConfig* audio_sender_config);

  // optional .webrtc.rtclog.AudioNetworkAdaptation audio_network_adaptation = 16;
  bool has_audio_network_adaptation() const;
  void clear_audio_network_adaptation();
  static const int kAudioNetworkAdaptationFieldNumber = 16;
  private:
  const ::webrtc::rtclog::AudioNetworkAdaptation& _internal_audio_network_adaptation() const;
  public:
  const ::webrtc::rtclog::AudioNetworkAdaptation& audio_network_adaptation() const;
  ::webrtc::rtclog::AudioNetworkAdaptation* release_audio_network_adaptation();
  ::webrtc::rtclog::AudioNetworkAdaptation* mutable_audio_network_adaptation();
  void set_allocated_audio_network_adaptation(::webrtc::rtclog::AudioNetworkAdaptation* audio_network_adaptation);

  // optional .webrtc.rtclog.BweProbeCluster probe_cluster = 17;
  bool has_probe_cluster() const;
  void clear_probe_cluster();
  static const int kProbeClusterFieldNumber = 17;
  private:
  const ::webrtc::rtclog::BweProbeCluster& _internal_probe_cluster() const;
  public:
  const ::webrtc::rtclog::BweProbeCluster& probe_cluster() const;
  ::webrtc::rtclog::BweProbeCluster* release_probe_cluster();
  ::webrtc::rtclog::BweProbeCluster* mutable_probe_cluster();
  void set_allocated_probe_cluster(::webrtc::rtclog::BweProbeCluster* probe_cluster);

  // optional .webrtc.rtclog.BweProbeResult probe_result = 18;
  bool has_probe_result() const;
  void clear_probe_result();
  static const int kProbeResultFieldNumber = 18;
  private:
  const ::webrtc::rtclog::BweProbeResult& _internal_probe_result() const;
  public:
  const ::webrtc::rtclog::BweProbeResult& probe_result() const;
  ::webrtc::rtclog::BweProbeResult* release_probe_result();
  ::webrtc::rtclog::BweProbeResult* mutable_probe_result();
  void set_allocated_probe_result(::webrtc::rtclog::BweProbeResult* probe_result);

  // optional .webrtc.rtclog.AlrState alr_state = 19;
  bool has_alr_state() const;
  void clear_alr_state();
  static const int kAlrStateFieldNumber = 19;
  private:
  const ::webrtc::rtclog::AlrState& _internal_alr_state() const;
  public:
  const ::webrtc::rtclog::AlrState& alr_state() const;
  ::webrtc::rtclog::AlrState* release_alr_state();
  ::webrtc::rtclog::AlrState* mutable_alr_state();
  void set_allocated_alr_state(::webrtc::rtclog::AlrState* alr_state);

  // optional .webrtc.rtclog.IceCandidatePairConfig ice_candidate_pair_config = 20;
  bool has_ice_candidate_pair_config() const;
  void clear_ice_candidate_pair_config();
  static const int kIceCandidatePairConfigFieldNumber = 20;
  private:
  const ::webrtc::rtclog::IceCandidatePairConfig& _internal_ice_candidate_pair_config() const;
  public:
  const ::webrtc::rtclog::IceCandidatePairConfig& ice_candidate_pair_config() const;
  ::webrtc::rtclog::IceCandidatePairConfig* release_ice_candidate_pair_config();
  ::webrtc::rtclog::IceCandidatePairConfig* mutable_ice_candidate_pair_config();
  void set_allocated_ice_candidate_pair_config(::webrtc::rtclog::IceCandidatePairConfig* ice_candidate_pair_config);

  // optional .webrtc.rtclog.IceCandidatePairEvent ice_candidate_pair_event = 21;
  bool has_ice_candidate_pair_event() const;
  void clear_ice_candidate_pair_event();
  static const int kIceCandidatePairEventFieldNumber = 21;
  private:
  const ::webrtc::rtclog::IceCandidatePairEvent& _internal_ice_candidate_pair_event() const;
  public:
  const ::webrtc::rtclog::IceCandidatePairEvent& ice_candidate_pair_event() const;
  ::webrtc::rtclog::IceCandidatePairEvent* release_ice_candidate_pair_event();
  ::webrtc::rtclog::IceCandidatePairEvent* mutable_ice_candidate_pair_event();
  void set_allocated_ice_candidate_pair_event(::webrtc::rtclog::IceCandidatePairEvent* ice_candidate_pair_event);

  void clear_subtype();
  SubtypeCase subtype_case() const;
  // @@protoc_insertion_point(class_scope:webrtc.rtclog.Event)
 private:
  void set_has_timestamp_us();
  void clear_has_timestamp_us();
  void set_has_type();
  void clear_has_type();
  void set_has_rtp_packet();
  void set_has_rtcp_packet();
  void set_has_audio_playout_event();
  void set_has_loss_based_bwe_update();
  void set_has_delay_based_bwe_update();
  void set_has_video_receiver_config();
  void set_has_video_sender_config();
  void set_has_audio_receiver_config();
  void set_has_audio_sender_config();
  void set_has_audio_network_adaptation();
  void set_has_probe_cluster();
  void set_has_probe_result();
  void set_has_alr_state();
  void set_has_ice_candidate_pair_config();
  void set_has_ice_candidate_pair_event();

  inline bool has_subtype() const;
  inline void clear_has_subtype();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 timestamp_us_;
  int type_;
  union SubtypeUnion {
    SubtypeUnion() {}
    ::webrtc::rtclog::RtpPacket* rtp_packet_;
    ::webrtc::rtclog::RtcpPacket* rtcp_packet_;
    ::webrtc::rtclog::AudioPlayoutEvent* audio_playout_event_;
    ::webrtc::rtclog::LossBasedBweUpdate* loss_based_bwe_update_;
    ::webrtc::rtclog::DelayBasedBweUpdate* delay_based_bwe_update_;
    ::webrtc::rtclog::VideoReceiveConfig* video_receiver_config_;
    ::webrtc::rtclog::VideoSendConfig* video_sender_config_;
    ::webrtc::rtclog::AudioReceiveConfig* audio_receiver_config_;
    ::webrtc::rtclog::AudioSendConfig* audio_sender_config_;
    ::webrtc::rtclog::AudioNetworkAdaptation* audio_network_adaptation_;
    ::webrtc::rtclog::BweProbeCluster* probe_cluster_;
    ::webrtc::rtclog::BweProbeResult* probe_result_;
    ::webrtc::rtclog::AlrState* alr_state_;
    ::webrtc::rtclog::IceCandidatePairConfig* ice_candidate_pair_config_;
    ::webrtc::rtclog::IceCandidatePairEvent* ice_candidate_pair_event_;
  } subtype_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RtpPacket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtpPacket) */ {
 public:
  RtpPacket();
  virtual ~RtpPacket();

  RtpPacket(const RtpPacket& from);

  inline RtpPacket& operator=(const RtpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RtpPacket(RtpPacket&& from) noexcept
    : RtpPacket() {
    *this = ::std::move(from);
  }

  inline RtpPacket& operator=(RtpPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RtpPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtpPacket* internal_default_instance() {
    return reinterpret_cast<const RtpPacket*>(
               &_RtpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RtpPacket* other);
  friend void swap(RtpPacket& a, RtpPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RtpPacket* New() const final {
    return CreateMaybeMessage<RtpPacket>(NULL);
  }

  RtpPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RtpPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RtpPacket& from);
  void MergeFrom(const RtpPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtpPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes header = 4;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 4;
  const ::std::string& header() const;
  void set_header(const ::std::string& value);
  #if LANG_CXX11
  void set_header(::std::string&& value);
  #endif
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  ::std::string* mutable_header();
  ::std::string* release_header();
  void set_allocated_header(::std::string* header);

  // optional bool incoming = 1;
  bool has_incoming() const;
  void clear_incoming();
  static const int kIncomingFieldNumber = 1;
  bool incoming() const;
  void set_incoming(bool value);

  // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_type() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_type();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTypeFieldNumber = 2;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::webrtc::rtclog::MediaType type() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_type(::webrtc::rtclog::MediaType value);

  // optional uint32 packet_length = 3;
  bool has_packet_length() const;
  void clear_packet_length();
  static const int kPacketLengthFieldNumber = 3;
  ::google::protobuf::uint32 packet_length() const;
  void set_packet_length(::google::protobuf::uint32 value);

  // optional int32 probe_cluster_id = 5;
  bool has_probe_cluster_id() const;
  void clear_probe_cluster_id();
  static const int kProbeClusterIdFieldNumber = 5;
  ::google::protobuf::int32 probe_cluster_id() const;
  void set_probe_cluster_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtpPacket)
 private:
  void set_has_incoming();
  void clear_has_incoming();
  void set_has_type();
  void clear_has_type();
  void set_has_packet_length();
  void clear_has_packet_length();
  void set_has_header();
  void clear_has_header();
  void set_has_probe_cluster_id();
  void clear_has_probe_cluster_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr header_;
  bool incoming_;
  int type_;
  ::google::protobuf::uint32 packet_length_;
  ::google::protobuf::int32 probe_cluster_id_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RtcpPacket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtcpPacket) */ {
 public:
  RtcpPacket();
  virtual ~RtcpPacket();

  RtcpPacket(const RtcpPacket& from);

  inline RtcpPacket& operator=(const RtcpPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RtcpPacket(RtcpPacket&& from) noexcept
    : RtcpPacket() {
    *this = ::std::move(from);
  }

  inline RtcpPacket& operator=(RtcpPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RtcpPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtcpPacket* internal_default_instance() {
    return reinterpret_cast<const RtcpPacket*>(
               &_RtcpPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RtcpPacket* other);
  friend void swap(RtcpPacket& a, RtcpPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RtcpPacket* New() const final {
    return CreateMaybeMessage<RtcpPacket>(NULL);
  }

  RtcpPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RtcpPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RtcpPacket& from);
  void MergeFrom(const RtcpPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtcpPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes packet_data = 3;
  bool has_packet_data() const;
  void clear_packet_data();
  static const int kPacketDataFieldNumber = 3;
  const ::std::string& packet_data() const;
  void set_packet_data(const ::std::string& value);
  #if LANG_CXX11
  void set_packet_data(::std::string&& value);
  #endif
  void set_packet_data(const char* value);
  void set_packet_data(const void* value, size_t size);
  ::std::string* mutable_packet_data();
  ::std::string* release_packet_data();
  void set_allocated_packet_data(::std::string* packet_data);

  // optional bool incoming = 1;
  bool has_incoming() const;
  void clear_incoming();
  static const int kIncomingFieldNumber = 1;
  bool incoming() const;
  void set_incoming(bool value);

  // optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_type() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_type();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kTypeFieldNumber = 2;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::webrtc::rtclog::MediaType type() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_type(::webrtc::rtclog::MediaType value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtcpPacket)
 private:
  void set_has_incoming();
  void clear_has_incoming();
  void set_has_type();
  void clear_has_type();
  void set_has_packet_data();
  void clear_has_packet_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr packet_data_;
  bool incoming_;
  int type_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioPlayoutEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.AudioPlayoutEvent) */ {
 public:
  AudioPlayoutEvent();
  virtual ~AudioPlayoutEvent();

  AudioPlayoutEvent(const AudioPlayoutEvent& from);

  inline AudioPlayoutEvent& operator=(const AudioPlayoutEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioPlayoutEvent(AudioPlayoutEvent&& from) noexcept
    : AudioPlayoutEvent() {
    *this = ::std::move(from);
  }

  inline AudioPlayoutEvent& operator=(AudioPlayoutEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioPlayoutEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioPlayoutEvent* internal_default_instance() {
    return reinterpret_cast<const AudioPlayoutEvent*>(
               &_AudioPlayoutEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AudioPlayoutEvent* other);
  friend void swap(AudioPlayoutEvent& a, AudioPlayoutEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioPlayoutEvent* New() const final {
    return CreateMaybeMessage<AudioPlayoutEvent>(NULL);
  }

  AudioPlayoutEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioPlayoutEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AudioPlayoutEvent& from);
  void MergeFrom(const AudioPlayoutEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioPlayoutEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 local_ssrc = 2;
  bool has_local_ssrc() const;
  void clear_local_ssrc();
  static const int kLocalSsrcFieldNumber = 2;
  ::google::protobuf::uint32 local_ssrc() const;
  void set_local_ssrc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioPlayoutEvent)
 private:
  void set_has_local_ssrc();
  void clear_has_local_ssrc();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 local_ssrc_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LossBasedBweUpdate : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.LossBasedBweUpdate) */ {
 public:
  LossBasedBweUpdate();
  virtual ~LossBasedBweUpdate();

  LossBasedBweUpdate(const LossBasedBweUpdate& from);

  inline LossBasedBweUpdate& operator=(const LossBasedBweUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LossBasedBweUpdate(LossBasedBweUpdate&& from) noexcept
    : LossBasedBweUpdate() {
    *this = ::std::move(from);
  }

  inline LossBasedBweUpdate& operator=(LossBasedBweUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LossBasedBweUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossBasedBweUpdate* internal_default_instance() {
    return reinterpret_cast<const LossBasedBweUpdate*>(
               &_LossBasedBweUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(LossBasedBweUpdate* other);
  friend void swap(LossBasedBweUpdate& a, LossBasedBweUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LossBasedBweUpdate* New() const final {
    return CreateMaybeMessage<LossBasedBweUpdate>(NULL);
  }

  LossBasedBweUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LossBasedBweUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LossBasedBweUpdate& from);
  void MergeFrom(const LossBasedBweUpdate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LossBasedBweUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bitrate_bps = 1;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 1;
  ::google::protobuf::int32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::int32 value);

  // optional uint32 fraction_loss = 2;
  bool has_fraction_loss() const;
  void clear_fraction_loss();
  static const int kFractionLossFieldNumber = 2;
  ::google::protobuf::uint32 fraction_loss() const;
  void set_fraction_loss(::google::protobuf::uint32 value);

  // optional int32 total_packets = 3;
  bool has_total_packets() const;
  void clear_total_packets();
  static const int kTotalPacketsFieldNumber = 3;
  ::google::protobuf::int32 total_packets() const;
  void set_total_packets(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.LossBasedBweUpdate)
 private:
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();
  void set_has_fraction_loss();
  void clear_has_fraction_loss();
  void set_has_total_packets();
  void clear_has_total_packets();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 bitrate_bps_;
  ::google::protobuf::uint32 fraction_loss_;
  ::google::protobuf::int32 total_packets_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelayBasedBweUpdate : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.DelayBasedBweUpdate) */ {
 public:
  DelayBasedBweUpdate();
  virtual ~DelayBasedBweUpdate();

  DelayBasedBweUpdate(const DelayBasedBweUpdate& from);

  inline DelayBasedBweUpdate& operator=(const DelayBasedBweUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelayBasedBweUpdate(DelayBasedBweUpdate&& from) noexcept
    : DelayBasedBweUpdate() {
    *this = ::std::move(from);
  }

  inline DelayBasedBweUpdate& operator=(DelayBasedBweUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DelayBasedBweUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelayBasedBweUpdate* internal_default_instance() {
    return reinterpret_cast<const DelayBasedBweUpdate*>(
               &_DelayBasedBweUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DelayBasedBweUpdate* other);
  friend void swap(DelayBasedBweUpdate& a, DelayBasedBweUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelayBasedBweUpdate* New() const final {
    return CreateMaybeMessage<DelayBasedBweUpdate>(NULL);
  }

  DelayBasedBweUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelayBasedBweUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DelayBasedBweUpdate& from);
  void MergeFrom(const DelayBasedBweUpdate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DelayBasedBweUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DelayBasedBweUpdate_DetectorState DetectorState;
  static const DetectorState BWE_NORMAL =
    DelayBasedBweUpdate_DetectorState_BWE_NORMAL;
  static const DetectorState BWE_UNDERUSING =
    DelayBasedBweUpdate_DetectorState_BWE_UNDERUSING;
  static const DetectorState BWE_OVERUSING =
    DelayBasedBweUpdate_DetectorState_BWE_OVERUSING;
  static inline bool DetectorState_IsValid(int value) {
    return DelayBasedBweUpdate_DetectorState_IsValid(value);
  }
  static const DetectorState DetectorState_MIN =
    DelayBasedBweUpdate_DetectorState_DetectorState_MIN;
  static const DetectorState DetectorState_MAX =
    DelayBasedBweUpdate_DetectorState_DetectorState_MAX;
  static const int DetectorState_ARRAYSIZE =
    DelayBasedBweUpdate_DetectorState_DetectorState_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 bitrate_bps = 1;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 1;
  ::google::protobuf::int32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::int32 value);

  // optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
  bool has_detector_state() const;
  void clear_detector_state();
  static const int kDetectorStateFieldNumber = 2;
  ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState detector_state() const;
  void set_detector_state(::webrtc::rtclog::DelayBasedBweUpdate_DetectorState value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.DelayBasedBweUpdate)
 private:
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();
  void set_has_detector_state();
  void clear_has_detector_state();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 bitrate_bps_;
  int detector_state_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoReceiveConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.VideoReceiveConfig) */ {
 public:
  VideoReceiveConfig();
  virtual ~VideoReceiveConfig();

  VideoReceiveConfig(const VideoReceiveConfig& from);

  inline VideoReceiveConfig& operator=(const VideoReceiveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoReceiveConfig(VideoReceiveConfig&& from) noexcept
    : VideoReceiveConfig() {
    *this = ::std::move(from);
  }

  inline VideoReceiveConfig& operator=(VideoReceiveConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VideoReceiveConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoReceiveConfig* internal_default_instance() {
    return reinterpret_cast<const VideoReceiveConfig*>(
               &_VideoReceiveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(VideoReceiveConfig* other);
  friend void swap(VideoReceiveConfig& a, VideoReceiveConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoReceiveConfig* New() const final {
    return CreateMaybeMessage<VideoReceiveConfig>(NULL);
  }

  VideoReceiveConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoReceiveConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const VideoReceiveConfig& from);
  void MergeFrom(const VideoReceiveConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoReceiveConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef VideoReceiveConfig_RtcpMode RtcpMode;
  static const RtcpMode RTCP_COMPOUND =
    VideoReceiveConfig_RtcpMode_RTCP_COMPOUND;
  static const RtcpMode RTCP_REDUCEDSIZE =
    VideoReceiveConfig_RtcpMode_RTCP_REDUCEDSIZE;
  static inline bool RtcpMode_IsValid(int value) {
    return VideoReceiveConfig_RtcpMode_IsValid(value);
  }
  static const RtcpMode RtcpMode_MIN =
    VideoReceiveConfig_RtcpMode_RtcpMode_MIN;
  static const RtcpMode RtcpMode_MAX =
    VideoReceiveConfig_RtcpMode_RtcpMode_MAX;
  static const int RtcpMode_ARRAYSIZE =
    VideoReceiveConfig_RtcpMode_RtcpMode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
  int rtx_map_size() const;
  void clear_rtx_map();
  static const int kRtxMapFieldNumber = 5;
  ::webrtc::rtclog::RtxMap* mutable_rtx_map(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtxMap >*
      mutable_rtx_map();
  const ::webrtc::rtclog::RtxMap& rtx_map(int index) const;
  ::webrtc::rtclog::RtxMap* add_rtx_map();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtxMap >&
      rtx_map() const;

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
  int header_extensions_size() const;
  void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 6;
  ::webrtc::rtclog::RtpHeaderExtension* mutable_header_extensions(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >*
      mutable_header_extensions();
  const ::webrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  ::webrtc::rtclog::RtpHeaderExtension* add_header_extensions();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >&
      header_extensions() const;

  // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
  int decoders_size() const;
  void clear_decoders();
  static const int kDecodersFieldNumber = 7;
  ::webrtc::rtclog::DecoderConfig* mutable_decoders(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::DecoderConfig >*
      mutable_decoders();
  const ::webrtc::rtclog::DecoderConfig& decoders(int index) const;
  ::webrtc::rtclog::DecoderConfig* add_decoders();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::DecoderConfig >&
      decoders() const;

  // optional uint32 remote_ssrc = 1;
  bool has_remote_ssrc() const;
  void clear_remote_ssrc();
  static const int kRemoteSsrcFieldNumber = 1;
  ::google::protobuf::uint32 remote_ssrc() const;
  void set_remote_ssrc(::google::protobuf::uint32 value);

  // optional uint32 local_ssrc = 2;
  bool has_local_ssrc() const;
  void clear_local_ssrc();
  static const int kLocalSsrcFieldNumber = 2;
  ::google::protobuf::uint32 local_ssrc() const;
  void set_local_ssrc(::google::protobuf::uint32 value);

  // optional bool remb = 4;
  bool has_remb() const;
  void clear_remb();
  static const int kRembFieldNumber = 4;
  bool remb() const;
  void set_remb(bool value);

  // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
  bool has_rtcp_mode() const;
  void clear_rtcp_mode();
  static const int kRtcpModeFieldNumber = 3;
  ::webrtc::rtclog::VideoReceiveConfig_RtcpMode rtcp_mode() const;
  void set_rtcp_mode(::webrtc::rtclog::VideoReceiveConfig_RtcpMode value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.VideoReceiveConfig)
 private:
  void set_has_remote_ssrc();
  void clear_has_remote_ssrc();
  void set_has_local_ssrc();
  void clear_has_local_ssrc();
  void set_has_rtcp_mode();
  void clear_has_rtcp_mode();
  void set_has_remb();
  void clear_has_remb();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtxMap > rtx_map_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension > header_extensions_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::DecoderConfig > decoders_;
  ::google::protobuf::uint32 remote_ssrc_;
  ::google::protobuf::uint32 local_ssrc_;
  bool remb_;
  int rtcp_mode_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecoderConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.DecoderConfig) */ {
 public:
  DecoderConfig();
  virtual ~DecoderConfig();

  DecoderConfig(const DecoderConfig& from);

  inline DecoderConfig& operator=(const DecoderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecoderConfig(DecoderConfig&& from) noexcept
    : DecoderConfig() {
    *this = ::std::move(from);
  }

  inline DecoderConfig& operator=(DecoderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DecoderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecoderConfig* internal_default_instance() {
    return reinterpret_cast<const DecoderConfig*>(
               &_DecoderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DecoderConfig* other);
  friend void swap(DecoderConfig& a, DecoderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecoderConfig* New() const final {
    return CreateMaybeMessage<DecoderConfig>(NULL);
  }

  DecoderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DecoderConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DecoderConfig& from);
  void MergeFrom(const DecoderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DecoderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 payload_type = 2;
  bool has_payload_type() const;
  void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 2;
  ::google::protobuf::int32 payload_type() const;
  void set_payload_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.DecoderConfig)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_payload_type();
  void clear_has_payload_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 payload_type_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RtpHeaderExtension : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtpHeaderExtension) */ {
 public:
  RtpHeaderExtension();
  virtual ~RtpHeaderExtension();

  RtpHeaderExtension(const RtpHeaderExtension& from);

  inline RtpHeaderExtension& operator=(const RtpHeaderExtension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RtpHeaderExtension(RtpHeaderExtension&& from) noexcept
    : RtpHeaderExtension() {
    *this = ::std::move(from);
  }

  inline RtpHeaderExtension& operator=(RtpHeaderExtension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RtpHeaderExtension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtpHeaderExtension* internal_default_instance() {
    return reinterpret_cast<const RtpHeaderExtension*>(
               &_RtpHeaderExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RtpHeaderExtension* other);
  friend void swap(RtpHeaderExtension& a, RtpHeaderExtension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RtpHeaderExtension* New() const final {
    return CreateMaybeMessage<RtpHeaderExtension>(NULL);
  }

  RtpHeaderExtension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RtpHeaderExtension>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RtpHeaderExtension& from);
  void MergeFrom(const RtpHeaderExtension& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtpHeaderExtension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtpHeaderExtension)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RtxConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtxConfig) */ {
 public:
  RtxConfig();
  virtual ~RtxConfig();

  RtxConfig(const RtxConfig& from);

  inline RtxConfig& operator=(const RtxConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RtxConfig(RtxConfig&& from) noexcept
    : RtxConfig() {
    *this = ::std::move(from);
  }

  inline RtxConfig& operator=(RtxConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RtxConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtxConfig* internal_default_instance() {
    return reinterpret_cast<const RtxConfig*>(
               &_RtxConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RtxConfig* other);
  friend void swap(RtxConfig& a, RtxConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RtxConfig* New() const final {
    return CreateMaybeMessage<RtxConfig>(NULL);
  }

  RtxConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RtxConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RtxConfig& from);
  void MergeFrom(const RtxConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtxConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rtx_ssrc = 1;
  bool has_rtx_ssrc() const;
  void clear_rtx_ssrc();
  static const int kRtxSsrcFieldNumber = 1;
  ::google::protobuf::uint32 rtx_ssrc() const;
  void set_rtx_ssrc(::google::protobuf::uint32 value);

  // optional int32 rtx_payload_type = 2;
  bool has_rtx_payload_type() const;
  void clear_rtx_payload_type();
  static const int kRtxPayloadTypeFieldNumber = 2;
  ::google::protobuf::int32 rtx_payload_type() const;
  void set_rtx_payload_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtxConfig)
 private:
  void set_has_rtx_ssrc();
  void clear_has_rtx_ssrc();
  void set_has_rtx_payload_type();
  void clear_has_rtx_payload_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 rtx_ssrc_;
  ::google::protobuf::int32 rtx_payload_type_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RtxMap : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.RtxMap) */ {
 public:
  RtxMap();
  virtual ~RtxMap();

  RtxMap(const RtxMap& from);

  inline RtxMap& operator=(const RtxMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RtxMap(RtxMap&& from) noexcept
    : RtxMap() {
    *this = ::std::move(from);
  }

  inline RtxMap& operator=(RtxMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RtxMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtxMap* internal_default_instance() {
    return reinterpret_cast<const RtxMap*>(
               &_RtxMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RtxMap* other);
  friend void swap(RtxMap& a, RtxMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RtxMap* New() const final {
    return CreateMaybeMessage<RtxMap>(NULL);
  }

  RtxMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RtxMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RtxMap& from);
  void MergeFrom(const RtxMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RtxMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .webrtc.rtclog.RtxConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  private:
  const ::webrtc::rtclog::RtxConfig& _internal_config() const;
  public:
  const ::webrtc::rtclog::RtxConfig& config() const;
  ::webrtc::rtclog::RtxConfig* release_config();
  ::webrtc::rtclog::RtxConfig* mutable_config();
  void set_allocated_config(::webrtc::rtclog::RtxConfig* config);

  // optional int32 payload_type = 1;
  bool has_payload_type() const;
  void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 1;
  ::google::protobuf::int32 payload_type() const;
  void set_payload_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtxMap)
 private:
  void set_has_payload_type();
  void clear_has_payload_type();
  void set_has_config();
  void clear_has_config();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::webrtc::rtclog::RtxConfig* config_;
  ::google::protobuf::int32 payload_type_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoSendConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.VideoSendConfig) */ {
 public:
  VideoSendConfig();
  virtual ~VideoSendConfig();

  VideoSendConfig(const VideoSendConfig& from);

  inline VideoSendConfig& operator=(const VideoSendConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoSendConfig(VideoSendConfig&& from) noexcept
    : VideoSendConfig() {
    *this = ::std::move(from);
  }

  inline VideoSendConfig& operator=(VideoSendConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VideoSendConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoSendConfig* internal_default_instance() {
    return reinterpret_cast<const VideoSendConfig*>(
               &_VideoSendConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(VideoSendConfig* other);
  friend void swap(VideoSendConfig& a, VideoSendConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoSendConfig* New() const final {
    return CreateMaybeMessage<VideoSendConfig>(NULL);
  }

  VideoSendConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoSendConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const VideoSendConfig& from);
  void MergeFrom(const VideoSendConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSendConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ssrcs = 1;
  int ssrcs_size() const;
  void clear_ssrcs();
  static const int kSsrcsFieldNumber = 1;
  ::google::protobuf::uint32 ssrcs(int index) const;
  void set_ssrcs(int index, ::google::protobuf::uint32 value);
  void add_ssrcs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ssrcs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ssrcs();

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  int header_extensions_size() const;
  void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 2;
  ::webrtc::rtclog::RtpHeaderExtension* mutable_header_extensions(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >*
      mutable_header_extensions();
  const ::webrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  ::webrtc::rtclog::RtpHeaderExtension* add_header_extensions();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >&
      header_extensions() const;

  // repeated uint32 rtx_ssrcs = 3;
  int rtx_ssrcs_size() const;
  void clear_rtx_ssrcs();
  static const int kRtxSsrcsFieldNumber = 3;
  ::google::protobuf::uint32 rtx_ssrcs(int index) const;
  void set_rtx_ssrcs(int index, ::google::protobuf::uint32 value);
  void add_rtx_ssrcs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rtx_ssrcs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rtx_ssrcs();

  // optional .webrtc.rtclog.EncoderConfig encoder = 5;
  bool has_encoder() const;
  void clear_encoder();
  static const int kEncoderFieldNumber = 5;
  private:
  const ::webrtc::rtclog::EncoderConfig& _internal_encoder() const;
  public:
  const ::webrtc::rtclog::EncoderConfig& encoder() const;
  ::webrtc::rtclog::EncoderConfig* release_encoder();
  ::webrtc::rtclog::EncoderConfig* mutable_encoder();
  void set_allocated_encoder(::webrtc::rtclog::EncoderConfig* encoder);

  // optional int32 rtx_payload_type = 4;
  bool has_rtx_payload_type() const;
  void clear_rtx_payload_type();
  static const int kRtxPayloadTypeFieldNumber = 4;
  ::google::protobuf::int32 rtx_payload_type() const;
  void set_rtx_payload_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.VideoSendConfig)
 private:
  void set_has_rtx_payload_type();
  void clear_has_rtx_payload_type();
  void set_has_encoder();
  void clear_has_encoder();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ssrcs_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension > header_extensions_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rtx_ssrcs_;
  ::webrtc::rtclog::EncoderConfig* encoder_;
  ::google::protobuf::int32 rtx_payload_type_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncoderConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.EncoderConfig) */ {
 public:
  EncoderConfig();
  virtual ~EncoderConfig();

  EncoderConfig(const EncoderConfig& from);

  inline EncoderConfig& operator=(const EncoderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncoderConfig(EncoderConfig&& from) noexcept
    : EncoderConfig() {
    *this = ::std::move(from);
  }

  inline EncoderConfig& operator=(EncoderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EncoderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncoderConfig* internal_default_instance() {
    return reinterpret_cast<const EncoderConfig*>(
               &_EncoderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(EncoderConfig* other);
  friend void swap(EncoderConfig& a, EncoderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncoderConfig* New() const final {
    return CreateMaybeMessage<EncoderConfig>(NULL);
  }

  EncoderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EncoderConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EncoderConfig& from);
  void MergeFrom(const EncoderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncoderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 payload_type = 2;
  bool has_payload_type() const;
  void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 2;
  ::google::protobuf::int32 payload_type() const;
  void set_payload_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.EncoderConfig)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_payload_type();
  void clear_has_payload_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 payload_type_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioReceiveConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.AudioReceiveConfig) */ {
 public:
  AudioReceiveConfig();
  virtual ~AudioReceiveConfig();

  AudioReceiveConfig(const AudioReceiveConfig& from);

  inline AudioReceiveConfig& operator=(const AudioReceiveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioReceiveConfig(AudioReceiveConfig&& from) noexcept
    : AudioReceiveConfig() {
    *this = ::std::move(from);
  }

  inline AudioReceiveConfig& operator=(AudioReceiveConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioReceiveConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioReceiveConfig* internal_default_instance() {
    return reinterpret_cast<const AudioReceiveConfig*>(
               &_AudioReceiveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AudioReceiveConfig* other);
  friend void swap(AudioReceiveConfig& a, AudioReceiveConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioReceiveConfig* New() const final {
    return CreateMaybeMessage<AudioReceiveConfig>(NULL);
  }

  AudioReceiveConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioReceiveConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AudioReceiveConfig& from);
  void MergeFrom(const AudioReceiveConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioReceiveConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
  int header_extensions_size() const;
  void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 3;
  ::webrtc::rtclog::RtpHeaderExtension* mutable_header_extensions(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >*
      mutable_header_extensions();
  const ::webrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  ::webrtc::rtclog::RtpHeaderExtension* add_header_extensions();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >&
      header_extensions() const;

  // optional uint32 remote_ssrc = 1;
  bool has_remote_ssrc() const;
  void clear_remote_ssrc();
  static const int kRemoteSsrcFieldNumber = 1;
  ::google::protobuf::uint32 remote_ssrc() const;
  void set_remote_ssrc(::google::protobuf::uint32 value);

  // optional uint32 local_ssrc = 2;
  bool has_local_ssrc() const;
  void clear_local_ssrc();
  static const int kLocalSsrcFieldNumber = 2;
  ::google::protobuf::uint32 local_ssrc() const;
  void set_local_ssrc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioReceiveConfig)
 private:
  void set_has_remote_ssrc();
  void clear_has_remote_ssrc();
  void set_has_local_ssrc();
  void clear_has_local_ssrc();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension > header_extensions_;
  ::google::protobuf::uint32 remote_ssrc_;
  ::google::protobuf::uint32 local_ssrc_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioSendConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.AudioSendConfig) */ {
 public:
  AudioSendConfig();
  virtual ~AudioSendConfig();

  AudioSendConfig(const AudioSendConfig& from);

  inline AudioSendConfig& operator=(const AudioSendConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioSendConfig(AudioSendConfig&& from) noexcept
    : AudioSendConfig() {
    *this = ::std::move(from);
  }

  inline AudioSendConfig& operator=(AudioSendConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioSendConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioSendConfig* internal_default_instance() {
    return reinterpret_cast<const AudioSendConfig*>(
               &_AudioSendConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AudioSendConfig* other);
  friend void swap(AudioSendConfig& a, AudioSendConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioSendConfig* New() const final {
    return CreateMaybeMessage<AudioSendConfig>(NULL);
  }

  AudioSendConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioSendConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AudioSendConfig& from);
  void MergeFrom(const AudioSendConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioSendConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  int header_extensions_size() const;
  void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 2;
  ::webrtc::rtclog::RtpHeaderExtension* mutable_header_extensions(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >*
      mutable_header_extensions();
  const ::webrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  ::webrtc::rtclog::RtpHeaderExtension* add_header_extensions();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >&
      header_extensions() const;

  // optional uint32 ssrc = 1;
  bool has_ssrc() const;
  void clear_ssrc();
  static const int kSsrcFieldNumber = 1;
  ::google::protobuf::uint32 ssrc() const;
  void set_ssrc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioSendConfig)
 private:
  void set_has_ssrc();
  void clear_has_ssrc();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension > header_extensions_;
  ::google::protobuf::uint32 ssrc_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioNetworkAdaptation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.AudioNetworkAdaptation) */ {
 public:
  AudioNetworkAdaptation();
  virtual ~AudioNetworkAdaptation();

  AudioNetworkAdaptation(const AudioNetworkAdaptation& from);

  inline AudioNetworkAdaptation& operator=(const AudioNetworkAdaptation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioNetworkAdaptation(AudioNetworkAdaptation&& from) noexcept
    : AudioNetworkAdaptation() {
    *this = ::std::move(from);
  }

  inline AudioNetworkAdaptation& operator=(AudioNetworkAdaptation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioNetworkAdaptation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioNetworkAdaptation* internal_default_instance() {
    return reinterpret_cast<const AudioNetworkAdaptation*>(
               &_AudioNetworkAdaptation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AudioNetworkAdaptation* other);
  friend void swap(AudioNetworkAdaptation& a, AudioNetworkAdaptation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioNetworkAdaptation* New() const final {
    return CreateMaybeMessage<AudioNetworkAdaptation>(NULL);
  }

  AudioNetworkAdaptation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioNetworkAdaptation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AudioNetworkAdaptation& from);
  void MergeFrom(const AudioNetworkAdaptation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioNetworkAdaptation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bitrate_bps = 1;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 1;
  ::google::protobuf::int32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::int32 value);

  // optional int32 frame_length_ms = 2;
  bool has_frame_length_ms() const;
  void clear_frame_length_ms();
  static const int kFrameLengthMsFieldNumber = 2;
  ::google::protobuf::int32 frame_length_ms() const;
  void set_frame_length_ms(::google::protobuf::int32 value);

  // optional float uplink_packet_loss_fraction = 3;
  bool has_uplink_packet_loss_fraction() const;
  void clear_uplink_packet_loss_fraction();
  static const int kUplinkPacketLossFractionFieldNumber = 3;
  float uplink_packet_loss_fraction() const;
  void set_uplink_packet_loss_fraction(float value);

  // optional bool enable_fec = 4;
  bool has_enable_fec() const;
  void clear_enable_fec();
  static const int kEnableFecFieldNumber = 4;
  bool enable_fec() const;
  void set_enable_fec(bool value);

  // optional bool enable_dtx = 5;
  bool has_enable_dtx() const;
  void clear_enable_dtx();
  static const int kEnableDtxFieldNumber = 5;
  bool enable_dtx() const;
  void set_enable_dtx(bool value);

  // optional uint32 num_channels = 6;
  bool has_num_channels() const;
  void clear_num_channels();
  static const int kNumChannelsFieldNumber = 6;
  ::google::protobuf::uint32 num_channels() const;
  void set_num_channels(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioNetworkAdaptation)
 private:
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();
  void set_has_frame_length_ms();
  void clear_has_frame_length_ms();
  void set_has_uplink_packet_loss_fraction();
  void clear_has_uplink_packet_loss_fraction();
  void set_has_enable_fec();
  void clear_has_enable_fec();
  void set_has_enable_dtx();
  void clear_has_enable_dtx();
  void set_has_num_channels();
  void clear_has_num_channels();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 bitrate_bps_;
  ::google::protobuf::int32 frame_length_ms_;
  float uplink_packet_loss_fraction_;
  bool enable_fec_;
  bool enable_dtx_;
  ::google::protobuf::uint32 num_channels_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BweProbeCluster : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.BweProbeCluster) */ {
 public:
  BweProbeCluster();
  virtual ~BweProbeCluster();

  BweProbeCluster(const BweProbeCluster& from);

  inline BweProbeCluster& operator=(const BweProbeCluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BweProbeCluster(BweProbeCluster&& from) noexcept
    : BweProbeCluster() {
    *this = ::std::move(from);
  }

  inline BweProbeCluster& operator=(BweProbeCluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BweProbeCluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BweProbeCluster* internal_default_instance() {
    return reinterpret_cast<const BweProbeCluster*>(
               &_BweProbeCluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BweProbeCluster* other);
  friend void swap(BweProbeCluster& a, BweProbeCluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BweProbeCluster* New() const final {
    return CreateMaybeMessage<BweProbeCluster>(NULL);
  }

  BweProbeCluster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BweProbeCluster>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BweProbeCluster& from);
  void MergeFrom(const BweProbeCluster& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BweProbeCluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 bitrate_bps = 2;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 2;
  ::google::protobuf::int32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::int32 value);

  // optional uint32 min_packets = 3;
  bool has_min_packets() const;
  void clear_min_packets();
  static const int kMinPacketsFieldNumber = 3;
  ::google::protobuf::uint32 min_packets() const;
  void set_min_packets(::google::protobuf::uint32 value);

  // optional uint32 min_bytes = 4;
  bool has_min_bytes() const;
  void clear_min_bytes();
  static const int kMinBytesFieldNumber = 4;
  ::google::protobuf::uint32 min_bytes() const;
  void set_min_bytes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.BweProbeCluster)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();
  void set_has_min_packets();
  void clear_has_min_packets();
  void set_has_min_bytes();
  void clear_has_min_bytes();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 bitrate_bps_;
  ::google::protobuf::uint32 min_packets_;
  ::google::protobuf::uint32 min_bytes_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BweProbeResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.BweProbeResult) */ {
 public:
  BweProbeResult();
  virtual ~BweProbeResult();

  BweProbeResult(const BweProbeResult& from);

  inline BweProbeResult& operator=(const BweProbeResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BweProbeResult(BweProbeResult&& from) noexcept
    : BweProbeResult() {
    *this = ::std::move(from);
  }

  inline BweProbeResult& operator=(BweProbeResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BweProbeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BweProbeResult* internal_default_instance() {
    return reinterpret_cast<const BweProbeResult*>(
               &_BweProbeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BweProbeResult* other);
  friend void swap(BweProbeResult& a, BweProbeResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BweProbeResult* New() const final {
    return CreateMaybeMessage<BweProbeResult>(NULL);
  }

  BweProbeResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BweProbeResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BweProbeResult& from);
  void MergeFrom(const BweProbeResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BweProbeResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BweProbeResult_ResultType ResultType;
  static const ResultType SUCCESS =
    BweProbeResult_ResultType_SUCCESS;
  static const ResultType INVALID_SEND_RECEIVE_INTERVAL =
    BweProbeResult_ResultType_INVALID_SEND_RECEIVE_INTERVAL;
  static const ResultType INVALID_SEND_RECEIVE_RATIO =
    BweProbeResult_ResultType_INVALID_SEND_RECEIVE_RATIO;
  static const ResultType TIMEOUT =
    BweProbeResult_ResultType_TIMEOUT;
  static inline bool ResultType_IsValid(int value) {
    return BweProbeResult_ResultType_IsValid(value);
  }
  static const ResultType ResultType_MIN =
    BweProbeResult_ResultType_ResultType_MIN;
  static const ResultType ResultType_MAX =
    BweProbeResult_ResultType_ResultType_MAX;
  static const int ResultType_ARRAYSIZE =
    BweProbeResult_ResultType_ResultType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::webrtc::rtclog::BweProbeResult_ResultType result() const;
  void set_result(::webrtc::rtclog::BweProbeResult_ResultType value);

  // optional int32 bitrate_bps = 3;
  bool has_bitrate_bps() const;
  void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 3;
  ::google::protobuf::int32 bitrate_bps() const;
  void set_bitrate_bps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.BweProbeResult)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_result();
  void clear_has_result();
  void set_has_bitrate_bps();
  void clear_has_bitrate_bps();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  int result_;
  ::google::protobuf::int32 bitrate_bps_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AlrState : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.AlrState) */ {
 public:
  AlrState();
  virtual ~AlrState();

  AlrState(const AlrState& from);

  inline AlrState& operator=(const AlrState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlrState(AlrState&& from) noexcept
    : AlrState() {
    *this = ::std::move(from);
  }

  inline AlrState& operator=(AlrState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AlrState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlrState* internal_default_instance() {
    return reinterpret_cast<const AlrState*>(
               &_AlrState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(AlrState* other);
  friend void swap(AlrState& a, AlrState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlrState* New() const final {
    return CreateMaybeMessage<AlrState>(NULL);
  }

  AlrState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlrState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AlrState& from);
  void MergeFrom(const AlrState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlrState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool in_alr = 1;
  bool has_in_alr() const;
  void clear_in_alr();
  static const int kInAlrFieldNumber = 1;
  bool in_alr() const;
  void set_in_alr(bool value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AlrState)
 private:
  void set_has_in_alr();
  void clear_has_in_alr();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool in_alr_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IceCandidatePairConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.IceCandidatePairConfig) */ {
 public:
  IceCandidatePairConfig();
  virtual ~IceCandidatePairConfig();

  IceCandidatePairConfig(const IceCandidatePairConfig& from);

  inline IceCandidatePairConfig& operator=(const IceCandidatePairConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IceCandidatePairConfig(IceCandidatePairConfig&& from) noexcept
    : IceCandidatePairConfig() {
    *this = ::std::move(from);
  }

  inline IceCandidatePairConfig& operator=(IceCandidatePairConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IceCandidatePairConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IceCandidatePairConfig* internal_default_instance() {
    return reinterpret_cast<const IceCandidatePairConfig*>(
               &_IceCandidatePairConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(IceCandidatePairConfig* other);
  friend void swap(IceCandidatePairConfig& a, IceCandidatePairConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IceCandidatePairConfig* New() const final {
    return CreateMaybeMessage<IceCandidatePairConfig>(NULL);
  }

  IceCandidatePairConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IceCandidatePairConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IceCandidatePairConfig& from);
  void MergeFrom(const IceCandidatePairConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IceCandidatePairConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfigType;
  static const IceCandidatePairConfigType ADDED =
    IceCandidatePairConfig_IceCandidatePairConfigType_ADDED;
  static const IceCandidatePairConfigType UPDATED =
    IceCandidatePairConfig_IceCandidatePairConfigType_UPDATED;
  static const IceCandidatePairConfigType DESTROYED =
    IceCandidatePairConfig_IceCandidatePairConfigType_DESTROYED;
  static const IceCandidatePairConfigType SELECTED =
    IceCandidatePairConfig_IceCandidatePairConfigType_SELECTED;
  static inline bool IceCandidatePairConfigType_IsValid(int value) {
    return IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(value);
  }
  static const IceCandidatePairConfigType IceCandidatePairConfigType_MIN =
    IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MIN;
  static const IceCandidatePairConfigType IceCandidatePairConfigType_MAX =
    IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_MAX;
  static const int IceCandidatePairConfigType_ARRAYSIZE =
    IceCandidatePairConfig_IceCandidatePairConfigType_IceCandidatePairConfigType_ARRAYSIZE;

  typedef IceCandidatePairConfig_IceCandidateType IceCandidateType;
  static const IceCandidateType LOCAL =
    IceCandidatePairConfig_IceCandidateType_LOCAL;
  static const IceCandidateType STUN =
    IceCandidatePairConfig_IceCandidateType_STUN;
  static const IceCandidateType PRFLX =
    IceCandidatePairConfig_IceCandidateType_PRFLX;
  static const IceCandidateType RELAY =
    IceCandidatePairConfig_IceCandidateType_RELAY;
  static const IceCandidateType UNKNOWN_CANDIDATE_TYPE =
    IceCandidatePairConfig_IceCandidateType_UNKNOWN_CANDIDATE_TYPE;
  static inline bool IceCandidateType_IsValid(int value) {
    return IceCandidatePairConfig_IceCandidateType_IsValid(value);
  }
  static const IceCandidateType IceCandidateType_MIN =
    IceCandidatePairConfig_IceCandidateType_IceCandidateType_MIN;
  static const IceCandidateType IceCandidateType_MAX =
    IceCandidatePairConfig_IceCandidateType_IceCandidateType_MAX;
  static const int IceCandidateType_ARRAYSIZE =
    IceCandidatePairConfig_IceCandidateType_IceCandidateType_ARRAYSIZE;

  typedef IceCandidatePairConfig_Protocol Protocol;
  static const Protocol UDP =
    IceCandidatePairConfig_Protocol_UDP;
  static const Protocol TCP =
    IceCandidatePairConfig_Protocol_TCP;
  static const Protocol SSLTCP =
    IceCandidatePairConfig_Protocol_SSLTCP;
  static const Protocol TLS =
    IceCandidatePairConfig_Protocol_TLS;
  static const Protocol UNKNOWN_PROTOCOL =
    IceCandidatePairConfig_Protocol_UNKNOWN_PROTOCOL;
  static inline bool Protocol_IsValid(int value) {
    return IceCandidatePairConfig_Protocol_IsValid(value);
  }
  static const Protocol Protocol_MIN =
    IceCandidatePairConfig_Protocol_Protocol_MIN;
  static const Protocol Protocol_MAX =
    IceCandidatePairConfig_Protocol_Protocol_MAX;
  static const int Protocol_ARRAYSIZE =
    IceCandidatePairConfig_Protocol_Protocol_ARRAYSIZE;

  typedef IceCandidatePairConfig_AddressFamily AddressFamily;
  static const AddressFamily IPV4 =
    IceCandidatePairConfig_AddressFamily_IPV4;
  static const AddressFamily IPV6 =
    IceCandidatePairConfig_AddressFamily_IPV6;
  static const AddressFamily UNKNOWN_ADDRESS_FAMILY =
    IceCandidatePairConfig_AddressFamily_UNKNOWN_ADDRESS_FAMILY;
  static inline bool AddressFamily_IsValid(int value) {
    return IceCandidatePairConfig_AddressFamily_IsValid(value);
  }
  static const AddressFamily AddressFamily_MIN =
    IceCandidatePairConfig_AddressFamily_AddressFamily_MIN;
  static const AddressFamily AddressFamily_MAX =
    IceCandidatePairConfig_AddressFamily_AddressFamily_MAX;
  static const int AddressFamily_ARRAYSIZE =
    IceCandidatePairConfig_AddressFamily_AddressFamily_ARRAYSIZE;

  typedef IceCandidatePairConfig_NetworkType NetworkType;
  static const NetworkType ETHERNET =
    IceCandidatePairConfig_NetworkType_ETHERNET;
  static const NetworkType LOOPBACK =
    IceCandidatePairConfig_NetworkType_LOOPBACK;
  static const NetworkType WIFI =
    IceCandidatePairConfig_NetworkType_WIFI;
  static const NetworkType VPN =
    IceCandidatePairConfig_NetworkType_VPN;
  static const NetworkType CELLULAR =
    IceCandidatePairConfig_NetworkType_CELLULAR;
  static const NetworkType UNKNOWN_NETWORK_TYPE =
    IceCandidatePairConfig_NetworkType_UNKNOWN_NETWORK_TYPE;
  static inline bool NetworkType_IsValid(int value) {
    return IceCandidatePairConfig_NetworkType_IsValid(value);
  }
  static const NetworkType NetworkType_MIN =
    IceCandidatePairConfig_NetworkType_NetworkType_MIN;
  static const NetworkType NetworkType_MAX =
    IceCandidatePairConfig_NetworkType_NetworkType_MAX;
  static const int NetworkType_ARRAYSIZE =
    IceCandidatePairConfig_NetworkType_NetworkType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 1;
  bool has_config_type() const;
  void clear_config_type();
  static const int kConfigTypeFieldNumber = 1;
  ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType config_type() const;
  void set_config_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType value);

  // optional uint32 candidate_pair_id = 2;
  bool has_candidate_pair_id() const;
  void clear_candidate_pair_id();
  static const int kCandidatePairIdFieldNumber = 2;
  ::google::protobuf::uint32 candidate_pair_id() const;
  void set_candidate_pair_id(::google::protobuf::uint32 value);

  // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType local_candidate_type = 3;
  bool has_local_candidate_type() const;
  void clear_local_candidate_type();
  static const int kLocalCandidateTypeFieldNumber = 3;
  ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType local_candidate_type() const;
  void set_local_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value);

  // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol local_relay_protocol = 4;
  bool has_local_relay_protocol() const;
  void clear_local_relay_protocol();
  static const int kLocalRelayProtocolFieldNumber = 4;
  ::webrtc::rtclog::IceCandidatePairConfig_Protocol local_relay_protocol() const;
  void set_local_relay_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value);

  // optional .webrtc.rtclog.IceCandidatePairConfig.NetworkType local_network_type = 5;
  bool has_local_network_type() const;
  void clear_local_network_type();
  static const int kLocalNetworkTypeFieldNumber = 5;
  ::webrtc::rtclog::IceCandidatePairConfig_NetworkType local_network_type() const;
  void set_local_network_type(::webrtc::rtclog::IceCandidatePairConfig_NetworkType value);

  // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily local_address_family = 6;
  bool has_local_address_family() const;
  void clear_local_address_family();
  static const int kLocalAddressFamilyFieldNumber = 6;
  ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily local_address_family() const;
  void set_local_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value);

  // optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 7;
  bool has_remote_candidate_type() const;
  void clear_remote_candidate_type();
  static const int kRemoteCandidateTypeFieldNumber = 7;
  ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType remote_candidate_type() const;
  void set_remote_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value);

  // optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily remote_address_family = 8;
  bool has_remote_address_family() const;
  void clear_remote_address_family();
  static const int kRemoteAddressFamilyFieldNumber = 8;
  ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily remote_address_family() const;
  void set_remote_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value);

  // optional .webrtc.rtclog.IceCandidatePairConfig.Protocol candidate_pair_protocol = 9;
  bool has_candidate_pair_protocol() const;
  void clear_candidate_pair_protocol();
  static const int kCandidatePairProtocolFieldNumber = 9;
  ::webrtc::rtclog::IceCandidatePairConfig_Protocol candidate_pair_protocol() const;
  void set_candidate_pair_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.IceCandidatePairConfig)
 private:
  void set_has_config_type();
  void clear_has_config_type();
  void set_has_candidate_pair_id();
  void clear_has_candidate_pair_id();
  void set_has_local_candidate_type();
  void clear_has_local_candidate_type();
  void set_has_local_relay_protocol();
  void clear_has_local_relay_protocol();
  void set_has_local_network_type();
  void clear_has_local_network_type();
  void set_has_local_address_family();
  void clear_has_local_address_family();
  void set_has_remote_candidate_type();
  void clear_has_remote_candidate_type();
  void set_has_remote_address_family();
  void clear_has_remote_address_family();
  void set_has_candidate_pair_protocol();
  void clear_has_candidate_pair_protocol();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int config_type_;
  ::google::protobuf::uint32 candidate_pair_id_;
  int local_candidate_type_;
  int local_relay_protocol_;
  int local_network_type_;
  int local_address_family_;
  int remote_candidate_type_;
  int remote_address_family_;
  int candidate_pair_protocol_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IceCandidatePairEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.rtclog.IceCandidatePairEvent) */ {
 public:
  IceCandidatePairEvent();
  virtual ~IceCandidatePairEvent();

  IceCandidatePairEvent(const IceCandidatePairEvent& from);

  inline IceCandidatePairEvent& operator=(const IceCandidatePairEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IceCandidatePairEvent(IceCandidatePairEvent&& from) noexcept
    : IceCandidatePairEvent() {
    *this = ::std::move(from);
  }

  inline IceCandidatePairEvent& operator=(IceCandidatePairEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IceCandidatePairEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IceCandidatePairEvent* internal_default_instance() {
    return reinterpret_cast<const IceCandidatePairEvent*>(
               &_IceCandidatePairEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(IceCandidatePairEvent* other);
  friend void swap(IceCandidatePairEvent& a, IceCandidatePairEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IceCandidatePairEvent* New() const final {
    return CreateMaybeMessage<IceCandidatePairEvent>(NULL);
  }

  IceCandidatePairEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IceCandidatePairEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IceCandidatePairEvent& from);
  void MergeFrom(const IceCandidatePairEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IceCandidatePairEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEventType;
  static const IceCandidatePairEventType CHECK_SENT =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_SENT;
  static const IceCandidatePairEventType CHECK_RECEIVED =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RECEIVED;
  static const IceCandidatePairEventType CHECK_RESPONSE_SENT =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_SENT;
  static const IceCandidatePairEventType CHECK_RESPONSE_RECEIVED =
    IceCandidatePairEvent_IceCandidatePairEventType_CHECK_RESPONSE_RECEIVED;
  static inline bool IceCandidatePairEventType_IsValid(int value) {
    return IceCandidatePairEvent_IceCandidatePairEventType_IsValid(value);
  }
  static const IceCandidatePairEventType IceCandidatePairEventType_MIN =
    IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MIN;
  static const IceCandidatePairEventType IceCandidatePairEventType_MAX =
    IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_MAX;
  static const int IceCandidatePairEventType_ARRAYSIZE =
    IceCandidatePairEvent_IceCandidatePairEventType_IceCandidatePairEventType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .webrtc.rtclog.IceCandidatePairEvent.IceCandidatePairEventType event_type = 1;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType event_type() const;
  void set_event_type(::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType value);

  // optional uint32 candidate_pair_id = 2;
  bool has_candidate_pair_id() const;
  void clear_candidate_pair_id();
  static const int kCandidatePairIdFieldNumber = 2;
  ::google::protobuf::uint32 candidate_pair_id() const;
  void set_candidate_pair_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.IceCandidatePairEvent)
 private:
  void set_has_event_type();
  void clear_has_event_type();
  void set_has_candidate_pair_id();
  void clear_has_candidate_pair_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int event_type_;
  ::google::protobuf::uint32 candidate_pair_id_;
  friend struct ::protobuf_rtc_5fevent_5flog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventStream

// repeated .webrtc.rtclog.Event stream = 1;
inline int EventStream::stream_size() const {
  return stream_.size();
}
inline void EventStream::clear_stream() {
  stream_.Clear();
}
inline ::webrtc::rtclog::Event* EventStream::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.EventStream.stream)
  return stream_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::Event >*
EventStream::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.EventStream.stream)
  return &stream_;
}
inline const ::webrtc::rtclog::Event& EventStream::stream(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.EventStream.stream)
  return stream_.Get(index);
}
inline ::webrtc::rtclog::Event* EventStream::add_stream() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.EventStream.stream)
  return stream_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::Event >&
EventStream::stream() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.EventStream.stream)
  return stream_;
}

// -------------------------------------------------------------------

// Event

// optional int64 timestamp_us = 1;
inline bool Event::has_timestamp_us() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_timestamp_us() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_timestamp_us() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_timestamp_us() {
  timestamp_us_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_us();
}
inline ::google::protobuf::int64 Event::timestamp_us() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.timestamp_us)
  return timestamp_us_;
}
inline void Event::set_timestamp_us(::google::protobuf::int64 value) {
  set_has_timestamp_us();
  timestamp_us_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.Event.timestamp_us)
}

// optional .webrtc.rtclog.Event.EventType type = 2;
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::webrtc::rtclog::Event_EventType Event::type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.type)
  return static_cast< ::webrtc::rtclog::Event_EventType >(type_);
}
inline void Event::set_type(::webrtc::rtclog::Event_EventType value) {
  assert(::webrtc::rtclog::Event_EventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.Event.type)
}

// optional .webrtc.rtclog.RtpPacket rtp_packet = 3;
inline bool Event::has_rtp_packet() const {
  return subtype_case() == kRtpPacket;
}
inline void Event::set_has_rtp_packet() {
  _oneof_case_[0] = kRtpPacket;
}
inline void Event::clear_rtp_packet() {
  if (has_rtp_packet()) {
    delete subtype_.rtp_packet_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::RtpPacket& Event::_internal_rtp_packet() const {
  return *subtype_.rtp_packet_;
}
inline ::webrtc::rtclog::RtpPacket* Event::release_rtp_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.rtp_packet)
  if (has_rtp_packet()) {
    clear_has_subtype();
      ::webrtc::rtclog::RtpPacket* temp = subtype_.rtp_packet_;
    subtype_.rtp_packet_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::RtpPacket& Event::rtp_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.rtp_packet)
  return has_rtp_packet()
      ? *subtype_.rtp_packet_
      : *reinterpret_cast< ::webrtc::rtclog::RtpPacket*>(&::webrtc::rtclog::_RtpPacket_default_instance_);
}
inline ::webrtc::rtclog::RtpPacket* Event::mutable_rtp_packet() {
  if (!has_rtp_packet()) {
    clear_subtype();
    set_has_rtp_packet();
    subtype_.rtp_packet_ = CreateMaybeMessage< ::webrtc::rtclog::RtpPacket >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.rtp_packet)
  return subtype_.rtp_packet_;
}

// optional .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
inline bool Event::has_rtcp_packet() const {
  return subtype_case() == kRtcpPacket;
}
inline void Event::set_has_rtcp_packet() {
  _oneof_case_[0] = kRtcpPacket;
}
inline void Event::clear_rtcp_packet() {
  if (has_rtcp_packet()) {
    delete subtype_.rtcp_packet_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::RtcpPacket& Event::_internal_rtcp_packet() const {
  return *subtype_.rtcp_packet_;
}
inline ::webrtc::rtclog::RtcpPacket* Event::release_rtcp_packet() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.rtcp_packet)
  if (has_rtcp_packet()) {
    clear_has_subtype();
      ::webrtc::rtclog::RtcpPacket* temp = subtype_.rtcp_packet_;
    subtype_.rtcp_packet_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::RtcpPacket& Event::rtcp_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.rtcp_packet)
  return has_rtcp_packet()
      ? *subtype_.rtcp_packet_
      : *reinterpret_cast< ::webrtc::rtclog::RtcpPacket*>(&::webrtc::rtclog::_RtcpPacket_default_instance_);
}
inline ::webrtc::rtclog::RtcpPacket* Event::mutable_rtcp_packet() {
  if (!has_rtcp_packet()) {
    clear_subtype();
    set_has_rtcp_packet();
    subtype_.rtcp_packet_ = CreateMaybeMessage< ::webrtc::rtclog::RtcpPacket >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.rtcp_packet)
  return subtype_.rtcp_packet_;
}

// optional .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
inline bool Event::has_audio_playout_event() const {
  return subtype_case() == kAudioPlayoutEvent;
}
inline void Event::set_has_audio_playout_event() {
  _oneof_case_[0] = kAudioPlayoutEvent;
}
inline void Event::clear_audio_playout_event() {
  if (has_audio_playout_event()) {
    delete subtype_.audio_playout_event_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::AudioPlayoutEvent& Event::_internal_audio_playout_event() const {
  return *subtype_.audio_playout_event_;
}
inline ::webrtc::rtclog::AudioPlayoutEvent* Event::release_audio_playout_event() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.audio_playout_event)
  if (has_audio_playout_event()) {
    clear_has_subtype();
      ::webrtc::rtclog::AudioPlayoutEvent* temp = subtype_.audio_playout_event_;
    subtype_.audio_playout_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::AudioPlayoutEvent& Event::audio_playout_event() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_playout_event)
  return has_audio_playout_event()
      ? *subtype_.audio_playout_event_
      : *reinterpret_cast< ::webrtc::rtclog::AudioPlayoutEvent*>(&::webrtc::rtclog::_AudioPlayoutEvent_default_instance_);
}
inline ::webrtc::rtclog::AudioPlayoutEvent* Event::mutable_audio_playout_event() {
  if (!has_audio_playout_event()) {
    clear_subtype();
    set_has_audio_playout_event();
    subtype_.audio_playout_event_ = CreateMaybeMessage< ::webrtc::rtclog::AudioPlayoutEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_playout_event)
  return subtype_.audio_playout_event_;
}

// optional .webrtc.rtclog.LossBasedBweUpdate loss_based_bwe_update = 6;
inline bool Event::has_loss_based_bwe_update() const {
  return subtype_case() == kLossBasedBweUpdate;
}
inline void Event::set_has_loss_based_bwe_update() {
  _oneof_case_[0] = kLossBasedBweUpdate;
}
inline void Event::clear_loss_based_bwe_update() {
  if (has_loss_based_bwe_update()) {
    delete subtype_.loss_based_bwe_update_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::LossBasedBweUpdate& Event::_internal_loss_based_bwe_update() const {
  return *subtype_.loss_based_bwe_update_;
}
inline ::webrtc::rtclog::LossBasedBweUpdate* Event::release_loss_based_bwe_update() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.loss_based_bwe_update)
  if (has_loss_based_bwe_update()) {
    clear_has_subtype();
      ::webrtc::rtclog::LossBasedBweUpdate* temp = subtype_.loss_based_bwe_update_;
    subtype_.loss_based_bwe_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::LossBasedBweUpdate& Event::loss_based_bwe_update() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.loss_based_bwe_update)
  return has_loss_based_bwe_update()
      ? *subtype_.loss_based_bwe_update_
      : *reinterpret_cast< ::webrtc::rtclog::LossBasedBweUpdate*>(&::webrtc::rtclog::_LossBasedBweUpdate_default_instance_);
}
inline ::webrtc::rtclog::LossBasedBweUpdate* Event::mutable_loss_based_bwe_update() {
  if (!has_loss_based_bwe_update()) {
    clear_subtype();
    set_has_loss_based_bwe_update();
    subtype_.loss_based_bwe_update_ = CreateMaybeMessage< ::webrtc::rtclog::LossBasedBweUpdate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.loss_based_bwe_update)
  return subtype_.loss_based_bwe_update_;
}

// optional .webrtc.rtclog.DelayBasedBweUpdate delay_based_bwe_update = 7;
inline bool Event::has_delay_based_bwe_update() const {
  return subtype_case() == kDelayBasedBweUpdate;
}
inline void Event::set_has_delay_based_bwe_update() {
  _oneof_case_[0] = kDelayBasedBweUpdate;
}
inline void Event::clear_delay_based_bwe_update() {
  if (has_delay_based_bwe_update()) {
    delete subtype_.delay_based_bwe_update_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::DelayBasedBweUpdate& Event::_internal_delay_based_bwe_update() const {
  return *subtype_.delay_based_bwe_update_;
}
inline ::webrtc::rtclog::DelayBasedBweUpdate* Event::release_delay_based_bwe_update() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.delay_based_bwe_update)
  if (has_delay_based_bwe_update()) {
    clear_has_subtype();
      ::webrtc::rtclog::DelayBasedBweUpdate* temp = subtype_.delay_based_bwe_update_;
    subtype_.delay_based_bwe_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::DelayBasedBweUpdate& Event::delay_based_bwe_update() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.delay_based_bwe_update)
  return has_delay_based_bwe_update()
      ? *subtype_.delay_based_bwe_update_
      : *reinterpret_cast< ::webrtc::rtclog::DelayBasedBweUpdate*>(&::webrtc::rtclog::_DelayBasedBweUpdate_default_instance_);
}
inline ::webrtc::rtclog::DelayBasedBweUpdate* Event::mutable_delay_based_bwe_update() {
  if (!has_delay_based_bwe_update()) {
    clear_subtype();
    set_has_delay_based_bwe_update();
    subtype_.delay_based_bwe_update_ = CreateMaybeMessage< ::webrtc::rtclog::DelayBasedBweUpdate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.delay_based_bwe_update)
  return subtype_.delay_based_bwe_update_;
}

// optional .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
inline bool Event::has_video_receiver_config() const {
  return subtype_case() == kVideoReceiverConfig;
}
inline void Event::set_has_video_receiver_config() {
  _oneof_case_[0] = kVideoReceiverConfig;
}
inline void Event::clear_video_receiver_config() {
  if (has_video_receiver_config()) {
    delete subtype_.video_receiver_config_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::VideoReceiveConfig& Event::_internal_video_receiver_config() const {
  return *subtype_.video_receiver_config_;
}
inline ::webrtc::rtclog::VideoReceiveConfig* Event::release_video_receiver_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.video_receiver_config)
  if (has_video_receiver_config()) {
    clear_has_subtype();
      ::webrtc::rtclog::VideoReceiveConfig* temp = subtype_.video_receiver_config_;
    subtype_.video_receiver_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::VideoReceiveConfig& Event::video_receiver_config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.video_receiver_config)
  return has_video_receiver_config()
      ? *subtype_.video_receiver_config_
      : *reinterpret_cast< ::webrtc::rtclog::VideoReceiveConfig*>(&::webrtc::rtclog::_VideoReceiveConfig_default_instance_);
}
inline ::webrtc::rtclog::VideoReceiveConfig* Event::mutable_video_receiver_config() {
  if (!has_video_receiver_config()) {
    clear_subtype();
    set_has_video_receiver_config();
    subtype_.video_receiver_config_ = CreateMaybeMessage< ::webrtc::rtclog::VideoReceiveConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.video_receiver_config)
  return subtype_.video_receiver_config_;
}

// optional .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
inline bool Event::has_video_sender_config() const {
  return subtype_case() == kVideoSenderConfig;
}
inline void Event::set_has_video_sender_config() {
  _oneof_case_[0] = kVideoSenderConfig;
}
inline void Event::clear_video_sender_config() {
  if (has_video_sender_config()) {
    delete subtype_.video_sender_config_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::VideoSendConfig& Event::_internal_video_sender_config() const {
  return *subtype_.video_sender_config_;
}
inline ::webrtc::rtclog::VideoSendConfig* Event::release_video_sender_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.video_sender_config)
  if (has_video_sender_config()) {
    clear_has_subtype();
      ::webrtc::rtclog::VideoSendConfig* temp = subtype_.video_sender_config_;
    subtype_.video_sender_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::VideoSendConfig& Event::video_sender_config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.video_sender_config)
  return has_video_sender_config()
      ? *subtype_.video_sender_config_
      : *reinterpret_cast< ::webrtc::rtclog::VideoSendConfig*>(&::webrtc::rtclog::_VideoSendConfig_default_instance_);
}
inline ::webrtc::rtclog::VideoSendConfig* Event::mutable_video_sender_config() {
  if (!has_video_sender_config()) {
    clear_subtype();
    set_has_video_sender_config();
    subtype_.video_sender_config_ = CreateMaybeMessage< ::webrtc::rtclog::VideoSendConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.video_sender_config)
  return subtype_.video_sender_config_;
}

// optional .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
inline bool Event::has_audio_receiver_config() const {
  return subtype_case() == kAudioReceiverConfig;
}
inline void Event::set_has_audio_receiver_config() {
  _oneof_case_[0] = kAudioReceiverConfig;
}
inline void Event::clear_audio_receiver_config() {
  if (has_audio_receiver_config()) {
    delete subtype_.audio_receiver_config_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::AudioReceiveConfig& Event::_internal_audio_receiver_config() const {
  return *subtype_.audio_receiver_config_;
}
inline ::webrtc::rtclog::AudioReceiveConfig* Event::release_audio_receiver_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.audio_receiver_config)
  if (has_audio_receiver_config()) {
    clear_has_subtype();
      ::webrtc::rtclog::AudioReceiveConfig* temp = subtype_.audio_receiver_config_;
    subtype_.audio_receiver_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::AudioReceiveConfig& Event::audio_receiver_config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_receiver_config)
  return has_audio_receiver_config()
      ? *subtype_.audio_receiver_config_
      : *reinterpret_cast< ::webrtc::rtclog::AudioReceiveConfig*>(&::webrtc::rtclog::_AudioReceiveConfig_default_instance_);
}
inline ::webrtc::rtclog::AudioReceiveConfig* Event::mutable_audio_receiver_config() {
  if (!has_audio_receiver_config()) {
    clear_subtype();
    set_has_audio_receiver_config();
    subtype_.audio_receiver_config_ = CreateMaybeMessage< ::webrtc::rtclog::AudioReceiveConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_receiver_config)
  return subtype_.audio_receiver_config_;
}

// optional .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
inline bool Event::has_audio_sender_config() const {
  return subtype_case() == kAudioSenderConfig;
}
inline void Event::set_has_audio_sender_config() {
  _oneof_case_[0] = kAudioSenderConfig;
}
inline void Event::clear_audio_sender_config() {
  if (has_audio_sender_config()) {
    delete subtype_.audio_sender_config_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::AudioSendConfig& Event::_internal_audio_sender_config() const {
  return *subtype_.audio_sender_config_;
}
inline ::webrtc::rtclog::AudioSendConfig* Event::release_audio_sender_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.audio_sender_config)
  if (has_audio_sender_config()) {
    clear_has_subtype();
      ::webrtc::rtclog::AudioSendConfig* temp = subtype_.audio_sender_config_;
    subtype_.audio_sender_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::AudioSendConfig& Event::audio_sender_config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_sender_config)
  return has_audio_sender_config()
      ? *subtype_.audio_sender_config_
      : *reinterpret_cast< ::webrtc::rtclog::AudioSendConfig*>(&::webrtc::rtclog::_AudioSendConfig_default_instance_);
}
inline ::webrtc::rtclog::AudioSendConfig* Event::mutable_audio_sender_config() {
  if (!has_audio_sender_config()) {
    clear_subtype();
    set_has_audio_sender_config();
    subtype_.audio_sender_config_ = CreateMaybeMessage< ::webrtc::rtclog::AudioSendConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_sender_config)
  return subtype_.audio_sender_config_;
}

// optional .webrtc.rtclog.AudioNetworkAdaptation audio_network_adaptation = 16;
inline bool Event::has_audio_network_adaptation() const {
  return subtype_case() == kAudioNetworkAdaptation;
}
inline void Event::set_has_audio_network_adaptation() {
  _oneof_case_[0] = kAudioNetworkAdaptation;
}
inline void Event::clear_audio_network_adaptation() {
  if (has_audio_network_adaptation()) {
    delete subtype_.audio_network_adaptation_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::AudioNetworkAdaptation& Event::_internal_audio_network_adaptation() const {
  return *subtype_.audio_network_adaptation_;
}
inline ::webrtc::rtclog::AudioNetworkAdaptation* Event::release_audio_network_adaptation() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.audio_network_adaptation)
  if (has_audio_network_adaptation()) {
    clear_has_subtype();
      ::webrtc::rtclog::AudioNetworkAdaptation* temp = subtype_.audio_network_adaptation_;
    subtype_.audio_network_adaptation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::AudioNetworkAdaptation& Event::audio_network_adaptation() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_network_adaptation)
  return has_audio_network_adaptation()
      ? *subtype_.audio_network_adaptation_
      : *reinterpret_cast< ::webrtc::rtclog::AudioNetworkAdaptation*>(&::webrtc::rtclog::_AudioNetworkAdaptation_default_instance_);
}
inline ::webrtc::rtclog::AudioNetworkAdaptation* Event::mutable_audio_network_adaptation() {
  if (!has_audio_network_adaptation()) {
    clear_subtype();
    set_has_audio_network_adaptation();
    subtype_.audio_network_adaptation_ = CreateMaybeMessage< ::webrtc::rtclog::AudioNetworkAdaptation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_network_adaptation)
  return subtype_.audio_network_adaptation_;
}

// optional .webrtc.rtclog.BweProbeCluster probe_cluster = 17;
inline bool Event::has_probe_cluster() const {
  return subtype_case() == kProbeCluster;
}
inline void Event::set_has_probe_cluster() {
  _oneof_case_[0] = kProbeCluster;
}
inline void Event::clear_probe_cluster() {
  if (has_probe_cluster()) {
    delete subtype_.probe_cluster_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::BweProbeCluster& Event::_internal_probe_cluster() const {
  return *subtype_.probe_cluster_;
}
inline ::webrtc::rtclog::BweProbeCluster* Event::release_probe_cluster() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.probe_cluster)
  if (has_probe_cluster()) {
    clear_has_subtype();
      ::webrtc::rtclog::BweProbeCluster* temp = subtype_.probe_cluster_;
    subtype_.probe_cluster_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::BweProbeCluster& Event::probe_cluster() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.probe_cluster)
  return has_probe_cluster()
      ? *subtype_.probe_cluster_
      : *reinterpret_cast< ::webrtc::rtclog::BweProbeCluster*>(&::webrtc::rtclog::_BweProbeCluster_default_instance_);
}
inline ::webrtc::rtclog::BweProbeCluster* Event::mutable_probe_cluster() {
  if (!has_probe_cluster()) {
    clear_subtype();
    set_has_probe_cluster();
    subtype_.probe_cluster_ = CreateMaybeMessage< ::webrtc::rtclog::BweProbeCluster >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.probe_cluster)
  return subtype_.probe_cluster_;
}

// optional .webrtc.rtclog.BweProbeResult probe_result = 18;
inline bool Event::has_probe_result() const {
  return subtype_case() == kProbeResult;
}
inline void Event::set_has_probe_result() {
  _oneof_case_[0] = kProbeResult;
}
inline void Event::clear_probe_result() {
  if (has_probe_result()) {
    delete subtype_.probe_result_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::BweProbeResult& Event::_internal_probe_result() const {
  return *subtype_.probe_result_;
}
inline ::webrtc::rtclog::BweProbeResult* Event::release_probe_result() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.probe_result)
  if (has_probe_result()) {
    clear_has_subtype();
      ::webrtc::rtclog::BweProbeResult* temp = subtype_.probe_result_;
    subtype_.probe_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::BweProbeResult& Event::probe_result() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.probe_result)
  return has_probe_result()
      ? *subtype_.probe_result_
      : *reinterpret_cast< ::webrtc::rtclog::BweProbeResult*>(&::webrtc::rtclog::_BweProbeResult_default_instance_);
}
inline ::webrtc::rtclog::BweProbeResult* Event::mutable_probe_result() {
  if (!has_probe_result()) {
    clear_subtype();
    set_has_probe_result();
    subtype_.probe_result_ = CreateMaybeMessage< ::webrtc::rtclog::BweProbeResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.probe_result)
  return subtype_.probe_result_;
}

// optional .webrtc.rtclog.AlrState alr_state = 19;
inline bool Event::has_alr_state() const {
  return subtype_case() == kAlrState;
}
inline void Event::set_has_alr_state() {
  _oneof_case_[0] = kAlrState;
}
inline void Event::clear_alr_state() {
  if (has_alr_state()) {
    delete subtype_.alr_state_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::AlrState& Event::_internal_alr_state() const {
  return *subtype_.alr_state_;
}
inline ::webrtc::rtclog::AlrState* Event::release_alr_state() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.alr_state)
  if (has_alr_state()) {
    clear_has_subtype();
      ::webrtc::rtclog::AlrState* temp = subtype_.alr_state_;
    subtype_.alr_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::AlrState& Event::alr_state() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.alr_state)
  return has_alr_state()
      ? *subtype_.alr_state_
      : *reinterpret_cast< ::webrtc::rtclog::AlrState*>(&::webrtc::rtclog::_AlrState_default_instance_);
}
inline ::webrtc::rtclog::AlrState* Event::mutable_alr_state() {
  if (!has_alr_state()) {
    clear_subtype();
    set_has_alr_state();
    subtype_.alr_state_ = CreateMaybeMessage< ::webrtc::rtclog::AlrState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.alr_state)
  return subtype_.alr_state_;
}

// optional .webrtc.rtclog.IceCandidatePairConfig ice_candidate_pair_config = 20;
inline bool Event::has_ice_candidate_pair_config() const {
  return subtype_case() == kIceCandidatePairConfig;
}
inline void Event::set_has_ice_candidate_pair_config() {
  _oneof_case_[0] = kIceCandidatePairConfig;
}
inline void Event::clear_ice_candidate_pair_config() {
  if (has_ice_candidate_pair_config()) {
    delete subtype_.ice_candidate_pair_config_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::IceCandidatePairConfig& Event::_internal_ice_candidate_pair_config() const {
  return *subtype_.ice_candidate_pair_config_;
}
inline ::webrtc::rtclog::IceCandidatePairConfig* Event::release_ice_candidate_pair_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.ice_candidate_pair_config)
  if (has_ice_candidate_pair_config()) {
    clear_has_subtype();
      ::webrtc::rtclog::IceCandidatePairConfig* temp = subtype_.ice_candidate_pair_config_;
    subtype_.ice_candidate_pair_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::IceCandidatePairConfig& Event::ice_candidate_pair_config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.ice_candidate_pair_config)
  return has_ice_candidate_pair_config()
      ? *subtype_.ice_candidate_pair_config_
      : *reinterpret_cast< ::webrtc::rtclog::IceCandidatePairConfig*>(&::webrtc::rtclog::_IceCandidatePairConfig_default_instance_);
}
inline ::webrtc::rtclog::IceCandidatePairConfig* Event::mutable_ice_candidate_pair_config() {
  if (!has_ice_candidate_pair_config()) {
    clear_subtype();
    set_has_ice_candidate_pair_config();
    subtype_.ice_candidate_pair_config_ = CreateMaybeMessage< ::webrtc::rtclog::IceCandidatePairConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.ice_candidate_pair_config)
  return subtype_.ice_candidate_pair_config_;
}

// optional .webrtc.rtclog.IceCandidatePairEvent ice_candidate_pair_event = 21;
inline bool Event::has_ice_candidate_pair_event() const {
  return subtype_case() == kIceCandidatePairEvent;
}
inline void Event::set_has_ice_candidate_pair_event() {
  _oneof_case_[0] = kIceCandidatePairEvent;
}
inline void Event::clear_ice_candidate_pair_event() {
  if (has_ice_candidate_pair_event()) {
    delete subtype_.ice_candidate_pair_event_;
    clear_has_subtype();
  }
}
inline const ::webrtc::rtclog::IceCandidatePairEvent& Event::_internal_ice_candidate_pair_event() const {
  return *subtype_.ice_candidate_pair_event_;
}
inline ::webrtc::rtclog::IceCandidatePairEvent* Event::release_ice_candidate_pair_event() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.Event.ice_candidate_pair_event)
  if (has_ice_candidate_pair_event()) {
    clear_has_subtype();
      ::webrtc::rtclog::IceCandidatePairEvent* temp = subtype_.ice_candidate_pair_event_;
    subtype_.ice_candidate_pair_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::rtclog::IceCandidatePairEvent& Event::ice_candidate_pair_event() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.ice_candidate_pair_event)
  return has_ice_candidate_pair_event()
      ? *subtype_.ice_candidate_pair_event_
      : *reinterpret_cast< ::webrtc::rtclog::IceCandidatePairEvent*>(&::webrtc::rtclog::_IceCandidatePairEvent_default_instance_);
}
inline ::webrtc::rtclog::IceCandidatePairEvent* Event::mutable_ice_candidate_pair_event() {
  if (!has_ice_candidate_pair_event()) {
    clear_subtype();
    set_has_ice_candidate_pair_event();
    subtype_.ice_candidate_pair_event_ = CreateMaybeMessage< ::webrtc::rtclog::IceCandidatePairEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.ice_candidate_pair_event)
  return subtype_.ice_candidate_pair_event_;
}

inline bool Event::has_subtype() const {
  return subtype_case() != SUBTYPE_NOT_SET;
}
inline void Event::clear_has_subtype() {
  _oneof_case_[0] = SUBTYPE_NOT_SET;
}
inline Event::SubtypeCase Event::subtype_case() const {
  return Event::SubtypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RtpPacket

// optional bool incoming = 1;
inline bool RtpPacket::has_incoming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtpPacket::set_has_incoming() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtpPacket::clear_has_incoming() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtpPacket::clear_incoming() {
  incoming_ = false;
  clear_has_incoming();
}
inline bool RtpPacket::incoming() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.incoming)
  return incoming_;
}
inline void RtpPacket::set_incoming(bool value) {
  set_has_incoming();
  incoming_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.incoming)
}

// optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
inline bool RtpPacket::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtpPacket::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtpPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtpPacket::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::webrtc::rtclog::MediaType RtpPacket::type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.type)
  return static_cast< ::webrtc::rtclog::MediaType >(type_);
}
inline void RtpPacket::set_type(::webrtc::rtclog::MediaType value) {
  assert(::webrtc::rtclog::MediaType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.type)
}

// optional uint32 packet_length = 3;
inline bool RtpPacket::has_packet_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtpPacket::set_has_packet_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtpPacket::clear_has_packet_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtpPacket::clear_packet_length() {
  packet_length_ = 0u;
  clear_has_packet_length();
}
inline ::google::protobuf::uint32 RtpPacket::packet_length() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.packet_length)
  return packet_length_;
}
inline void RtpPacket::set_packet_length(::google::protobuf::uint32 value) {
  set_has_packet_length();
  packet_length_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.packet_length)
}

// optional bytes header = 4;
inline bool RtpPacket::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtpPacket::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtpPacket::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtpPacket::clear_header() {
  header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header();
}
inline const ::std::string& RtpPacket::header() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.header)
  return header_.GetNoArena();
}
inline void RtpPacket::set_header(const ::std::string& value) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.header)
}
#if LANG_CXX11
inline void RtpPacket::set_header(::std::string&& value) {
  set_has_header();
  header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog.RtpPacket.header)
}
#endif
inline void RtpPacket::set_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.RtpPacket.header)
}
inline void RtpPacket::set_header(const void* value, size_t size) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.RtpPacket.header)
}
inline ::std::string* RtpPacket::mutable_header() {
  set_has_header();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtpPacket.header)
  return header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtpPacket::release_header() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.RtpPacket.header)
  if (!has_header()) {
    return NULL;
  }
  clear_has_header();
  return header_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtpPacket::set_allocated_header(::std::string* header) {
  if (header != NULL) {
    set_has_header();
  } else {
    clear_has_header();
  }
  header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtpPacket.header)
}

// optional int32 probe_cluster_id = 5;
inline bool RtpPacket::has_probe_cluster_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtpPacket::set_has_probe_cluster_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtpPacket::clear_has_probe_cluster_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtpPacket::clear_probe_cluster_id() {
  probe_cluster_id_ = 0;
  clear_has_probe_cluster_id();
}
inline ::google::protobuf::int32 RtpPacket::probe_cluster_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.probe_cluster_id)
  return probe_cluster_id_;
}
inline void RtpPacket::set_probe_cluster_id(::google::protobuf::int32 value) {
  set_has_probe_cluster_id();
  probe_cluster_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.probe_cluster_id)
}

// -------------------------------------------------------------------

// RtcpPacket

// optional bool incoming = 1;
inline bool RtcpPacket::has_incoming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtcpPacket::set_has_incoming() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtcpPacket::clear_has_incoming() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtcpPacket::clear_incoming() {
  incoming_ = false;
  clear_has_incoming();
}
inline bool RtcpPacket::incoming() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtcpPacket.incoming)
  return incoming_;
}
inline void RtcpPacket::set_incoming(bool value) {
  set_has_incoming();
  incoming_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtcpPacket.incoming)
}

// optional .webrtc.rtclog.MediaType type = 2 [deprecated = true];
inline bool RtcpPacket::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtcpPacket::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtcpPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtcpPacket::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::webrtc::rtclog::MediaType RtcpPacket::type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtcpPacket.type)
  return static_cast< ::webrtc::rtclog::MediaType >(type_);
}
inline void RtcpPacket::set_type(::webrtc::rtclog::MediaType value) {
  assert(::webrtc::rtclog::MediaType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtcpPacket.type)
}

// optional bytes packet_data = 3;
inline bool RtcpPacket::has_packet_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtcpPacket::set_has_packet_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtcpPacket::clear_has_packet_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtcpPacket::clear_packet_data() {
  packet_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packet_data();
}
inline const ::std::string& RtcpPacket::packet_data() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtcpPacket.packet_data)
  return packet_data_.GetNoArena();
}
inline void RtcpPacket::set_packet_data(const ::std::string& value) {
  set_has_packet_data();
  packet_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtcpPacket.packet_data)
}
#if LANG_CXX11
inline void RtcpPacket::set_packet_data(::std::string&& value) {
  set_has_packet_data();
  packet_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog.RtcpPacket.packet_data)
}
#endif
inline void RtcpPacket::set_packet_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packet_data();
  packet_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.RtcpPacket.packet_data)
}
inline void RtcpPacket::set_packet_data(const void* value, size_t size) {
  set_has_packet_data();
  packet_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.RtcpPacket.packet_data)
}
inline ::std::string* RtcpPacket::mutable_packet_data() {
  set_has_packet_data();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtcpPacket.packet_data)
  return packet_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtcpPacket::release_packet_data() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.RtcpPacket.packet_data)
  if (!has_packet_data()) {
    return NULL;
  }
  clear_has_packet_data();
  return packet_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtcpPacket::set_allocated_packet_data(::std::string* packet_data) {
  if (packet_data != NULL) {
    set_has_packet_data();
  } else {
    clear_has_packet_data();
  }
  packet_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packet_data);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtcpPacket.packet_data)
}

// -------------------------------------------------------------------

// AudioPlayoutEvent

// optional uint32 local_ssrc = 2;
inline bool AudioPlayoutEvent::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioPlayoutEvent::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioPlayoutEvent::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioPlayoutEvent::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
inline ::google::protobuf::uint32 AudioPlayoutEvent::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioPlayoutEvent.local_ssrc)
  return local_ssrc_;
}
inline void AudioPlayoutEvent::set_local_ssrc(::google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioPlayoutEvent.local_ssrc)
}

// -------------------------------------------------------------------

// LossBasedBweUpdate

// optional int32 bitrate_bps = 1;
inline bool LossBasedBweUpdate::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossBasedBweUpdate::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossBasedBweUpdate::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossBasedBweUpdate::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::int32 LossBasedBweUpdate::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.LossBasedBweUpdate.bitrate_bps)
  return bitrate_bps_;
}
inline void LossBasedBweUpdate::set_bitrate_bps(::google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.LossBasedBweUpdate.bitrate_bps)
}

// optional uint32 fraction_loss = 2;
inline bool LossBasedBweUpdate::has_fraction_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossBasedBweUpdate::set_has_fraction_loss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossBasedBweUpdate::clear_has_fraction_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossBasedBweUpdate::clear_fraction_loss() {
  fraction_loss_ = 0u;
  clear_has_fraction_loss();
}
inline ::google::protobuf::uint32 LossBasedBweUpdate::fraction_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.LossBasedBweUpdate.fraction_loss)
  return fraction_loss_;
}
inline void LossBasedBweUpdate::set_fraction_loss(::google::protobuf::uint32 value) {
  set_has_fraction_loss();
  fraction_loss_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.LossBasedBweUpdate.fraction_loss)
}

// optional int32 total_packets = 3;
inline bool LossBasedBweUpdate::has_total_packets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossBasedBweUpdate::set_has_total_packets() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossBasedBweUpdate::clear_has_total_packets() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossBasedBweUpdate::clear_total_packets() {
  total_packets_ = 0;
  clear_has_total_packets();
}
inline ::google::protobuf::int32 LossBasedBweUpdate::total_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.LossBasedBweUpdate.total_packets)
  return total_packets_;
}
inline void LossBasedBweUpdate::set_total_packets(::google::protobuf::int32 value) {
  set_has_total_packets();
  total_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.LossBasedBweUpdate.total_packets)
}

// -------------------------------------------------------------------

// DelayBasedBweUpdate

// optional int32 bitrate_bps = 1;
inline bool DelayBasedBweUpdate::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelayBasedBweUpdate::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelayBasedBweUpdate::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelayBasedBweUpdate::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::int32 DelayBasedBweUpdate::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DelayBasedBweUpdate.bitrate_bps)
  return bitrate_bps_;
}
inline void DelayBasedBweUpdate::set_bitrate_bps(::google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DelayBasedBweUpdate.bitrate_bps)
}

// optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
inline bool DelayBasedBweUpdate::has_detector_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelayBasedBweUpdate::set_has_detector_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelayBasedBweUpdate::clear_has_detector_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelayBasedBweUpdate::clear_detector_state() {
  detector_state_ = 0;
  clear_has_detector_state();
}
inline ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate::detector_state() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DelayBasedBweUpdate.detector_state)
  return static_cast< ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState >(detector_state_);
}
inline void DelayBasedBweUpdate::set_detector_state(::webrtc::rtclog::DelayBasedBweUpdate_DetectorState value) {
  assert(::webrtc::rtclog::DelayBasedBweUpdate_DetectorState_IsValid(value));
  set_has_detector_state();
  detector_state_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DelayBasedBweUpdate.detector_state)
}

// -------------------------------------------------------------------

// VideoReceiveConfig

// optional uint32 remote_ssrc = 1;
inline bool VideoReceiveConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoReceiveConfig::set_has_remote_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoReceiveConfig::clear_has_remote_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoReceiveConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  clear_has_remote_ssrc();
}
inline ::google::protobuf::uint32 VideoReceiveConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.remote_ssrc)
  return remote_ssrc_;
}
inline void VideoReceiveConfig::set_remote_ssrc(::google::protobuf::uint32 value) {
  set_has_remote_ssrc();
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 2;
inline bool VideoReceiveConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoReceiveConfig::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoReceiveConfig::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoReceiveConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
inline ::google::protobuf::uint32 VideoReceiveConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.local_ssrc)
  return local_ssrc_;
}
inline void VideoReceiveConfig::set_local_ssrc(::google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.local_ssrc)
}

// optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
inline bool VideoReceiveConfig::has_rtcp_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoReceiveConfig::set_has_rtcp_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoReceiveConfig::clear_has_rtcp_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoReceiveConfig::clear_rtcp_mode() {
  rtcp_mode_ = 1;
  clear_has_rtcp_mode();
}
inline ::webrtc::rtclog::VideoReceiveConfig_RtcpMode VideoReceiveConfig::rtcp_mode() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.rtcp_mode)
  return static_cast< ::webrtc::rtclog::VideoReceiveConfig_RtcpMode >(rtcp_mode_);
}
inline void VideoReceiveConfig::set_rtcp_mode(::webrtc::rtclog::VideoReceiveConfig_RtcpMode value) {
  assert(::webrtc::rtclog::VideoReceiveConfig_RtcpMode_IsValid(value));
  set_has_rtcp_mode();
  rtcp_mode_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.rtcp_mode)
}

// optional bool remb = 4;
inline bool VideoReceiveConfig::has_remb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoReceiveConfig::set_has_remb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoReceiveConfig::clear_has_remb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoReceiveConfig::clear_remb() {
  remb_ = false;
  clear_has_remb();
}
inline bool VideoReceiveConfig::remb() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.remb)
  return remb_;
}
inline void VideoReceiveConfig::set_remb(bool value) {
  set_has_remb();
  remb_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.remb)
}

// repeated .webrtc.rtclog.RtxMap rtx_map = 5;
inline int VideoReceiveConfig::rtx_map_size() const {
  return rtx_map_.size();
}
inline void VideoReceiveConfig::clear_rtx_map() {
  rtx_map_.Clear();
}
inline ::webrtc::rtclog::RtxMap* VideoReceiveConfig::mutable_rtx_map(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return rtx_map_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtxMap >*
VideoReceiveConfig::mutable_rtx_map() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return &rtx_map_;
}
inline const ::webrtc::rtclog::RtxMap& VideoReceiveConfig::rtx_map(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return rtx_map_.Get(index);
}
inline ::webrtc::rtclog::RtxMap* VideoReceiveConfig::add_rtx_map() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return rtx_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtxMap >&
VideoReceiveConfig::rtx_map() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return rtx_map_;
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
inline int VideoReceiveConfig::header_extensions_size() const {
  return header_extensions_.size();
}
inline void VideoReceiveConfig::clear_header_extensions() {
  header_extensions_.Clear();
}
inline ::webrtc::rtclog::RtpHeaderExtension* VideoReceiveConfig::mutable_header_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return header_extensions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >*
VideoReceiveConfig::mutable_header_extensions() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return &header_extensions_;
}
inline const ::webrtc::rtclog::RtpHeaderExtension& VideoReceiveConfig::header_extensions(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return header_extensions_.Get(index);
}
inline ::webrtc::rtclog::RtpHeaderExtension* VideoReceiveConfig::add_header_extensions() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return header_extensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >&
VideoReceiveConfig::header_extensions() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return header_extensions_;
}

// repeated .webrtc.rtclog.DecoderConfig decoders = 7;
inline int VideoReceiveConfig::decoders_size() const {
  return decoders_.size();
}
inline void VideoReceiveConfig::clear_decoders() {
  decoders_.Clear();
}
inline ::webrtc::rtclog::DecoderConfig* VideoReceiveConfig::mutable_decoders(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoReceiveConfig.decoders)
  return decoders_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::DecoderConfig >*
VideoReceiveConfig::mutable_decoders() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoReceiveConfig.decoders)
  return &decoders_;
}
inline const ::webrtc::rtclog::DecoderConfig& VideoReceiveConfig::decoders(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.decoders)
  return decoders_.Get(index);
}
inline ::webrtc::rtclog::DecoderConfig* VideoReceiveConfig::add_decoders() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoReceiveConfig.decoders)
  return decoders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::DecoderConfig >&
VideoReceiveConfig::decoders() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoReceiveConfig.decoders)
  return decoders_;
}

// -------------------------------------------------------------------

// DecoderConfig

// optional string name = 1;
inline bool DecoderConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DecoderConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DecoderConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DecoderConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DecoderConfig::name() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DecoderConfig.name)
  return name_.GetNoArena();
}
inline void DecoderConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DecoderConfig.name)
}
#if LANG_CXX11
inline void DecoderConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog.DecoderConfig.name)
}
#endif
inline void DecoderConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.DecoderConfig.name)
}
inline void DecoderConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.DecoderConfig.name)
}
inline ::std::string* DecoderConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.DecoderConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecoderConfig::release_name() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.DecoderConfig.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecoderConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.DecoderConfig.name)
}

// optional int32 payload_type = 2;
inline bool DecoderConfig::has_payload_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecoderConfig::set_has_payload_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecoderConfig::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecoderConfig::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
inline ::google::protobuf::int32 DecoderConfig::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DecoderConfig.payload_type)
  return payload_type_;
}
inline void DecoderConfig::set_payload_type(::google::protobuf::int32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DecoderConfig.payload_type)
}

// -------------------------------------------------------------------

// RtpHeaderExtension

// optional string name = 1;
inline bool RtpHeaderExtension::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtpHeaderExtension::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtpHeaderExtension::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtpHeaderExtension::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RtpHeaderExtension::name() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpHeaderExtension.name)
  return name_.GetNoArena();
}
inline void RtpHeaderExtension::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpHeaderExtension.name)
}
#if LANG_CXX11
inline void RtpHeaderExtension::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog.RtpHeaderExtension.name)
}
#endif
inline void RtpHeaderExtension::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.RtpHeaderExtension.name)
}
inline void RtpHeaderExtension::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.RtpHeaderExtension.name)
}
inline ::std::string* RtpHeaderExtension::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtpHeaderExtension.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RtpHeaderExtension::release_name() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.RtpHeaderExtension.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RtpHeaderExtension::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtpHeaderExtension.name)
}

// optional int32 id = 2;
inline bool RtpHeaderExtension::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtpHeaderExtension::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtpHeaderExtension::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtpHeaderExtension::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RtpHeaderExtension::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpHeaderExtension.id)
  return id_;
}
inline void RtpHeaderExtension::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpHeaderExtension.id)
}

// -------------------------------------------------------------------

// RtxConfig

// optional uint32 rtx_ssrc = 1;
inline bool RtxConfig::has_rtx_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtxConfig::set_has_rtx_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtxConfig::clear_has_rtx_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtxConfig::clear_rtx_ssrc() {
  rtx_ssrc_ = 0u;
  clear_has_rtx_ssrc();
}
inline ::google::protobuf::uint32 RtxConfig::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxConfig.rtx_ssrc)
  return rtx_ssrc_;
}
inline void RtxConfig::set_rtx_ssrc(::google::protobuf::uint32 value) {
  set_has_rtx_ssrc();
  rtx_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtxConfig.rtx_ssrc)
}

// optional int32 rtx_payload_type = 2;
inline bool RtxConfig::has_rtx_payload_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtxConfig::set_has_rtx_payload_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtxConfig::clear_has_rtx_payload_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtxConfig::clear_rtx_payload_type() {
  rtx_payload_type_ = 0;
  clear_has_rtx_payload_type();
}
inline ::google::protobuf::int32 RtxConfig::rtx_payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxConfig.rtx_payload_type)
  return rtx_payload_type_;
}
inline void RtxConfig::set_rtx_payload_type(::google::protobuf::int32 value) {
  set_has_rtx_payload_type();
  rtx_payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtxConfig.rtx_payload_type)
}

// -------------------------------------------------------------------

// RtxMap

// optional int32 payload_type = 1;
inline bool RtxMap::has_payload_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtxMap::set_has_payload_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtxMap::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtxMap::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
inline ::google::protobuf::int32 RtxMap::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxMap.payload_type)
  return payload_type_;
}
inline void RtxMap::set_payload_type(::google::protobuf::int32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtxMap.payload_type)
}

// optional .webrtc.rtclog.RtxConfig config = 2;
inline bool RtxMap::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtxMap::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtxMap::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtxMap::clear_config() {
  if (config_ != NULL) config_->Clear();
  clear_has_config();
}
inline const ::webrtc::rtclog::RtxConfig& RtxMap::_internal_config() const {
  return *config_;
}
inline const ::webrtc::rtclog::RtxConfig& RtxMap::config() const {
  const ::webrtc::rtclog::RtxConfig* p = config_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxMap.config)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::rtclog::RtxConfig*>(
      &::webrtc::rtclog::_RtxConfig_default_instance_);
}
inline ::webrtc::rtclog::RtxConfig* RtxMap::release_config() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.RtxMap.config)
  clear_has_config();
  ::webrtc::rtclog::RtxConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::webrtc::rtclog::RtxConfig* RtxMap::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog::RtxConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtxMap.config)
  return config_;
}
inline void RtxMap::set_allocated_config(::webrtc::rtclog::RtxConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
  } else {
    clear_has_config();
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtxMap.config)
}

// -------------------------------------------------------------------

// VideoSendConfig

// repeated uint32 ssrcs = 1;
inline int VideoSendConfig::ssrcs_size() const {
  return ssrcs_.size();
}
inline void VideoSendConfig::clear_ssrcs() {
  ssrcs_.Clear();
}
inline ::google::protobuf::uint32 VideoSendConfig::ssrcs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.ssrcs)
  return ssrcs_.Get(index);
}
inline void VideoSendConfig::set_ssrcs(int index, ::google::protobuf::uint32 value) {
  ssrcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoSendConfig.ssrcs)
}
inline void VideoSendConfig::add_ssrcs(::google::protobuf::uint32 value) {
  ssrcs_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoSendConfig.ssrcs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VideoSendConfig::ssrcs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoSendConfig.ssrcs)
  return ssrcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VideoSendConfig::mutable_ssrcs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoSendConfig.ssrcs)
  return &ssrcs_;
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
inline int VideoSendConfig::header_extensions_size() const {
  return header_extensions_.size();
}
inline void VideoSendConfig::clear_header_extensions() {
  header_extensions_.Clear();
}
inline ::webrtc::rtclog::RtpHeaderExtension* VideoSendConfig::mutable_header_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoSendConfig.header_extensions)
  return header_extensions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >*
VideoSendConfig::mutable_header_extensions() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoSendConfig.header_extensions)
  return &header_extensions_;
}
inline const ::webrtc::rtclog::RtpHeaderExtension& VideoSendConfig::header_extensions(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.header_extensions)
  return header_extensions_.Get(index);
}
inline ::webrtc::rtclog::RtpHeaderExtension* VideoSendConfig::add_header_extensions() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoSendConfig.header_extensions)
  return header_extensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >&
VideoSendConfig::header_extensions() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoSendConfig.header_extensions)
  return header_extensions_;
}

// repeated uint32 rtx_ssrcs = 3;
inline int VideoSendConfig::rtx_ssrcs_size() const {
  return rtx_ssrcs_.size();
}
inline void VideoSendConfig::clear_rtx_ssrcs() {
  rtx_ssrcs_.Clear();
}
inline ::google::protobuf::uint32 VideoSendConfig::rtx_ssrcs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
  return rtx_ssrcs_.Get(index);
}
inline void VideoSendConfig::set_rtx_ssrcs(int index, ::google::protobuf::uint32 value) {
  rtx_ssrcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
}
inline void VideoSendConfig::add_rtx_ssrcs(::google::protobuf::uint32 value) {
  rtx_ssrcs_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VideoSendConfig::rtx_ssrcs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
  return rtx_ssrcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VideoSendConfig::mutable_rtx_ssrcs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
  return &rtx_ssrcs_;
}

// optional int32 rtx_payload_type = 4;
inline bool VideoSendConfig::has_rtx_payload_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoSendConfig::set_has_rtx_payload_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoSendConfig::clear_has_rtx_payload_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoSendConfig::clear_rtx_payload_type() {
  rtx_payload_type_ = 0;
  clear_has_rtx_payload_type();
}
inline ::google::protobuf::int32 VideoSendConfig::rtx_payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.rtx_payload_type)
  return rtx_payload_type_;
}
inline void VideoSendConfig::set_rtx_payload_type(::google::protobuf::int32 value) {
  set_has_rtx_payload_type();
  rtx_payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoSendConfig.rtx_payload_type)
}

// optional .webrtc.rtclog.EncoderConfig encoder = 5;
inline bool VideoSendConfig::has_encoder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoSendConfig::set_has_encoder() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoSendConfig::clear_has_encoder() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoSendConfig::clear_encoder() {
  if (encoder_ != NULL) encoder_->Clear();
  clear_has_encoder();
}
inline const ::webrtc::rtclog::EncoderConfig& VideoSendConfig::_internal_encoder() const {
  return *encoder_;
}
inline const ::webrtc::rtclog::EncoderConfig& VideoSendConfig::encoder() const {
  const ::webrtc::rtclog::EncoderConfig* p = encoder_;
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.encoder)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::rtclog::EncoderConfig*>(
      &::webrtc::rtclog::_EncoderConfig_default_instance_);
}
inline ::webrtc::rtclog::EncoderConfig* VideoSendConfig::release_encoder() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.VideoSendConfig.encoder)
  clear_has_encoder();
  ::webrtc::rtclog::EncoderConfig* temp = encoder_;
  encoder_ = NULL;
  return temp;
}
inline ::webrtc::rtclog::EncoderConfig* VideoSendConfig::mutable_encoder() {
  set_has_encoder();
  if (encoder_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::rtclog::EncoderConfig>(GetArenaNoVirtual());
    encoder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoSendConfig.encoder)
  return encoder_;
}
inline void VideoSendConfig::set_allocated_encoder(::webrtc::rtclog::EncoderConfig* encoder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete encoder_;
  }
  if (encoder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      encoder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, encoder, submessage_arena);
    }
    set_has_encoder();
  } else {
    clear_has_encoder();
  }
  encoder_ = encoder;
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.VideoSendConfig.encoder)
}

// -------------------------------------------------------------------

// EncoderConfig

// optional string name = 1;
inline bool EncoderConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncoderConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncoderConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncoderConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& EncoderConfig::name() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.EncoderConfig.name)
  return name_.GetNoArena();
}
inline void EncoderConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.EncoderConfig.name)
}
#if LANG_CXX11
inline void EncoderConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.rtclog.EncoderConfig.name)
}
#endif
inline void EncoderConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.EncoderConfig.name)
}
inline void EncoderConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.EncoderConfig.name)
}
inline ::std::string* EncoderConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.EncoderConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncoderConfig::release_name() {
  // @@protoc_insertion_point(field_release:webrtc.rtclog.EncoderConfig.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncoderConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.EncoderConfig.name)
}

// optional int32 payload_type = 2;
inline bool EncoderConfig::has_payload_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncoderConfig::set_has_payload_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncoderConfig::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncoderConfig::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
inline ::google::protobuf::int32 EncoderConfig::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.EncoderConfig.payload_type)
  return payload_type_;
}
inline void EncoderConfig::set_payload_type(::google::protobuf::int32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.EncoderConfig.payload_type)
}

// -------------------------------------------------------------------

// AudioReceiveConfig

// optional uint32 remote_ssrc = 1;
inline bool AudioReceiveConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioReceiveConfig::set_has_remote_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioReceiveConfig::clear_has_remote_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioReceiveConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  clear_has_remote_ssrc();
}
inline ::google::protobuf::uint32 AudioReceiveConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioReceiveConfig.remote_ssrc)
  return remote_ssrc_;
}
inline void AudioReceiveConfig::set_remote_ssrc(::google::protobuf::uint32 value) {
  set_has_remote_ssrc();
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioReceiveConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 2;
inline bool AudioReceiveConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioReceiveConfig::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioReceiveConfig::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioReceiveConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
inline ::google::protobuf::uint32 AudioReceiveConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioReceiveConfig.local_ssrc)
  return local_ssrc_;
}
inline void AudioReceiveConfig::set_local_ssrc(::google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioReceiveConfig.local_ssrc)
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
inline int AudioReceiveConfig::header_extensions_size() const {
  return header_extensions_.size();
}
inline void AudioReceiveConfig::clear_header_extensions() {
  header_extensions_.Clear();
}
inline ::webrtc::rtclog::RtpHeaderExtension* AudioReceiveConfig::mutable_header_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return header_extensions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >*
AudioReceiveConfig::mutable_header_extensions() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return &header_extensions_;
}
inline const ::webrtc::rtclog::RtpHeaderExtension& AudioReceiveConfig::header_extensions(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return header_extensions_.Get(index);
}
inline ::webrtc::rtclog::RtpHeaderExtension* AudioReceiveConfig::add_header_extensions() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return header_extensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >&
AudioReceiveConfig::header_extensions() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return header_extensions_;
}

// -------------------------------------------------------------------

// AudioSendConfig

// optional uint32 ssrc = 1;
inline bool AudioSendConfig::has_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioSendConfig::set_has_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioSendConfig::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioSendConfig::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
inline ::google::protobuf::uint32 AudioSendConfig::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioSendConfig.ssrc)
  return ssrc_;
}
inline void AudioSendConfig::set_ssrc(::google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioSendConfig.ssrc)
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
inline int AudioSendConfig::header_extensions_size() const {
  return header_extensions_.size();
}
inline void AudioSendConfig::clear_header_extensions() {
  header_extensions_.Clear();
}
inline ::webrtc::rtclog::RtpHeaderExtension* AudioSendConfig::mutable_header_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.AudioSendConfig.header_extensions)
  return header_extensions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >*
AudioSendConfig::mutable_header_extensions() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.AudioSendConfig.header_extensions)
  return &header_extensions_;
}
inline const ::webrtc::rtclog::RtpHeaderExtension& AudioSendConfig::header_extensions(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioSendConfig.header_extensions)
  return header_extensions_.Get(index);
}
inline ::webrtc::rtclog::RtpHeaderExtension* AudioSendConfig::add_header_extensions() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.AudioSendConfig.header_extensions)
  return header_extensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::rtclog::RtpHeaderExtension >&
AudioSendConfig::header_extensions() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.AudioSendConfig.header_extensions)
  return header_extensions_;
}

// -------------------------------------------------------------------

// AudioNetworkAdaptation

// optional int32 bitrate_bps = 1;
inline bool AudioNetworkAdaptation::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioNetworkAdaptation::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioNetworkAdaptation::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioNetworkAdaptation::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::int32 AudioNetworkAdaptation::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.bitrate_bps)
  return bitrate_bps_;
}
inline void AudioNetworkAdaptation::set_bitrate_bps(::google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.bitrate_bps)
}

// optional int32 frame_length_ms = 2;
inline bool AudioNetworkAdaptation::has_frame_length_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioNetworkAdaptation::set_has_frame_length_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioNetworkAdaptation::clear_has_frame_length_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioNetworkAdaptation::clear_frame_length_ms() {
  frame_length_ms_ = 0;
  clear_has_frame_length_ms();
}
inline ::google::protobuf::int32 AudioNetworkAdaptation::frame_length_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.frame_length_ms)
  return frame_length_ms_;
}
inline void AudioNetworkAdaptation::set_frame_length_ms(::google::protobuf::int32 value) {
  set_has_frame_length_ms();
  frame_length_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.frame_length_ms)
}

// optional float uplink_packet_loss_fraction = 3;
inline bool AudioNetworkAdaptation::has_uplink_packet_loss_fraction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioNetworkAdaptation::set_has_uplink_packet_loss_fraction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioNetworkAdaptation::clear_has_uplink_packet_loss_fraction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioNetworkAdaptation::clear_uplink_packet_loss_fraction() {
  uplink_packet_loss_fraction_ = 0;
  clear_has_uplink_packet_loss_fraction();
}
inline float AudioNetworkAdaptation::uplink_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.uplink_packet_loss_fraction)
  return uplink_packet_loss_fraction_;
}
inline void AudioNetworkAdaptation::set_uplink_packet_loss_fraction(float value) {
  set_has_uplink_packet_loss_fraction();
  uplink_packet_loss_fraction_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.uplink_packet_loss_fraction)
}

// optional bool enable_fec = 4;
inline bool AudioNetworkAdaptation::has_enable_fec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioNetworkAdaptation::set_has_enable_fec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioNetworkAdaptation::clear_has_enable_fec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioNetworkAdaptation::clear_enable_fec() {
  enable_fec_ = false;
  clear_has_enable_fec();
}
inline bool AudioNetworkAdaptation::enable_fec() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.enable_fec)
  return enable_fec_;
}
inline void AudioNetworkAdaptation::set_enable_fec(bool value) {
  set_has_enable_fec();
  enable_fec_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.enable_fec)
}

// optional bool enable_dtx = 5;
inline bool AudioNetworkAdaptation::has_enable_dtx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioNetworkAdaptation::set_has_enable_dtx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AudioNetworkAdaptation::clear_has_enable_dtx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AudioNetworkAdaptation::clear_enable_dtx() {
  enable_dtx_ = false;
  clear_has_enable_dtx();
}
inline bool AudioNetworkAdaptation::enable_dtx() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.enable_dtx)
  return enable_dtx_;
}
inline void AudioNetworkAdaptation::set_enable_dtx(bool value) {
  set_has_enable_dtx();
  enable_dtx_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.enable_dtx)
}

// optional uint32 num_channels = 6;
inline bool AudioNetworkAdaptation::has_num_channels() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioNetworkAdaptation::set_has_num_channels() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AudioNetworkAdaptation::clear_has_num_channels() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AudioNetworkAdaptation::clear_num_channels() {
  num_channels_ = 0u;
  clear_has_num_channels();
}
inline ::google::protobuf::uint32 AudioNetworkAdaptation::num_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.num_channels)
  return num_channels_;
}
inline void AudioNetworkAdaptation::set_num_channels(::google::protobuf::uint32 value) {
  set_has_num_channels();
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.num_channels)
}

// -------------------------------------------------------------------

// BweProbeCluster

// optional int32 id = 1;
inline bool BweProbeCluster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeCluster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BweProbeCluster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BweProbeCluster::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BweProbeCluster::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.id)
  return id_;
}
inline void BweProbeCluster::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.id)
}

// optional int32 bitrate_bps = 2;
inline bool BweProbeCluster::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeCluster::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BweProbeCluster::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BweProbeCluster::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::int32 BweProbeCluster::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.bitrate_bps)
  return bitrate_bps_;
}
inline void BweProbeCluster::set_bitrate_bps(::google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.bitrate_bps)
}

// optional uint32 min_packets = 3;
inline bool BweProbeCluster::has_min_packets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeCluster::set_has_min_packets() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BweProbeCluster::clear_has_min_packets() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BweProbeCluster::clear_min_packets() {
  min_packets_ = 0u;
  clear_has_min_packets();
}
inline ::google::protobuf::uint32 BweProbeCluster::min_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.min_packets)
  return min_packets_;
}
inline void BweProbeCluster::set_min_packets(::google::protobuf::uint32 value) {
  set_has_min_packets();
  min_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.min_packets)
}

// optional uint32 min_bytes = 4;
inline bool BweProbeCluster::has_min_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BweProbeCluster::set_has_min_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BweProbeCluster::clear_has_min_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BweProbeCluster::clear_min_bytes() {
  min_bytes_ = 0u;
  clear_has_min_bytes();
}
inline ::google::protobuf::uint32 BweProbeCluster::min_bytes() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.min_bytes)
  return min_bytes_;
}
inline void BweProbeCluster::set_min_bytes(::google::protobuf::uint32 value) {
  set_has_min_bytes();
  min_bytes_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.min_bytes)
}

// -------------------------------------------------------------------

// BweProbeResult

// optional int32 id = 1;
inline bool BweProbeResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BweProbeResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BweProbeResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BweProbeResult::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeResult.id)
  return id_;
}
inline void BweProbeResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeResult.id)
}

// optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
inline bool BweProbeResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BweProbeResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BweProbeResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::webrtc::rtclog::BweProbeResult_ResultType BweProbeResult::result() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeResult.result)
  return static_cast< ::webrtc::rtclog::BweProbeResult_ResultType >(result_);
}
inline void BweProbeResult::set_result(::webrtc::rtclog::BweProbeResult_ResultType value) {
  assert(::webrtc::rtclog::BweProbeResult_ResultType_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeResult.result)
}

// optional int32 bitrate_bps = 3;
inline bool BweProbeResult::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeResult::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BweProbeResult::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BweProbeResult::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
inline ::google::protobuf::int32 BweProbeResult::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeResult.bitrate_bps)
  return bitrate_bps_;
}
inline void BweProbeResult::set_bitrate_bps(::google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeResult.bitrate_bps)
}

// -------------------------------------------------------------------

// AlrState

// optional bool in_alr = 1;
inline bool AlrState::has_in_alr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlrState::set_has_in_alr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlrState::clear_has_in_alr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlrState::clear_in_alr() {
  in_alr_ = false;
  clear_has_in_alr();
}
inline bool AlrState::in_alr() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AlrState.in_alr)
  return in_alr_;
}
inline void AlrState::set_in_alr(bool value) {
  set_has_in_alr();
  in_alr_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AlrState.in_alr)
}

// -------------------------------------------------------------------

// IceCandidatePairConfig

// optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidatePairConfigType config_type = 1;
inline bool IceCandidatePairConfig::has_config_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IceCandidatePairConfig::set_has_config_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IceCandidatePairConfig::clear_has_config_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IceCandidatePairConfig::clear_config_type() {
  config_type_ = 0;
  clear_has_config_type();
}
inline ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType IceCandidatePairConfig::config_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.config_type)
  return static_cast< ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType >(config_type_);
}
inline void IceCandidatePairConfig::set_config_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType value) {
  assert(::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType_IsValid(value));
  set_has_config_type();
  config_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.config_type)
}

// optional uint32 candidate_pair_id = 2;
inline bool IceCandidatePairConfig::has_candidate_pair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IceCandidatePairConfig::set_has_candidate_pair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IceCandidatePairConfig::clear_has_candidate_pair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IceCandidatePairConfig::clear_candidate_pair_id() {
  candidate_pair_id_ = 0u;
  clear_has_candidate_pair_id();
}
inline ::google::protobuf::uint32 IceCandidatePairConfig::candidate_pair_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.candidate_pair_id)
  return candidate_pair_id_;
}
inline void IceCandidatePairConfig::set_candidate_pair_id(::google::protobuf::uint32 value) {
  set_has_candidate_pair_id();
  candidate_pair_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.candidate_pair_id)
}

// optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType local_candidate_type = 3;
inline bool IceCandidatePairConfig::has_local_candidate_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IceCandidatePairConfig::set_has_local_candidate_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IceCandidatePairConfig::clear_has_local_candidate_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IceCandidatePairConfig::clear_local_candidate_type() {
  local_candidate_type_ = 0;
  clear_has_local_candidate_type();
}
inline ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::local_candidate_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.local_candidate_type)
  return static_cast< ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType >(local_candidate_type_);
}
inline void IceCandidatePairConfig::set_local_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value) {
  assert(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType_IsValid(value));
  set_has_local_candidate_type();
  local_candidate_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.local_candidate_type)
}

// optional .webrtc.rtclog.IceCandidatePairConfig.Protocol local_relay_protocol = 4;
inline bool IceCandidatePairConfig::has_local_relay_protocol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IceCandidatePairConfig::set_has_local_relay_protocol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IceCandidatePairConfig::clear_has_local_relay_protocol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IceCandidatePairConfig::clear_local_relay_protocol() {
  local_relay_protocol_ = 0;
  clear_has_local_relay_protocol();
}
inline ::webrtc::rtclog::IceCandidatePairConfig_Protocol IceCandidatePairConfig::local_relay_protocol() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.local_relay_protocol)
  return static_cast< ::webrtc::rtclog::IceCandidatePairConfig_Protocol >(local_relay_protocol_);
}
inline void IceCandidatePairConfig::set_local_relay_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value) {
  assert(::webrtc::rtclog::IceCandidatePairConfig_Protocol_IsValid(value));
  set_has_local_relay_protocol();
  local_relay_protocol_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.local_relay_protocol)
}

// optional .webrtc.rtclog.IceCandidatePairConfig.NetworkType local_network_type = 5;
inline bool IceCandidatePairConfig::has_local_network_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IceCandidatePairConfig::set_has_local_network_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IceCandidatePairConfig::clear_has_local_network_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IceCandidatePairConfig::clear_local_network_type() {
  local_network_type_ = 0;
  clear_has_local_network_type();
}
inline ::webrtc::rtclog::IceCandidatePairConfig_NetworkType IceCandidatePairConfig::local_network_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.local_network_type)
  return static_cast< ::webrtc::rtclog::IceCandidatePairConfig_NetworkType >(local_network_type_);
}
inline void IceCandidatePairConfig::set_local_network_type(::webrtc::rtclog::IceCandidatePairConfig_NetworkType value) {
  assert(::webrtc::rtclog::IceCandidatePairConfig_NetworkType_IsValid(value));
  set_has_local_network_type();
  local_network_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.local_network_type)
}

// optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily local_address_family = 6;
inline bool IceCandidatePairConfig::has_local_address_family() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IceCandidatePairConfig::set_has_local_address_family() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IceCandidatePairConfig::clear_has_local_address_family() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IceCandidatePairConfig::clear_local_address_family() {
  local_address_family_ = 0;
  clear_has_local_address_family();
}
inline ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::local_address_family() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.local_address_family)
  return static_cast< ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily >(local_address_family_);
}
inline void IceCandidatePairConfig::set_local_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value) {
  assert(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily_IsValid(value));
  set_has_local_address_family();
  local_address_family_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.local_address_family)
}

// optional .webrtc.rtclog.IceCandidatePairConfig.IceCandidateType remote_candidate_type = 7;
inline bool IceCandidatePairConfig::has_remote_candidate_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IceCandidatePairConfig::set_has_remote_candidate_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IceCandidatePairConfig::clear_has_remote_candidate_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IceCandidatePairConfig::clear_remote_candidate_type() {
  remote_candidate_type_ = 0;
  clear_has_remote_candidate_type();
}
inline ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType IceCandidatePairConfig::remote_candidate_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.remote_candidate_type)
  return static_cast< ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType >(remote_candidate_type_);
}
inline void IceCandidatePairConfig::set_remote_candidate_type(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType value) {
  assert(::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType_IsValid(value));
  set_has_remote_candidate_type();
  remote_candidate_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.remote_candidate_type)
}

// optional .webrtc.rtclog.IceCandidatePairConfig.AddressFamily remote_address_family = 8;
inline bool IceCandidatePairConfig::has_remote_address_family() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IceCandidatePairConfig::set_has_remote_address_family() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IceCandidatePairConfig::clear_has_remote_address_family() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IceCandidatePairConfig::clear_remote_address_family() {
  remote_address_family_ = 0;
  clear_has_remote_address_family();
}
inline ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily IceCandidatePairConfig::remote_address_family() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.remote_address_family)
  return static_cast< ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily >(remote_address_family_);
}
inline void IceCandidatePairConfig::set_remote_address_family(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily value) {
  assert(::webrtc::rtclog::IceCandidatePairConfig_AddressFamily_IsValid(value));
  set_has_remote_address_family();
  remote_address_family_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.remote_address_family)
}

// optional .webrtc.rtclog.IceCandidatePairConfig.Protocol candidate_pair_protocol = 9;
inline bool IceCandidatePairConfig::has_candidate_pair_protocol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IceCandidatePairConfig::set_has_candidate_pair_protocol() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IceCandidatePairConfig::clear_has_candidate_pair_protocol() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IceCandidatePairConfig::clear_candidate_pair_protocol() {
  candidate_pair_protocol_ = 0;
  clear_has_candidate_pair_protocol();
}
inline ::webrtc::rtclog::IceCandidatePairConfig_Protocol IceCandidatePairConfig::candidate_pair_protocol() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairConfig.candidate_pair_protocol)
  return static_cast< ::webrtc::rtclog::IceCandidatePairConfig_Protocol >(candidate_pair_protocol_);
}
inline void IceCandidatePairConfig::set_candidate_pair_protocol(::webrtc::rtclog::IceCandidatePairConfig_Protocol value) {
  assert(::webrtc::rtclog::IceCandidatePairConfig_Protocol_IsValid(value));
  set_has_candidate_pair_protocol();
  candidate_pair_protocol_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairConfig.candidate_pair_protocol)
}

// -------------------------------------------------------------------

// IceCandidatePairEvent

// optional .webrtc.rtclog.IceCandidatePairEvent.IceCandidatePairEventType event_type = 1;
inline bool IceCandidatePairEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IceCandidatePairEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IceCandidatePairEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IceCandidatePairEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType IceCandidatePairEvent::event_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairEvent.event_type)
  return static_cast< ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType >(event_type_);
}
inline void IceCandidatePairEvent::set_event_type(::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType value) {
  assert(::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairEvent.event_type)
}

// optional uint32 candidate_pair_id = 2;
inline bool IceCandidatePairEvent::has_candidate_pair_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IceCandidatePairEvent::set_has_candidate_pair_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IceCandidatePairEvent::clear_has_candidate_pair_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IceCandidatePairEvent::clear_candidate_pair_id() {
  candidate_pair_id_ = 0u;
  clear_has_candidate_pair_id();
}
inline ::google::protobuf::uint32 IceCandidatePairEvent::candidate_pair_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.IceCandidatePairEvent.candidate_pair_id)
  return candidate_pair_id_;
}
inline void IceCandidatePairEvent::set_candidate_pair_id(::google::protobuf::uint32 value) {
  set_has_candidate_pair_id();
  candidate_pair_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.IceCandidatePairEvent.candidate_pair_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtclog
}  // namespace webrtc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::webrtc::rtclog::Event_EventType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::DelayBasedBweUpdate_DetectorState> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::VideoReceiveConfig_RtcpMode> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::BweProbeResult_ResultType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::IceCandidatePairConfig_IceCandidatePairConfigType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::IceCandidatePairConfig_IceCandidateType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::IceCandidatePairConfig_Protocol> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::IceCandidatePairConfig_AddressFamily> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::IceCandidatePairConfig_NetworkType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::IceCandidatePairEvent_IceCandidatePairEventType> : ::std::true_type {};
template <> struct is_proto_enum< ::webrtc::rtclog::MediaType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rtc_5fevent_5flog_2eproto
