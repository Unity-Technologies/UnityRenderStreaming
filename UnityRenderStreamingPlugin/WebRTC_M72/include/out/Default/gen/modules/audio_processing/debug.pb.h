// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#ifndef PROTOBUF_INCLUDED_debug_2eproto
#define PROTOBUF_INCLUDED_debug_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto 

namespace protobuf_debug_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_debug_2eproto
namespace webrtc {
namespace audioproc {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Init;
class InitDefaultTypeInternal;
extern InitDefaultTypeInternal _Init_default_instance_;
class ReverseStream;
class ReverseStreamDefaultTypeInternal;
extern ReverseStreamDefaultTypeInternal _ReverseStream_default_instance_;
class RuntimeSetting;
class RuntimeSettingDefaultTypeInternal;
extern RuntimeSettingDefaultTypeInternal _RuntimeSetting_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
}  // namespace audioproc
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> ::webrtc::audioproc::Config* Arena::CreateMaybeMessage<::webrtc::audioproc::Config>(Arena*);
template<> ::webrtc::audioproc::Event* Arena::CreateMaybeMessage<::webrtc::audioproc::Event>(Arena*);
template<> ::webrtc::audioproc::Init* Arena::CreateMaybeMessage<::webrtc::audioproc::Init>(Arena*);
template<> ::webrtc::audioproc::ReverseStream* Arena::CreateMaybeMessage<::webrtc::audioproc::ReverseStream>(Arena*);
template<> ::webrtc::audioproc::RuntimeSetting* Arena::CreateMaybeMessage<::webrtc::audioproc::RuntimeSetting>(Arena*);
template<> ::webrtc::audioproc::Stream* Arena::CreateMaybeMessage<::webrtc::audioproc::Stream>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace webrtc {
namespace audioproc {

enum Event_Type {
  Event_Type_INIT = 0,
  Event_Type_REVERSE_STREAM = 1,
  Event_Type_STREAM = 2,
  Event_Type_CONFIG = 3,
  Event_Type_UNKNOWN_EVENT = 4,
  Event_Type_RUNTIME_SETTING = 5
};
bool Event_Type_IsValid(int value);
const Event_Type Event_Type_Type_MIN = Event_Type_INIT;
const Event_Type Event_Type_Type_MAX = Event_Type_RUNTIME_SETTING;
const int Event_Type_Type_ARRAYSIZE = Event_Type_Type_MAX + 1;

// ===================================================================

class Init : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.Init) */ {
 public:
  Init();
  virtual ~Init();

  Init(const Init& from);

  inline Init& operator=(const Init& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Init(Init&& from) noexcept
    : Init() {
    *this = ::std::move(from);
  }

  inline Init& operator=(Init&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Init& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Init* internal_default_instance() {
    return reinterpret_cast<const Init*>(
               &_Init_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Init* other);
  friend void swap(Init& a, Init& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Init* New() const final {
    return CreateMaybeMessage<Init>(NULL);
  }

  Init* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Init>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Init& from);
  void MergeFrom(const Init& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Init* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sample_rate = 1;
  bool has_sample_rate() const;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 1;
  ::google::protobuf::int32 sample_rate() const;
  void set_sample_rate(::google::protobuf::int32 value);

  // optional int32 device_sample_rate = 2 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_device_sample_rate() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_device_sample_rate();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDeviceSampleRateFieldNumber = 2;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 device_sample_rate() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_device_sample_rate(::google::protobuf::int32 value);

  // optional int32 num_input_channels = 3;
  bool has_num_input_channels() const;
  void clear_num_input_channels();
  static const int kNumInputChannelsFieldNumber = 3;
  ::google::protobuf::int32 num_input_channels() const;
  void set_num_input_channels(::google::protobuf::int32 value);

  // optional int32 num_output_channels = 4;
  bool has_num_output_channels() const;
  void clear_num_output_channels();
  static const int kNumOutputChannelsFieldNumber = 4;
  ::google::protobuf::int32 num_output_channels() const;
  void set_num_output_channels(::google::protobuf::int32 value);

  // optional int32 num_reverse_channels = 5;
  bool has_num_reverse_channels() const;
  void clear_num_reverse_channels();
  static const int kNumReverseChannelsFieldNumber = 5;
  ::google::protobuf::int32 num_reverse_channels() const;
  void set_num_reverse_channels(::google::protobuf::int32 value);

  // optional int32 reverse_sample_rate = 6;
  bool has_reverse_sample_rate() const;
  void clear_reverse_sample_rate();
  static const int kReverseSampleRateFieldNumber = 6;
  ::google::protobuf::int32 reverse_sample_rate() const;
  void set_reverse_sample_rate(::google::protobuf::int32 value);

  // optional int32 output_sample_rate = 7;
  bool has_output_sample_rate() const;
  void clear_output_sample_rate();
  static const int kOutputSampleRateFieldNumber = 7;
  ::google::protobuf::int32 output_sample_rate() const;
  void set_output_sample_rate(::google::protobuf::int32 value);

  // optional int32 reverse_output_sample_rate = 8;
  bool has_reverse_output_sample_rate() const;
  void clear_reverse_output_sample_rate();
  static const int kReverseOutputSampleRateFieldNumber = 8;
  ::google::protobuf::int32 reverse_output_sample_rate() const;
  void set_reverse_output_sample_rate(::google::protobuf::int32 value);

  // optional int64 timestamp_ms = 10;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 10;
  ::google::protobuf::int64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::int64 value);

  // optional int32 num_reverse_output_channels = 9;
  bool has_num_reverse_output_channels() const;
  void clear_num_reverse_output_channels();
  static const int kNumReverseOutputChannelsFieldNumber = 9;
  ::google::protobuf::int32 num_reverse_output_channels() const;
  void set_num_reverse_output_channels(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Init)
 private:
  void set_has_sample_rate();
  void clear_has_sample_rate();
  void set_has_device_sample_rate();
  void clear_has_device_sample_rate();
  void set_has_num_input_channels();
  void clear_has_num_input_channels();
  void set_has_num_output_channels();
  void clear_has_num_output_channels();
  void set_has_num_reverse_channels();
  void clear_has_num_reverse_channels();
  void set_has_reverse_sample_rate();
  void clear_has_reverse_sample_rate();
  void set_has_output_sample_rate();
  void clear_has_output_sample_rate();
  void set_has_reverse_output_sample_rate();
  void clear_has_reverse_output_sample_rate();
  void set_has_num_reverse_output_channels();
  void clear_has_num_reverse_output_channels();
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 sample_rate_;
  ::google::protobuf::int32 device_sample_rate_;
  ::google::protobuf::int32 num_input_channels_;
  ::google::protobuf::int32 num_output_channels_;
  ::google::protobuf::int32 num_reverse_channels_;
  ::google::protobuf::int32 reverse_sample_rate_;
  ::google::protobuf::int32 output_sample_rate_;
  ::google::protobuf::int32 reverse_output_sample_rate_;
  ::google::protobuf::int64 timestamp_ms_;
  ::google::protobuf::int32 num_reverse_output_channels_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReverseStream : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.ReverseStream) */ {
 public:
  ReverseStream();
  virtual ~ReverseStream();

  ReverseStream(const ReverseStream& from);

  inline ReverseStream& operator=(const ReverseStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReverseStream(ReverseStream&& from) noexcept
    : ReverseStream() {
    *this = ::std::move(from);
  }

  inline ReverseStream& operator=(ReverseStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReverseStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReverseStream* internal_default_instance() {
    return reinterpret_cast<const ReverseStream*>(
               &_ReverseStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ReverseStream* other);
  friend void swap(ReverseStream& a, ReverseStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReverseStream* New() const final {
    return CreateMaybeMessage<ReverseStream>(NULL);
  }

  ReverseStream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReverseStream>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ReverseStream& from);
  void MergeFrom(const ReverseStream& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReverseStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes channel = 2;
  int channel_size() const;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::std::string& channel(int index) const;
  ::std::string* mutable_channel(int index);
  void set_channel(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_channel(int index, ::std::string&& value);
  #endif
  void set_channel(int index, const char* value);
  void set_channel(int index, const void* value, size_t size);
  ::std::string* add_channel();
  void add_channel(const ::std::string& value);
  #if LANG_CXX11
  void add_channel(::std::string&& value);
  #endif
  void add_channel(const char* value);
  void add_channel(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& channel() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channel();

  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.ReverseStream)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channel_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stream : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.Stream) */ {
 public:
  Stream();
  virtual ~Stream();

  Stream(const Stream& from);

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(Stream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Stream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Stream* other);
  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stream* New() const final {
    return CreateMaybeMessage<Stream>(NULL);
  }

  Stream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Stream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes input_channel = 7;
  int input_channel_size() const;
  void clear_input_channel();
  static const int kInputChannelFieldNumber = 7;
  const ::std::string& input_channel(int index) const;
  ::std::string* mutable_input_channel(int index);
  void set_input_channel(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input_channel(int index, ::std::string&& value);
  #endif
  void set_input_channel(int index, const char* value);
  void set_input_channel(int index, const void* value, size_t size);
  ::std::string* add_input_channel();
  void add_input_channel(const ::std::string& value);
  #if LANG_CXX11
  void add_input_channel(::std::string&& value);
  #endif
  void add_input_channel(const char* value);
  void add_input_channel(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input_channel() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input_channel();

  // repeated bytes output_channel = 8;
  int output_channel_size() const;
  void clear_output_channel();
  static const int kOutputChannelFieldNumber = 8;
  const ::std::string& output_channel(int index) const;
  ::std::string* mutable_output_channel(int index);
  void set_output_channel(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output_channel(int index, ::std::string&& value);
  #endif
  void set_output_channel(int index, const char* value);
  void set_output_channel(int index, const void* value, size_t size);
  ::std::string* add_output_channel();
  void add_output_channel(const ::std::string& value);
  #if LANG_CXX11
  void add_output_channel(::std::string&& value);
  #endif
  void add_output_channel(const char* value);
  void add_output_channel(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output_channel() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output_channel();

  // optional bytes input_data = 1;
  bool has_input_data() const;
  void clear_input_data();
  static const int kInputDataFieldNumber = 1;
  const ::std::string& input_data() const;
  void set_input_data(const ::std::string& value);
  #if LANG_CXX11
  void set_input_data(::std::string&& value);
  #endif
  void set_input_data(const char* value);
  void set_input_data(const void* value, size_t size);
  ::std::string* mutable_input_data();
  ::std::string* release_input_data();
  void set_allocated_input_data(::std::string* input_data);

  // optional bytes output_data = 2;
  bool has_output_data() const;
  void clear_output_data();
  static const int kOutputDataFieldNumber = 2;
  const ::std::string& output_data() const;
  void set_output_data(const ::std::string& value);
  #if LANG_CXX11
  void set_output_data(::std::string&& value);
  #endif
  void set_output_data(const char* value);
  void set_output_data(const void* value, size_t size);
  ::std::string* mutable_output_data();
  ::std::string* release_output_data();
  void set_allocated_output_data(::std::string* output_data);

  // optional int32 delay = 3;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 3;
  ::google::protobuf::int32 delay() const;
  void set_delay(::google::protobuf::int32 value);

  // optional sint32 drift = 4;
  bool has_drift() const;
  void clear_drift();
  static const int kDriftFieldNumber = 4;
  ::google::protobuf::int32 drift() const;
  void set_drift(::google::protobuf::int32 value);

  // optional int32 level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional bool keypress = 6;
  bool has_keypress() const;
  void clear_keypress();
  static const int kKeypressFieldNumber = 6;
  bool keypress() const;
  void set_keypress(bool value);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Stream)
 private:
  void set_has_input_data();
  void clear_has_input_data();
  void set_has_output_data();
  void clear_has_output_data();
  void set_has_delay();
  void clear_has_delay();
  void set_has_drift();
  void clear_has_drift();
  void set_has_level();
  void clear_has_level();
  void set_has_keypress();
  void clear_has_keypress();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_channel_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_channel_;
  ::google::protobuf::internal::ArenaStringPtr input_data_;
  ::google::protobuf::internal::ArenaStringPtr output_data_;
  ::google::protobuf::int32 delay_;
  ::google::protobuf::int32 drift_;
  ::google::protobuf::int32 level_;
  bool keypress_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string experiments_description = 17;
  bool has_experiments_description() const;
  void clear_experiments_description();
  static const int kExperimentsDescriptionFieldNumber = 17;
  const ::std::string& experiments_description() const;
  void set_experiments_description(const ::std::string& value);
  #if LANG_CXX11
  void set_experiments_description(::std::string&& value);
  #endif
  void set_experiments_description(const char* value);
  void set_experiments_description(const char* value, size_t size);
  ::std::string* mutable_experiments_description();
  ::std::string* release_experiments_description();
  void set_allocated_experiments_description(::std::string* experiments_description);

  // optional bool aec_enabled = 1;
  bool has_aec_enabled() const;
  void clear_aec_enabled();
  static const int kAecEnabledFieldNumber = 1;
  bool aec_enabled() const;
  void set_aec_enabled(bool value);

  // optional bool aec_delay_agnostic_enabled = 2;
  bool has_aec_delay_agnostic_enabled() const;
  void clear_aec_delay_agnostic_enabled();
  static const int kAecDelayAgnosticEnabledFieldNumber = 2;
  bool aec_delay_agnostic_enabled() const;
  void set_aec_delay_agnostic_enabled(bool value);

  // optional bool aec_drift_compensation_enabled = 3;
  bool has_aec_drift_compensation_enabled() const;
  void clear_aec_drift_compensation_enabled();
  static const int kAecDriftCompensationEnabledFieldNumber = 3;
  bool aec_drift_compensation_enabled() const;
  void set_aec_drift_compensation_enabled(bool value);

  // optional bool aec_extended_filter_enabled = 4;
  bool has_aec_extended_filter_enabled() const;
  void clear_aec_extended_filter_enabled();
  static const int kAecExtendedFilterEnabledFieldNumber = 4;
  bool aec_extended_filter_enabled() const;
  void set_aec_extended_filter_enabled(bool value);

  // optional int32 aec_suppression_level = 5;
  bool has_aec_suppression_level() const;
  void clear_aec_suppression_level();
  static const int kAecSuppressionLevelFieldNumber = 5;
  ::google::protobuf::int32 aec_suppression_level() const;
  void set_aec_suppression_level(::google::protobuf::int32 value);

  // optional int32 aecm_routing_mode = 8 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_aecm_routing_mode() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_aecm_routing_mode();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAecmRoutingModeFieldNumber = 8;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::google::protobuf::int32 aecm_routing_mode() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_aecm_routing_mode(::google::protobuf::int32 value);

  // optional bool aecm_enabled = 6;
  bool has_aecm_enabled() const;
  void clear_aecm_enabled();
  static const int kAecmEnabledFieldNumber = 6;
  bool aecm_enabled() const;
  void set_aecm_enabled(bool value);

  // optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_aecm_comfort_noise_enabled() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_aecm_comfort_noise_enabled();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAecmComfortNoiseEnabledFieldNumber = 7;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool aecm_comfort_noise_enabled() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_aecm_comfort_noise_enabled(bool value);

  // optional bool agc_enabled = 9;
  bool has_agc_enabled() const;
  void clear_agc_enabled();
  static const int kAgcEnabledFieldNumber = 9;
  bool agc_enabled() const;
  void set_agc_enabled(bool value);

  // optional bool agc_limiter_enabled = 11;
  bool has_agc_limiter_enabled() const;
  void clear_agc_limiter_enabled();
  static const int kAgcLimiterEnabledFieldNumber = 11;
  bool agc_limiter_enabled() const;
  void set_agc_limiter_enabled(bool value);

  // optional int32 agc_mode = 10;
  bool has_agc_mode() const;
  void clear_agc_mode();
  static const int kAgcModeFieldNumber = 10;
  ::google::protobuf::int32 agc_mode() const;
  void set_agc_mode(::google::protobuf::int32 value);

  // optional bool noise_robust_agc_enabled = 12;
  bool has_noise_robust_agc_enabled() const;
  void clear_noise_robust_agc_enabled();
  static const int kNoiseRobustAgcEnabledFieldNumber = 12;
  bool noise_robust_agc_enabled() const;
  void set_noise_robust_agc_enabled(bool value);

  // optional bool hpf_enabled = 13;
  bool has_hpf_enabled() const;
  void clear_hpf_enabled();
  static const int kHpfEnabledFieldNumber = 13;
  bool hpf_enabled() const;
  void set_hpf_enabled(bool value);

  // optional bool ns_enabled = 14;
  bool has_ns_enabled() const;
  void clear_ns_enabled();
  static const int kNsEnabledFieldNumber = 14;
  bool ns_enabled() const;
  void set_ns_enabled(bool value);

  // optional bool transient_suppression_enabled = 16;
  bool has_transient_suppression_enabled() const;
  void clear_transient_suppression_enabled();
  static const int kTransientSuppressionEnabledFieldNumber = 16;
  bool transient_suppression_enabled() const;
  void set_transient_suppression_enabled(bool value);

  // optional int32 ns_level = 15;
  bool has_ns_level() const;
  void clear_ns_level();
  static const int kNsLevelFieldNumber = 15;
  ::google::protobuf::int32 ns_level() const;
  void set_ns_level(::google::protobuf::int32 value);

  // optional bool pre_amplifier_enabled = 19;
  bool has_pre_amplifier_enabled() const;
  void clear_pre_amplifier_enabled();
  static const int kPreAmplifierEnabledFieldNumber = 19;
  bool pre_amplifier_enabled() const;
  void set_pre_amplifier_enabled(bool value);

  // optional float pre_amplifier_fixed_gain_factor = 20;
  bool has_pre_amplifier_fixed_gain_factor() const;
  void clear_pre_amplifier_fixed_gain_factor();
  static const int kPreAmplifierFixedGainFactorFieldNumber = 20;
  float pre_amplifier_fixed_gain_factor() const;
  void set_pre_amplifier_fixed_gain_factor(float value);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Config)
 private:
  void set_has_aec_enabled();
  void clear_has_aec_enabled();
  void set_has_aec_delay_agnostic_enabled();
  void clear_has_aec_delay_agnostic_enabled();
  void set_has_aec_drift_compensation_enabled();
  void clear_has_aec_drift_compensation_enabled();
  void set_has_aec_extended_filter_enabled();
  void clear_has_aec_extended_filter_enabled();
  void set_has_aec_suppression_level();
  void clear_has_aec_suppression_level();
  void set_has_aecm_enabled();
  void clear_has_aecm_enabled();
  void set_has_aecm_comfort_noise_enabled();
  void clear_has_aecm_comfort_noise_enabled();
  void set_has_aecm_routing_mode();
  void clear_has_aecm_routing_mode();
  void set_has_agc_enabled();
  void clear_has_agc_enabled();
  void set_has_agc_mode();
  void clear_has_agc_mode();
  void set_has_agc_limiter_enabled();
  void clear_has_agc_limiter_enabled();
  void set_has_noise_robust_agc_enabled();
  void clear_has_noise_robust_agc_enabled();
  void set_has_hpf_enabled();
  void clear_has_hpf_enabled();
  void set_has_ns_enabled();
  void clear_has_ns_enabled();
  void set_has_ns_level();
  void clear_has_ns_level();
  void set_has_transient_suppression_enabled();
  void clear_has_transient_suppression_enabled();
  void set_has_experiments_description();
  void clear_has_experiments_description();
  void set_has_pre_amplifier_enabled();
  void clear_has_pre_amplifier_enabled();
  void set_has_pre_amplifier_fixed_gain_factor();
  void clear_has_pre_amplifier_fixed_gain_factor();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr experiments_description_;
  bool aec_enabled_;
  bool aec_delay_agnostic_enabled_;
  bool aec_drift_compensation_enabled_;
  bool aec_extended_filter_enabled_;
  ::google::protobuf::int32 aec_suppression_level_;
  ::google::protobuf::int32 aecm_routing_mode_;
  bool aecm_enabled_;
  bool aecm_comfort_noise_enabled_;
  bool agc_enabled_;
  bool agc_limiter_enabled_;
  ::google::protobuf::int32 agc_mode_;
  bool noise_robust_agc_enabled_;
  bool hpf_enabled_;
  bool ns_enabled_;
  bool transient_suppression_enabled_;
  ::google::protobuf::int32 ns_level_;
  bool pre_amplifier_enabled_;
  float pre_amplifier_fixed_gain_factor_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuntimeSetting : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.RuntimeSetting) */ {
 public:
  RuntimeSetting();
  virtual ~RuntimeSetting();

  RuntimeSetting(const RuntimeSetting& from);

  inline RuntimeSetting& operator=(const RuntimeSetting& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuntimeSetting(RuntimeSetting&& from) noexcept
    : RuntimeSetting() {
    *this = ::std::move(from);
  }

  inline RuntimeSetting& operator=(RuntimeSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RuntimeSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuntimeSetting* internal_default_instance() {
    return reinterpret_cast<const RuntimeSetting*>(
               &_RuntimeSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(RuntimeSetting* other);
  friend void swap(RuntimeSetting& a, RuntimeSetting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuntimeSetting* New() const final {
    return CreateMaybeMessage<RuntimeSetting>(NULL);
  }

  RuntimeSetting* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeSetting>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RuntimeSetting& from);
  void MergeFrom(const RuntimeSetting& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RuntimeSetting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float capture_pre_gain = 1;
  bool has_capture_pre_gain() const;
  void clear_capture_pre_gain();
  static const int kCapturePreGainFieldNumber = 1;
  float capture_pre_gain() const;
  void set_capture_pre_gain(float value);

  // optional float custom_render_processing_setting = 2;
  bool has_custom_render_processing_setting() const;
  void clear_custom_render_processing_setting();
  static const int kCustomRenderProcessingSettingFieldNumber = 2;
  float custom_render_processing_setting() const;
  void set_custom_render_processing_setting(float value);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.RuntimeSetting)
 private:
  void set_has_capture_pre_gain();
  void clear_has_capture_pre_gain();
  void set_has_custom_render_processing_setting();
  void clear_has_custom_render_processing_setting();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float capture_pre_gain_;
  float custom_render_processing_setting_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audioproc.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Event_Type Type;
  static const Type INIT =
    Event_Type_INIT;
  static const Type REVERSE_STREAM =
    Event_Type_REVERSE_STREAM;
  static const Type STREAM =
    Event_Type_STREAM;
  static const Type CONFIG =
    Event_Type_CONFIG;
  static const Type UNKNOWN_EVENT =
    Event_Type_UNKNOWN_EVENT;
  static const Type RUNTIME_SETTING =
    Event_Type_RUNTIME_SETTING;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Event_Type_Type_MIN;
  static const Type Type_MAX =
    Event_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Event_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .webrtc.audioproc.Init init = 2;
  bool has_init() const;
  void clear_init();
  static const int kInitFieldNumber = 2;
  private:
  const ::webrtc::audioproc::Init& _internal_init() const;
  public:
  const ::webrtc::audioproc::Init& init() const;
  ::webrtc::audioproc::Init* release_init();
  ::webrtc::audioproc::Init* mutable_init();
  void set_allocated_init(::webrtc::audioproc::Init* init);

  // optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
  bool has_reverse_stream() const;
  void clear_reverse_stream();
  static const int kReverseStreamFieldNumber = 3;
  private:
  const ::webrtc::audioproc::ReverseStream& _internal_reverse_stream() const;
  public:
  const ::webrtc::audioproc::ReverseStream& reverse_stream() const;
  ::webrtc::audioproc::ReverseStream* release_reverse_stream();
  ::webrtc::audioproc::ReverseStream* mutable_reverse_stream();
  void set_allocated_reverse_stream(::webrtc::audioproc::ReverseStream* reverse_stream);

  // optional .webrtc.audioproc.Stream stream = 4;
  bool has_stream() const;
  void clear_stream();
  static const int kStreamFieldNumber = 4;
  private:
  const ::webrtc::audioproc::Stream& _internal_stream() const;
  public:
  const ::webrtc::audioproc::Stream& stream() const;
  ::webrtc::audioproc::Stream* release_stream();
  ::webrtc::audioproc::Stream* mutable_stream();
  void set_allocated_stream(::webrtc::audioproc::Stream* stream);

  // optional .webrtc.audioproc.Config config = 5;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 5;
  private:
  const ::webrtc::audioproc::Config& _internal_config() const;
  public:
  const ::webrtc::audioproc::Config& config() const;
  ::webrtc::audioproc::Config* release_config();
  ::webrtc::audioproc::Config* mutable_config();
  void set_allocated_config(::webrtc::audioproc::Config* config);

  // optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
  bool has_runtime_setting() const;
  void clear_runtime_setting();
  static const int kRuntimeSettingFieldNumber = 6;
  private:
  const ::webrtc::audioproc::RuntimeSetting& _internal_runtime_setting() const;
  public:
  const ::webrtc::audioproc::RuntimeSetting& runtime_setting() const;
  ::webrtc::audioproc::RuntimeSetting* release_runtime_setting();
  ::webrtc::audioproc::RuntimeSetting* mutable_runtime_setting();
  void set_allocated_runtime_setting(::webrtc::audioproc::RuntimeSetting* runtime_setting);

  // required .webrtc.audioproc.Event.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::webrtc::audioproc::Event_Type type() const;
  void set_type(::webrtc::audioproc::Event_Type value);

  // @@protoc_insertion_point(class_scope:webrtc.audioproc.Event)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_init();
  void clear_has_init();
  void set_has_reverse_stream();
  void clear_has_reverse_stream();
  void set_has_stream();
  void clear_has_stream();
  void set_has_config();
  void clear_has_config();
  void set_has_runtime_setting();
  void clear_has_runtime_setting();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::webrtc::audioproc::Init* init_;
  ::webrtc::audioproc::ReverseStream* reverse_stream_;
  ::webrtc::audioproc::Stream* stream_;
  ::webrtc::audioproc::Config* config_;
  ::webrtc::audioproc::RuntimeSetting* runtime_setting_;
  int type_;
  friend struct ::protobuf_debug_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Init

// optional int32 sample_rate = 1;
inline bool Init::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Init::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Init::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Init::clear_sample_rate() {
  sample_rate_ = 0;
  clear_has_sample_rate();
}
inline ::google::protobuf::int32 Init::sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.sample_rate)
  return sample_rate_;
}
inline void Init::set_sample_rate(::google::protobuf::int32 value) {
  set_has_sample_rate();
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.sample_rate)
}

// optional int32 device_sample_rate = 2 [deprecated = true];
inline bool Init::has_device_sample_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Init::set_has_device_sample_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Init::clear_has_device_sample_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Init::clear_device_sample_rate() {
  device_sample_rate_ = 0;
  clear_has_device_sample_rate();
}
inline ::google::protobuf::int32 Init::device_sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.device_sample_rate)
  return device_sample_rate_;
}
inline void Init::set_device_sample_rate(::google::protobuf::int32 value) {
  set_has_device_sample_rate();
  device_sample_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.device_sample_rate)
}

// optional int32 num_input_channels = 3;
inline bool Init::has_num_input_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Init::set_has_num_input_channels() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Init::clear_has_num_input_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Init::clear_num_input_channels() {
  num_input_channels_ = 0;
  clear_has_num_input_channels();
}
inline ::google::protobuf::int32 Init::num_input_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_input_channels)
  return num_input_channels_;
}
inline void Init::set_num_input_channels(::google::protobuf::int32 value) {
  set_has_num_input_channels();
  num_input_channels_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_input_channels)
}

// optional int32 num_output_channels = 4;
inline bool Init::has_num_output_channels() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Init::set_has_num_output_channels() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Init::clear_has_num_output_channels() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Init::clear_num_output_channels() {
  num_output_channels_ = 0;
  clear_has_num_output_channels();
}
inline ::google::protobuf::int32 Init::num_output_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_output_channels)
  return num_output_channels_;
}
inline void Init::set_num_output_channels(::google::protobuf::int32 value) {
  set_has_num_output_channels();
  num_output_channels_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_output_channels)
}

// optional int32 num_reverse_channels = 5;
inline bool Init::has_num_reverse_channels() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Init::set_has_num_reverse_channels() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Init::clear_has_num_reverse_channels() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Init::clear_num_reverse_channels() {
  num_reverse_channels_ = 0;
  clear_has_num_reverse_channels();
}
inline ::google::protobuf::int32 Init::num_reverse_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_reverse_channels)
  return num_reverse_channels_;
}
inline void Init::set_num_reverse_channels(::google::protobuf::int32 value) {
  set_has_num_reverse_channels();
  num_reverse_channels_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_reverse_channels)
}

// optional int32 reverse_sample_rate = 6;
inline bool Init::has_reverse_sample_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Init::set_has_reverse_sample_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Init::clear_has_reverse_sample_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Init::clear_reverse_sample_rate() {
  reverse_sample_rate_ = 0;
  clear_has_reverse_sample_rate();
}
inline ::google::protobuf::int32 Init::reverse_sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.reverse_sample_rate)
  return reverse_sample_rate_;
}
inline void Init::set_reverse_sample_rate(::google::protobuf::int32 value) {
  set_has_reverse_sample_rate();
  reverse_sample_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.reverse_sample_rate)
}

// optional int32 output_sample_rate = 7;
inline bool Init::has_output_sample_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Init::set_has_output_sample_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Init::clear_has_output_sample_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Init::clear_output_sample_rate() {
  output_sample_rate_ = 0;
  clear_has_output_sample_rate();
}
inline ::google::protobuf::int32 Init::output_sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.output_sample_rate)
  return output_sample_rate_;
}
inline void Init::set_output_sample_rate(::google::protobuf::int32 value) {
  set_has_output_sample_rate();
  output_sample_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.output_sample_rate)
}

// optional int32 reverse_output_sample_rate = 8;
inline bool Init::has_reverse_output_sample_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Init::set_has_reverse_output_sample_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Init::clear_has_reverse_output_sample_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Init::clear_reverse_output_sample_rate() {
  reverse_output_sample_rate_ = 0;
  clear_has_reverse_output_sample_rate();
}
inline ::google::protobuf::int32 Init::reverse_output_sample_rate() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.reverse_output_sample_rate)
  return reverse_output_sample_rate_;
}
inline void Init::set_reverse_output_sample_rate(::google::protobuf::int32 value) {
  set_has_reverse_output_sample_rate();
  reverse_output_sample_rate_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.reverse_output_sample_rate)
}

// optional int32 num_reverse_output_channels = 9;
inline bool Init::has_num_reverse_output_channels() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Init::set_has_num_reverse_output_channels() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Init::clear_has_num_reverse_output_channels() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Init::clear_num_reverse_output_channels() {
  num_reverse_output_channels_ = 0;
  clear_has_num_reverse_output_channels();
}
inline ::google::protobuf::int32 Init::num_reverse_output_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.num_reverse_output_channels)
  return num_reverse_output_channels_;
}
inline void Init::set_num_reverse_output_channels(::google::protobuf::int32 value) {
  set_has_num_reverse_output_channels();
  num_reverse_output_channels_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.num_reverse_output_channels)
}

// optional int64 timestamp_ms = 10;
inline bool Init::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Init::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Init::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Init::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
inline ::google::protobuf::int64 Init::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Init.timestamp_ms)
  return timestamp_ms_;
}
inline void Init::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Init.timestamp_ms)
}

// -------------------------------------------------------------------

// ReverseStream

// optional bytes data = 1;
inline bool ReverseStream::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReverseStream::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReverseStream::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReverseStream::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ReverseStream::data() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.ReverseStream.data)
  return data_.GetNoArena();
}
inline void ReverseStream::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.ReverseStream.data)
}
#if LANG_CXX11
inline void ReverseStream::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.audioproc.ReverseStream.data)
}
#endif
inline void ReverseStream::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.ReverseStream.data)
}
inline void ReverseStream::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.ReverseStream.data)
}
inline ::std::string* ReverseStream::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.ReverseStream.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReverseStream::release_data() {
  // @@protoc_insertion_point(field_release:webrtc.audioproc.ReverseStream.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReverseStream::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.ReverseStream.data)
}

// repeated bytes channel = 2;
inline int ReverseStream::channel_size() const {
  return channel_.size();
}
inline void ReverseStream::clear_channel() {
  channel_.Clear();
}
inline const ::std::string& ReverseStream::channel(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.ReverseStream.channel)
  return channel_.Get(index);
}
inline ::std::string* ReverseStream::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.ReverseStream.channel)
  return channel_.Mutable(index);
}
inline void ReverseStream::set_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:webrtc.audioproc.ReverseStream.channel)
  channel_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReverseStream::set_channel(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:webrtc.audioproc.ReverseStream.channel)
  channel_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReverseStream::set_channel(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::set_channel(int index, const void* value, size_t size) {
  channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.ReverseStream.channel)
}
inline ::std::string* ReverseStream::add_channel() {
  // @@protoc_insertion_point(field_add_mutable:webrtc.audioproc.ReverseStream.channel)
  return channel_.Add();
}
inline void ReverseStream::add_channel(const ::std::string& value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:webrtc.audioproc.ReverseStream.channel)
}
#if LANG_CXX11
inline void ReverseStream::add_channel(::std::string&& value) {
  channel_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:webrtc.audioproc.ReverseStream.channel)
}
#endif
inline void ReverseStream::add_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:webrtc.audioproc.ReverseStream.channel)
}
inline void ReverseStream::add_channel(const void* value, size_t size) {
  channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:webrtc.audioproc.ReverseStream.channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReverseStream::channel() const {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.ReverseStream.channel)
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReverseStream::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.ReverseStream.channel)
  return &channel_;
}

// -------------------------------------------------------------------

// Stream

// optional bytes input_data = 1;
inline bool Stream::has_input_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream::set_has_input_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream::clear_has_input_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream::clear_input_data() {
  input_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_data();
}
inline const ::std::string& Stream::input_data() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.input_data)
  return input_data_.GetNoArena();
}
inline void Stream::set_input_data(const ::std::string& value) {
  set_has_input_data();
  input_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.input_data)
}
#if LANG_CXX11
inline void Stream::set_input_data(::std::string&& value) {
  set_has_input_data();
  input_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.audioproc.Stream.input_data)
}
#endif
inline void Stream::set_input_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_input_data();
  input_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.input_data)
}
inline void Stream::set_input_data(const void* value, size_t size) {
  set_has_input_data();
  input_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.input_data)
}
inline ::std::string* Stream::mutable_input_data() {
  set_has_input_data();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.input_data)
  return input_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream::release_input_data() {
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Stream.input_data)
  if (!has_input_data()) {
    return NULL;
  }
  clear_has_input_data();
  return input_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream::set_allocated_input_data(::std::string* input_data) {
  if (input_data != NULL) {
    set_has_input_data();
  } else {
    clear_has_input_data();
  }
  input_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_data);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Stream.input_data)
}

// optional bytes output_data = 2;
inline bool Stream::has_output_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream::set_has_output_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream::clear_has_output_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stream::clear_output_data() {
  output_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_data();
}
inline const ::std::string& Stream::output_data() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.output_data)
  return output_data_.GetNoArena();
}
inline void Stream::set_output_data(const ::std::string& value) {
  set_has_output_data();
  output_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.output_data)
}
#if LANG_CXX11
inline void Stream::set_output_data(::std::string&& value) {
  set_has_output_data();
  output_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.audioproc.Stream.output_data)
}
#endif
inline void Stream::set_output_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_output_data();
  output_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.output_data)
}
inline void Stream::set_output_data(const void* value, size_t size) {
  set_has_output_data();
  output_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.output_data)
}
inline ::std::string* Stream::mutable_output_data() {
  set_has_output_data();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.output_data)
  return output_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream::release_output_data() {
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Stream.output_data)
  if (!has_output_data()) {
    return NULL;
  }
  clear_has_output_data();
  return output_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream::set_allocated_output_data(::std::string* output_data) {
  if (output_data != NULL) {
    set_has_output_data();
  } else {
    clear_has_output_data();
  }
  output_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_data);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Stream.output_data)
}

// optional int32 delay = 3;
inline bool Stream::has_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stream::set_has_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stream::clear_has_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stream::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::google::protobuf::int32 Stream::delay() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.delay)
  return delay_;
}
inline void Stream::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.delay)
}

// optional sint32 drift = 4;
inline bool Stream::has_drift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stream::set_has_drift() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stream::clear_has_drift() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stream::clear_drift() {
  drift_ = 0;
  clear_has_drift();
}
inline ::google::protobuf::int32 Stream::drift() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.drift)
  return drift_;
}
inline void Stream::set_drift(::google::protobuf::int32 value) {
  set_has_drift();
  drift_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.drift)
}

// optional int32 level = 5;
inline bool Stream::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stream::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stream::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stream::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Stream::level() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.level)
  return level_;
}
inline void Stream::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.level)
}

// optional bool keypress = 6;
inline bool Stream::has_keypress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Stream::set_has_keypress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Stream::clear_has_keypress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Stream::clear_keypress() {
  keypress_ = false;
  clear_has_keypress();
}
inline bool Stream::keypress() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.keypress)
  return keypress_;
}
inline void Stream::set_keypress(bool value) {
  set_has_keypress();
  keypress_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.keypress)
}

// repeated bytes input_channel = 7;
inline int Stream::input_channel_size() const {
  return input_channel_.size();
}
inline void Stream::clear_input_channel() {
  input_channel_.Clear();
}
inline const ::std::string& Stream::input_channel(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.input_channel)
  return input_channel_.Get(index);
}
inline ::std::string* Stream::mutable_input_channel(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.input_channel)
  return input_channel_.Mutable(index);
}
inline void Stream::set_input_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.input_channel)
  input_channel_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Stream::set_input_channel(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.input_channel)
  input_channel_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Stream::set_input_channel(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::set_input_channel(int index, const void* value, size_t size) {
  input_channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.input_channel)
}
inline ::std::string* Stream::add_input_channel() {
  // @@protoc_insertion_point(field_add_mutable:webrtc.audioproc.Stream.input_channel)
  return input_channel_.Add();
}
inline void Stream::add_input_channel(const ::std::string& value) {
  input_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.input_channel)
}
#if LANG_CXX11
inline void Stream::add_input_channel(::std::string&& value) {
  input_channel_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.input_channel)
}
#endif
inline void Stream::add_input_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:webrtc.audioproc.Stream.input_channel)
}
inline void Stream::add_input_channel(const void* value, size_t size) {
  input_channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:webrtc.audioproc.Stream.input_channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Stream::input_channel() const {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.Stream.input_channel)
  return input_channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Stream::mutable_input_channel() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.Stream.input_channel)
  return &input_channel_;
}

// repeated bytes output_channel = 8;
inline int Stream::output_channel_size() const {
  return output_channel_.size();
}
inline void Stream::clear_output_channel() {
  output_channel_.Clear();
}
inline const ::std::string& Stream::output_channel(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Stream.output_channel)
  return output_channel_.Get(index);
}
inline ::std::string* Stream::mutable_output_channel(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Stream.output_channel)
  return output_channel_.Mutable(index);
}
inline void Stream::set_output_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.output_channel)
  output_channel_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Stream::set_output_channel(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Stream.output_channel)
  output_channel_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Stream::set_output_channel(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::set_output_channel(int index, const void* value, size_t size) {
  output_channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Stream.output_channel)
}
inline ::std::string* Stream::add_output_channel() {
  // @@protoc_insertion_point(field_add_mutable:webrtc.audioproc.Stream.output_channel)
  return output_channel_.Add();
}
inline void Stream::add_output_channel(const ::std::string& value) {
  output_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.output_channel)
}
#if LANG_CXX11
inline void Stream::add_output_channel(::std::string&& value) {
  output_channel_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:webrtc.audioproc.Stream.output_channel)
}
#endif
inline void Stream::add_output_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:webrtc.audioproc.Stream.output_channel)
}
inline void Stream::add_output_channel(const void* value, size_t size) {
  output_channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:webrtc.audioproc.Stream.output_channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Stream::output_channel() const {
  // @@protoc_insertion_point(field_list:webrtc.audioproc.Stream.output_channel)
  return output_channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Stream::mutable_output_channel() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audioproc.Stream.output_channel)
  return &output_channel_;
}

// -------------------------------------------------------------------

// Config

// optional bool aec_enabled = 1;
inline bool Config::has_aec_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_aec_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_aec_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_aec_enabled() {
  aec_enabled_ = false;
  clear_has_aec_enabled();
}
inline bool Config::aec_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_enabled)
  return aec_enabled_;
}
inline void Config::set_aec_enabled(bool value) {
  set_has_aec_enabled();
  aec_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_enabled)
}

// optional bool aec_delay_agnostic_enabled = 2;
inline bool Config::has_aec_delay_agnostic_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_aec_delay_agnostic_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_aec_delay_agnostic_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_aec_delay_agnostic_enabled() {
  aec_delay_agnostic_enabled_ = false;
  clear_has_aec_delay_agnostic_enabled();
}
inline bool Config::aec_delay_agnostic_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_delay_agnostic_enabled)
  return aec_delay_agnostic_enabled_;
}
inline void Config::set_aec_delay_agnostic_enabled(bool value) {
  set_has_aec_delay_agnostic_enabled();
  aec_delay_agnostic_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_delay_agnostic_enabled)
}

// optional bool aec_drift_compensation_enabled = 3;
inline bool Config::has_aec_drift_compensation_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_aec_drift_compensation_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_aec_drift_compensation_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_aec_drift_compensation_enabled() {
  aec_drift_compensation_enabled_ = false;
  clear_has_aec_drift_compensation_enabled();
}
inline bool Config::aec_drift_compensation_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_drift_compensation_enabled)
  return aec_drift_compensation_enabled_;
}
inline void Config::set_aec_drift_compensation_enabled(bool value) {
  set_has_aec_drift_compensation_enabled();
  aec_drift_compensation_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_drift_compensation_enabled)
}

// optional bool aec_extended_filter_enabled = 4;
inline bool Config::has_aec_extended_filter_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_aec_extended_filter_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_aec_extended_filter_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_aec_extended_filter_enabled() {
  aec_extended_filter_enabled_ = false;
  clear_has_aec_extended_filter_enabled();
}
inline bool Config::aec_extended_filter_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_extended_filter_enabled)
  return aec_extended_filter_enabled_;
}
inline void Config::set_aec_extended_filter_enabled(bool value) {
  set_has_aec_extended_filter_enabled();
  aec_extended_filter_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_extended_filter_enabled)
}

// optional int32 aec_suppression_level = 5;
inline bool Config::has_aec_suppression_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_aec_suppression_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_aec_suppression_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_aec_suppression_level() {
  aec_suppression_level_ = 0;
  clear_has_aec_suppression_level();
}
inline ::google::protobuf::int32 Config::aec_suppression_level() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aec_suppression_level)
  return aec_suppression_level_;
}
inline void Config::set_aec_suppression_level(::google::protobuf::int32 value) {
  set_has_aec_suppression_level();
  aec_suppression_level_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aec_suppression_level)
}

// optional bool aecm_enabled = 6;
inline bool Config::has_aecm_enabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Config::set_has_aecm_enabled() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Config::clear_has_aecm_enabled() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Config::clear_aecm_enabled() {
  aecm_enabled_ = false;
  clear_has_aecm_enabled();
}
inline bool Config::aecm_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aecm_enabled)
  return aecm_enabled_;
}
inline void Config::set_aecm_enabled(bool value) {
  set_has_aecm_enabled();
  aecm_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aecm_enabled)
}

// optional bool aecm_comfort_noise_enabled = 7 [deprecated = true];
inline bool Config::has_aecm_comfort_noise_enabled() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_aecm_comfort_noise_enabled() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_aecm_comfort_noise_enabled() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_aecm_comfort_noise_enabled() {
  aecm_comfort_noise_enabled_ = false;
  clear_has_aecm_comfort_noise_enabled();
}
inline bool Config::aecm_comfort_noise_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aecm_comfort_noise_enabled)
  return aecm_comfort_noise_enabled_;
}
inline void Config::set_aecm_comfort_noise_enabled(bool value) {
  set_has_aecm_comfort_noise_enabled();
  aecm_comfort_noise_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aecm_comfort_noise_enabled)
}

// optional int32 aecm_routing_mode = 8 [deprecated = true];
inline bool Config::has_aecm_routing_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_aecm_routing_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_aecm_routing_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_aecm_routing_mode() {
  aecm_routing_mode_ = 0;
  clear_has_aecm_routing_mode();
}
inline ::google::protobuf::int32 Config::aecm_routing_mode() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.aecm_routing_mode)
  return aecm_routing_mode_;
}
inline void Config::set_aecm_routing_mode(::google::protobuf::int32 value) {
  set_has_aecm_routing_mode();
  aecm_routing_mode_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.aecm_routing_mode)
}

// optional bool agc_enabled = 9;
inline bool Config::has_agc_enabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Config::set_has_agc_enabled() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Config::clear_has_agc_enabled() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Config::clear_agc_enabled() {
  agc_enabled_ = false;
  clear_has_agc_enabled();
}
inline bool Config::agc_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.agc_enabled)
  return agc_enabled_;
}
inline void Config::set_agc_enabled(bool value) {
  set_has_agc_enabled();
  agc_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.agc_enabled)
}

// optional int32 agc_mode = 10;
inline bool Config::has_agc_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Config::set_has_agc_mode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Config::clear_has_agc_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Config::clear_agc_mode() {
  agc_mode_ = 0;
  clear_has_agc_mode();
}
inline ::google::protobuf::int32 Config::agc_mode() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.agc_mode)
  return agc_mode_;
}
inline void Config::set_agc_mode(::google::protobuf::int32 value) {
  set_has_agc_mode();
  agc_mode_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.agc_mode)
}

// optional bool agc_limiter_enabled = 11;
inline bool Config::has_agc_limiter_enabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Config::set_has_agc_limiter_enabled() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Config::clear_has_agc_limiter_enabled() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Config::clear_agc_limiter_enabled() {
  agc_limiter_enabled_ = false;
  clear_has_agc_limiter_enabled();
}
inline bool Config::agc_limiter_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.agc_limiter_enabled)
  return agc_limiter_enabled_;
}
inline void Config::set_agc_limiter_enabled(bool value) {
  set_has_agc_limiter_enabled();
  agc_limiter_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.agc_limiter_enabled)
}

// optional bool noise_robust_agc_enabled = 12;
inline bool Config::has_noise_robust_agc_enabled() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Config::set_has_noise_robust_agc_enabled() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Config::clear_has_noise_robust_agc_enabled() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Config::clear_noise_robust_agc_enabled() {
  noise_robust_agc_enabled_ = false;
  clear_has_noise_robust_agc_enabled();
}
inline bool Config::noise_robust_agc_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.noise_robust_agc_enabled)
  return noise_robust_agc_enabled_;
}
inline void Config::set_noise_robust_agc_enabled(bool value) {
  set_has_noise_robust_agc_enabled();
  noise_robust_agc_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.noise_robust_agc_enabled)
}

// optional bool hpf_enabled = 13;
inline bool Config::has_hpf_enabled() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Config::set_has_hpf_enabled() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Config::clear_has_hpf_enabled() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Config::clear_hpf_enabled() {
  hpf_enabled_ = false;
  clear_has_hpf_enabled();
}
inline bool Config::hpf_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.hpf_enabled)
  return hpf_enabled_;
}
inline void Config::set_hpf_enabled(bool value) {
  set_has_hpf_enabled();
  hpf_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.hpf_enabled)
}

// optional bool ns_enabled = 14;
inline bool Config::has_ns_enabled() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Config::set_has_ns_enabled() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Config::clear_has_ns_enabled() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Config::clear_ns_enabled() {
  ns_enabled_ = false;
  clear_has_ns_enabled();
}
inline bool Config::ns_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.ns_enabled)
  return ns_enabled_;
}
inline void Config::set_ns_enabled(bool value) {
  set_has_ns_enabled();
  ns_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.ns_enabled)
}

// optional int32 ns_level = 15;
inline bool Config::has_ns_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Config::set_has_ns_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Config::clear_has_ns_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Config::clear_ns_level() {
  ns_level_ = 0;
  clear_has_ns_level();
}
inline ::google::protobuf::int32 Config::ns_level() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.ns_level)
  return ns_level_;
}
inline void Config::set_ns_level(::google::protobuf::int32 value) {
  set_has_ns_level();
  ns_level_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.ns_level)
}

// optional bool transient_suppression_enabled = 16;
inline bool Config::has_transient_suppression_enabled() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Config::set_has_transient_suppression_enabled() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Config::clear_has_transient_suppression_enabled() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Config::clear_transient_suppression_enabled() {
  transient_suppression_enabled_ = false;
  clear_has_transient_suppression_enabled();
}
inline bool Config::transient_suppression_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.transient_suppression_enabled)
  return transient_suppression_enabled_;
}
inline void Config::set_transient_suppression_enabled(bool value) {
  set_has_transient_suppression_enabled();
  transient_suppression_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.transient_suppression_enabled)
}

// optional string experiments_description = 17;
inline bool Config::has_experiments_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_experiments_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_experiments_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_experiments_description() {
  experiments_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_experiments_description();
}
inline const ::std::string& Config::experiments_description() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.experiments_description)
  return experiments_description_.GetNoArena();
}
inline void Config::set_experiments_description(const ::std::string& value) {
  set_has_experiments_description();
  experiments_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.experiments_description)
}
#if LANG_CXX11
inline void Config::set_experiments_description(::std::string&& value) {
  set_has_experiments_description();
  experiments_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.audioproc.Config.experiments_description)
}
#endif
inline void Config::set_experiments_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_experiments_description();
  experiments_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.audioproc.Config.experiments_description)
}
inline void Config::set_experiments_description(const char* value, size_t size) {
  set_has_experiments_description();
  experiments_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.audioproc.Config.experiments_description)
}
inline ::std::string* Config::mutable_experiments_description() {
  set_has_experiments_description();
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Config.experiments_description)
  return experiments_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_experiments_description() {
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Config.experiments_description)
  if (!has_experiments_description()) {
    return NULL;
  }
  clear_has_experiments_description();
  return experiments_description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_experiments_description(::std::string* experiments_description) {
  if (experiments_description != NULL) {
    set_has_experiments_description();
  } else {
    clear_has_experiments_description();
  }
  experiments_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), experiments_description);
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Config.experiments_description)
}

// optional bool pre_amplifier_enabled = 19;
inline bool Config::has_pre_amplifier_enabled() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Config::set_has_pre_amplifier_enabled() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Config::clear_has_pre_amplifier_enabled() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Config::clear_pre_amplifier_enabled() {
  pre_amplifier_enabled_ = false;
  clear_has_pre_amplifier_enabled();
}
inline bool Config::pre_amplifier_enabled() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.pre_amplifier_enabled)
  return pre_amplifier_enabled_;
}
inline void Config::set_pre_amplifier_enabled(bool value) {
  set_has_pre_amplifier_enabled();
  pre_amplifier_enabled_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.pre_amplifier_enabled)
}

// optional float pre_amplifier_fixed_gain_factor = 20;
inline bool Config::has_pre_amplifier_fixed_gain_factor() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Config::set_has_pre_amplifier_fixed_gain_factor() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Config::clear_has_pre_amplifier_fixed_gain_factor() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Config::clear_pre_amplifier_fixed_gain_factor() {
  pre_amplifier_fixed_gain_factor_ = 0;
  clear_has_pre_amplifier_fixed_gain_factor();
}
inline float Config::pre_amplifier_fixed_gain_factor() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Config.pre_amplifier_fixed_gain_factor)
  return pre_amplifier_fixed_gain_factor_;
}
inline void Config::set_pre_amplifier_fixed_gain_factor(float value) {
  set_has_pre_amplifier_fixed_gain_factor();
  pre_amplifier_fixed_gain_factor_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Config.pre_amplifier_fixed_gain_factor)
}

// -------------------------------------------------------------------

// RuntimeSetting

// optional float capture_pre_gain = 1;
inline bool RuntimeSetting::has_capture_pre_gain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RuntimeSetting::set_has_capture_pre_gain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RuntimeSetting::clear_has_capture_pre_gain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RuntimeSetting::clear_capture_pre_gain() {
  capture_pre_gain_ = 0;
  clear_has_capture_pre_gain();
}
inline float RuntimeSetting::capture_pre_gain() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.RuntimeSetting.capture_pre_gain)
  return capture_pre_gain_;
}
inline void RuntimeSetting::set_capture_pre_gain(float value) {
  set_has_capture_pre_gain();
  capture_pre_gain_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.RuntimeSetting.capture_pre_gain)
}

// optional float custom_render_processing_setting = 2;
inline bool RuntimeSetting::has_custom_render_processing_setting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RuntimeSetting::set_has_custom_render_processing_setting() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RuntimeSetting::clear_has_custom_render_processing_setting() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RuntimeSetting::clear_custom_render_processing_setting() {
  custom_render_processing_setting_ = 0;
  clear_has_custom_render_processing_setting();
}
inline float RuntimeSetting::custom_render_processing_setting() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.RuntimeSetting.custom_render_processing_setting)
  return custom_render_processing_setting_;
}
inline void RuntimeSetting::set_custom_render_processing_setting(float value) {
  set_has_custom_render_processing_setting();
  custom_render_processing_setting_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.RuntimeSetting.custom_render_processing_setting)
}

// -------------------------------------------------------------------

// Event

// required .webrtc.audioproc.Event.Type type = 1;
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::webrtc::audioproc::Event_Type Event::type() const {
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.type)
  return static_cast< ::webrtc::audioproc::Event_Type >(type_);
}
inline void Event::set_type(::webrtc::audioproc::Event_Type value) {
  assert(::webrtc::audioproc::Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audioproc.Event.type)
}

// optional .webrtc.audioproc.Init init = 2;
inline bool Event::has_init() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_init() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_init() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_init() {
  if (init_ != NULL) init_->Clear();
  clear_has_init();
}
inline const ::webrtc::audioproc::Init& Event::_internal_init() const {
  return *init_;
}
inline const ::webrtc::audioproc::Init& Event::init() const {
  const ::webrtc::audioproc::Init* p = init_;
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.init)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audioproc::Init*>(
      &::webrtc::audioproc::_Init_default_instance_);
}
inline ::webrtc::audioproc::Init* Event::release_init() {
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.init)
  clear_has_init();
  ::webrtc::audioproc::Init* temp = init_;
  init_ = NULL;
  return temp;
}
inline ::webrtc::audioproc::Init* Event::mutable_init() {
  set_has_init();
  if (init_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::Init>(GetArenaNoVirtual());
    init_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.init)
  return init_;
}
inline void Event::set_allocated_init(::webrtc::audioproc::Init* init) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_;
  }
  if (init) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
  } else {
    clear_has_init();
  }
  init_ = init;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.init)
}

// optional .webrtc.audioproc.ReverseStream reverse_stream = 3;
inline bool Event::has_reverse_stream() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_reverse_stream() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_reverse_stream() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_reverse_stream() {
  if (reverse_stream_ != NULL) reverse_stream_->Clear();
  clear_has_reverse_stream();
}
inline const ::webrtc::audioproc::ReverseStream& Event::_internal_reverse_stream() const {
  return *reverse_stream_;
}
inline const ::webrtc::audioproc::ReverseStream& Event::reverse_stream() const {
  const ::webrtc::audioproc::ReverseStream* p = reverse_stream_;
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.reverse_stream)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audioproc::ReverseStream*>(
      &::webrtc::audioproc::_ReverseStream_default_instance_);
}
inline ::webrtc::audioproc::ReverseStream* Event::release_reverse_stream() {
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.reverse_stream)
  clear_has_reverse_stream();
  ::webrtc::audioproc::ReverseStream* temp = reverse_stream_;
  reverse_stream_ = NULL;
  return temp;
}
inline ::webrtc::audioproc::ReverseStream* Event::mutable_reverse_stream() {
  set_has_reverse_stream();
  if (reverse_stream_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::ReverseStream>(GetArenaNoVirtual());
    reverse_stream_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.reverse_stream)
  return reverse_stream_;
}
inline void Event::set_allocated_reverse_stream(::webrtc::audioproc::ReverseStream* reverse_stream) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reverse_stream_;
  }
  if (reverse_stream) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reverse_stream = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reverse_stream, submessage_arena);
    }
    set_has_reverse_stream();
  } else {
    clear_has_reverse_stream();
  }
  reverse_stream_ = reverse_stream;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.reverse_stream)
}

// optional .webrtc.audioproc.Stream stream = 4;
inline bool Event::has_stream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_stream() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_stream() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_stream() {
  if (stream_ != NULL) stream_->Clear();
  clear_has_stream();
}
inline const ::webrtc::audioproc::Stream& Event::_internal_stream() const {
  return *stream_;
}
inline const ::webrtc::audioproc::Stream& Event::stream() const {
  const ::webrtc::audioproc::Stream* p = stream_;
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.stream)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audioproc::Stream*>(
      &::webrtc::audioproc::_Stream_default_instance_);
}
inline ::webrtc::audioproc::Stream* Event::release_stream() {
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.stream)
  clear_has_stream();
  ::webrtc::audioproc::Stream* temp = stream_;
  stream_ = NULL;
  return temp;
}
inline ::webrtc::audioproc::Stream* Event::mutable_stream() {
  set_has_stream();
  if (stream_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::Stream>(GetArenaNoVirtual());
    stream_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.stream)
  return stream_;
}
inline void Event::set_allocated_stream(::webrtc::audioproc::Stream* stream) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stream_;
  }
  if (stream) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stream = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    set_has_stream();
  } else {
    clear_has_stream();
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.stream)
}

// optional .webrtc.audioproc.Config config = 5;
inline bool Event::has_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_config() {
  if (config_ != NULL) config_->Clear();
  clear_has_config();
}
inline const ::webrtc::audioproc::Config& Event::_internal_config() const {
  return *config_;
}
inline const ::webrtc::audioproc::Config& Event::config() const {
  const ::webrtc::audioproc::Config* p = config_;
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.config)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audioproc::Config*>(
      &::webrtc::audioproc::_Config_default_instance_);
}
inline ::webrtc::audioproc::Config* Event::release_config() {
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.config)
  clear_has_config();
  ::webrtc::audioproc::Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::webrtc::audioproc::Config* Event::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::Config>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.config)
  return config_;
}
inline void Event::set_allocated_config(::webrtc::audioproc::Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
  } else {
    clear_has_config();
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.config)
}

// optional .webrtc.audioproc.RuntimeSetting runtime_setting = 6;
inline bool Event::has_runtime_setting() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_runtime_setting() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_runtime_setting() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_runtime_setting() {
  if (runtime_setting_ != NULL) runtime_setting_->Clear();
  clear_has_runtime_setting();
}
inline const ::webrtc::audioproc::RuntimeSetting& Event::_internal_runtime_setting() const {
  return *runtime_setting_;
}
inline const ::webrtc::audioproc::RuntimeSetting& Event::runtime_setting() const {
  const ::webrtc::audioproc::RuntimeSetting* p = runtime_setting_;
  // @@protoc_insertion_point(field_get:webrtc.audioproc.Event.runtime_setting)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audioproc::RuntimeSetting*>(
      &::webrtc::audioproc::_RuntimeSetting_default_instance_);
}
inline ::webrtc::audioproc::RuntimeSetting* Event::release_runtime_setting() {
  // @@protoc_insertion_point(field_release:webrtc.audioproc.Event.runtime_setting)
  clear_has_runtime_setting();
  ::webrtc::audioproc::RuntimeSetting* temp = runtime_setting_;
  runtime_setting_ = NULL;
  return temp;
}
inline ::webrtc::audioproc::RuntimeSetting* Event::mutable_runtime_setting() {
  set_has_runtime_setting();
  if (runtime_setting_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audioproc::RuntimeSetting>(GetArenaNoVirtual());
    runtime_setting_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audioproc.Event.runtime_setting)
  return runtime_setting_;
}
inline void Event::set_allocated_runtime_setting(::webrtc::audioproc::RuntimeSetting* runtime_setting) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete runtime_setting_;
  }
  if (runtime_setting) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      runtime_setting = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, runtime_setting, submessage_arena);
    }
    set_has_runtime_setting();
  } else {
    clear_has_runtime_setting();
  }
  runtime_setting_ = runtime_setting;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audioproc.Event.runtime_setting)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace audioproc
}  // namespace webrtc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::webrtc::audioproc::Event_Type> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_debug_2eproto
