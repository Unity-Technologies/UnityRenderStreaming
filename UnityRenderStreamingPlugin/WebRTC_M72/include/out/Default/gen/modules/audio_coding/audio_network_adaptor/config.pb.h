// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_INCLUDED_config_2eproto
#define PROTOBUF_INCLUDED_config_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto 

namespace protobuf_config_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_config_2eproto
namespace webrtc {
namespace audio_network_adaptor {
namespace config {
class BitrateController;
class BitrateControllerDefaultTypeInternal;
extern BitrateControllerDefaultTypeInternal _BitrateController_default_instance_;
class ChannelController;
class ChannelControllerDefaultTypeInternal;
extern ChannelControllerDefaultTypeInternal _ChannelController_default_instance_;
class Controller;
class ControllerDefaultTypeInternal;
extern ControllerDefaultTypeInternal _Controller_default_instance_;
class ControllerManager;
class ControllerManagerDefaultTypeInternal;
extern ControllerManagerDefaultTypeInternal _ControllerManager_default_instance_;
class Controller_ScoringPoint;
class Controller_ScoringPointDefaultTypeInternal;
extern Controller_ScoringPointDefaultTypeInternal _Controller_ScoringPoint_default_instance_;
class DtxController;
class DtxControllerDefaultTypeInternal;
extern DtxControllerDefaultTypeInternal _DtxController_default_instance_;
class FecController;
class FecControllerDefaultTypeInternal;
extern FecControllerDefaultTypeInternal _FecController_default_instance_;
class FecControllerRplrBased;
class FecControllerRplrBasedDefaultTypeInternal;
extern FecControllerRplrBasedDefaultTypeInternal _FecControllerRplrBased_default_instance_;
class FecControllerRplrBased_Threshold;
class FecControllerRplrBased_ThresholdDefaultTypeInternal;
extern FecControllerRplrBased_ThresholdDefaultTypeInternal _FecControllerRplrBased_Threshold_default_instance_;
class FecController_Threshold;
class FecController_ThresholdDefaultTypeInternal;
extern FecController_ThresholdDefaultTypeInternal _FecController_Threshold_default_instance_;
class FrameLengthController;
class FrameLengthControllerDefaultTypeInternal;
extern FrameLengthControllerDefaultTypeInternal _FrameLengthController_default_instance_;
}  // namespace config
}  // namespace audio_network_adaptor
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> ::webrtc::audio_network_adaptor::config::BitrateController* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::BitrateController>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::ChannelController* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::ChannelController>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::Controller* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::Controller>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::ControllerManager* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::ControllerManager>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::Controller_ScoringPoint>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::DtxController* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::DtxController>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::FecController* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecController>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecControllerRplrBased>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::FecController_Threshold* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecController_Threshold>(Arena*);
template<> ::webrtc::audio_network_adaptor::config::FrameLengthController* Arena::CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FrameLengthController>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace webrtc {
namespace audio_network_adaptor {
namespace config {

// ===================================================================

class FecController_Threshold : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.FecController.Threshold) */ {
 public:
  FecController_Threshold();
  virtual ~FecController_Threshold();

  FecController_Threshold(const FecController_Threshold& from);

  inline FecController_Threshold& operator=(const FecController_Threshold& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FecController_Threshold(FecController_Threshold&& from) noexcept
    : FecController_Threshold() {
    *this = ::std::move(from);
  }

  inline FecController_Threshold& operator=(FecController_Threshold&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FecController_Threshold& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FecController_Threshold* internal_default_instance() {
    return reinterpret_cast<const FecController_Threshold*>(
               &_FecController_Threshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FecController_Threshold* other);
  friend void swap(FecController_Threshold& a, FecController_Threshold& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FecController_Threshold* New() const final {
    return CreateMaybeMessage<FecController_Threshold>(NULL);
  }

  FecController_Threshold* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FecController_Threshold>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FecController_Threshold& from);
  void MergeFrom(const FecController_Threshold& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FecController_Threshold* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 low_bandwidth_bps = 1;
  bool has_low_bandwidth_bps() const;
  void clear_low_bandwidth_bps();
  static const int kLowBandwidthBpsFieldNumber = 1;
  ::google::protobuf::int32 low_bandwidth_bps() const;
  void set_low_bandwidth_bps(::google::protobuf::int32 value);

  // optional float low_bandwidth_packet_loss = 2;
  bool has_low_bandwidth_packet_loss() const;
  void clear_low_bandwidth_packet_loss();
  static const int kLowBandwidthPacketLossFieldNumber = 2;
  float low_bandwidth_packet_loss() const;
  void set_low_bandwidth_packet_loss(float value);

  // optional int32 high_bandwidth_bps = 3;
  bool has_high_bandwidth_bps() const;
  void clear_high_bandwidth_bps();
  static const int kHighBandwidthBpsFieldNumber = 3;
  ::google::protobuf::int32 high_bandwidth_bps() const;
  void set_high_bandwidth_bps(::google::protobuf::int32 value);

  // optional float high_bandwidth_packet_loss = 4;
  bool has_high_bandwidth_packet_loss() const;
  void clear_high_bandwidth_packet_loss();
  static const int kHighBandwidthPacketLossFieldNumber = 4;
  float high_bandwidth_packet_loss() const;
  void set_high_bandwidth_packet_loss(float value);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.FecController.Threshold)
 private:
  void set_has_low_bandwidth_bps();
  void clear_has_low_bandwidth_bps();
  void set_has_low_bandwidth_packet_loss();
  void clear_has_low_bandwidth_packet_loss();
  void set_has_high_bandwidth_bps();
  void clear_has_high_bandwidth_bps();
  void set_has_high_bandwidth_packet_loss();
  void clear_has_high_bandwidth_packet_loss();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 low_bandwidth_bps_;
  float low_bandwidth_packet_loss_;
  ::google::protobuf::int32 high_bandwidth_bps_;
  float high_bandwidth_packet_loss_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FecController : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.FecController) */ {
 public:
  FecController();
  virtual ~FecController();

  FecController(const FecController& from);

  inline FecController& operator=(const FecController& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FecController(FecController&& from) noexcept
    : FecController() {
    *this = ::std::move(from);
  }

  inline FecController& operator=(FecController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FecController& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FecController* internal_default_instance() {
    return reinterpret_cast<const FecController*>(
               &_FecController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FecController* other);
  friend void swap(FecController& a, FecController& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FecController* New() const final {
    return CreateMaybeMessage<FecController>(NULL);
  }

  FecController* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FecController>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FecController& from);
  void MergeFrom(const FecController& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FecController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FecController_Threshold Threshold;

  // accessors -------------------------------------------------------

  // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
  bool has_fec_enabling_threshold() const;
  void clear_fec_enabling_threshold();
  static const int kFecEnablingThresholdFieldNumber = 1;
  private:
  const ::webrtc::audio_network_adaptor::config::FecController_Threshold& _internal_fec_enabling_threshold() const;
  public:
  const ::webrtc::audio_network_adaptor::config::FecController_Threshold& fec_enabling_threshold() const;
  ::webrtc::audio_network_adaptor::config::FecController_Threshold* release_fec_enabling_threshold();
  ::webrtc::audio_network_adaptor::config::FecController_Threshold* mutable_fec_enabling_threshold();
  void set_allocated_fec_enabling_threshold(::webrtc::audio_network_adaptor::config::FecController_Threshold* fec_enabling_threshold);

  // optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
  bool has_fec_disabling_threshold() const;
  void clear_fec_disabling_threshold();
  static const int kFecDisablingThresholdFieldNumber = 2;
  private:
  const ::webrtc::audio_network_adaptor::config::FecController_Threshold& _internal_fec_disabling_threshold() const;
  public:
  const ::webrtc::audio_network_adaptor::config::FecController_Threshold& fec_disabling_threshold() const;
  ::webrtc::audio_network_adaptor::config::FecController_Threshold* release_fec_disabling_threshold();
  ::webrtc::audio_network_adaptor::config::FecController_Threshold* mutable_fec_disabling_threshold();
  void set_allocated_fec_disabling_threshold(::webrtc::audio_network_adaptor::config::FecController_Threshold* fec_disabling_threshold);

  // optional int32 time_constant_ms = 3;
  bool has_time_constant_ms() const;
  void clear_time_constant_ms();
  static const int kTimeConstantMsFieldNumber = 3;
  ::google::protobuf::int32 time_constant_ms() const;
  void set_time_constant_ms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.FecController)
 private:
  void set_has_fec_enabling_threshold();
  void clear_has_fec_enabling_threshold();
  void set_has_fec_disabling_threshold();
  void clear_has_fec_disabling_threshold();
  void set_has_time_constant_ms();
  void clear_has_time_constant_ms();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::webrtc::audio_network_adaptor::config::FecController_Threshold* fec_enabling_threshold_;
  ::webrtc::audio_network_adaptor::config::FecController_Threshold* fec_disabling_threshold_;
  ::google::protobuf::int32 time_constant_ms_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FecControllerRplrBased_Threshold : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold) */ {
 public:
  FecControllerRplrBased_Threshold();
  virtual ~FecControllerRplrBased_Threshold();

  FecControllerRplrBased_Threshold(const FecControllerRplrBased_Threshold& from);

  inline FecControllerRplrBased_Threshold& operator=(const FecControllerRplrBased_Threshold& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FecControllerRplrBased_Threshold(FecControllerRplrBased_Threshold&& from) noexcept
    : FecControllerRplrBased_Threshold() {
    *this = ::std::move(from);
  }

  inline FecControllerRplrBased_Threshold& operator=(FecControllerRplrBased_Threshold&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FecControllerRplrBased_Threshold& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FecControllerRplrBased_Threshold* internal_default_instance() {
    return reinterpret_cast<const FecControllerRplrBased_Threshold*>(
               &_FecControllerRplrBased_Threshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FecControllerRplrBased_Threshold* other);
  friend void swap(FecControllerRplrBased_Threshold& a, FecControllerRplrBased_Threshold& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FecControllerRplrBased_Threshold* New() const final {
    return CreateMaybeMessage<FecControllerRplrBased_Threshold>(NULL);
  }

  FecControllerRplrBased_Threshold* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FecControllerRplrBased_Threshold>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FecControllerRplrBased_Threshold& from);
  void MergeFrom(const FecControllerRplrBased_Threshold& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FecControllerRplrBased_Threshold* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 low_bandwidth_bps = 1;
  bool has_low_bandwidth_bps() const;
  void clear_low_bandwidth_bps();
  static const int kLowBandwidthBpsFieldNumber = 1;
  ::google::protobuf::int32 low_bandwidth_bps() const;
  void set_low_bandwidth_bps(::google::protobuf::int32 value);

  // optional float low_bandwidth_recoverable_packet_loss = 2;
  bool has_low_bandwidth_recoverable_packet_loss() const;
  void clear_low_bandwidth_recoverable_packet_loss();
  static const int kLowBandwidthRecoverablePacketLossFieldNumber = 2;
  float low_bandwidth_recoverable_packet_loss() const;
  void set_low_bandwidth_recoverable_packet_loss(float value);

  // optional int32 high_bandwidth_bps = 3;
  bool has_high_bandwidth_bps() const;
  void clear_high_bandwidth_bps();
  static const int kHighBandwidthBpsFieldNumber = 3;
  ::google::protobuf::int32 high_bandwidth_bps() const;
  void set_high_bandwidth_bps(::google::protobuf::int32 value);

  // optional float high_bandwidth_recoverable_packet_loss = 4;
  bool has_high_bandwidth_recoverable_packet_loss() const;
  void clear_high_bandwidth_recoverable_packet_loss();
  static const int kHighBandwidthRecoverablePacketLossFieldNumber = 4;
  float high_bandwidth_recoverable_packet_loss() const;
  void set_high_bandwidth_recoverable_packet_loss(float value);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold)
 private:
  void set_has_low_bandwidth_bps();
  void clear_has_low_bandwidth_bps();
  void set_has_low_bandwidth_recoverable_packet_loss();
  void clear_has_low_bandwidth_recoverable_packet_loss();
  void set_has_high_bandwidth_bps();
  void clear_has_high_bandwidth_bps();
  void set_has_high_bandwidth_recoverable_packet_loss();
  void clear_has_high_bandwidth_recoverable_packet_loss();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 low_bandwidth_bps_;
  float low_bandwidth_recoverable_packet_loss_;
  ::google::protobuf::int32 high_bandwidth_bps_;
  float high_bandwidth_recoverable_packet_loss_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FecControllerRplrBased : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.FecControllerRplrBased) */ {
 public:
  FecControllerRplrBased();
  virtual ~FecControllerRplrBased();

  FecControllerRplrBased(const FecControllerRplrBased& from);

  inline FecControllerRplrBased& operator=(const FecControllerRplrBased& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FecControllerRplrBased(FecControllerRplrBased&& from) noexcept
    : FecControllerRplrBased() {
    *this = ::std::move(from);
  }

  inline FecControllerRplrBased& operator=(FecControllerRplrBased&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FecControllerRplrBased& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FecControllerRplrBased* internal_default_instance() {
    return reinterpret_cast<const FecControllerRplrBased*>(
               &_FecControllerRplrBased_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FecControllerRplrBased* other);
  friend void swap(FecControllerRplrBased& a, FecControllerRplrBased& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FecControllerRplrBased* New() const final {
    return CreateMaybeMessage<FecControllerRplrBased>(NULL);
  }

  FecControllerRplrBased* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FecControllerRplrBased>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FecControllerRplrBased& from);
  void MergeFrom(const FecControllerRplrBased& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FecControllerRplrBased* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FecControllerRplrBased_Threshold Threshold;

  // accessors -------------------------------------------------------

  // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
  bool has_fec_enabling_threshold() const;
  void clear_fec_enabling_threshold();
  static const int kFecEnablingThresholdFieldNumber = 1;
  private:
  const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& _internal_fec_enabling_threshold() const;
  public:
  const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& fec_enabling_threshold() const;
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* release_fec_enabling_threshold();
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* mutable_fec_enabling_threshold();
  void set_allocated_fec_enabling_threshold(::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* fec_enabling_threshold);

  // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
  bool has_fec_disabling_threshold() const;
  void clear_fec_disabling_threshold();
  static const int kFecDisablingThresholdFieldNumber = 2;
  private:
  const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& _internal_fec_disabling_threshold() const;
  public:
  const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& fec_disabling_threshold() const;
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* release_fec_disabling_threshold();
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* mutable_fec_disabling_threshold();
  void set_allocated_fec_disabling_threshold(::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* fec_disabling_threshold);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.FecControllerRplrBased)
 private:
  void set_has_fec_enabling_threshold();
  void clear_has_fec_enabling_threshold();
  void set_has_fec_disabling_threshold();
  void clear_has_fec_disabling_threshold();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* fec_enabling_threshold_;
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* fec_disabling_threshold_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameLengthController : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.FrameLengthController) */ {
 public:
  FrameLengthController();
  virtual ~FrameLengthController();

  FrameLengthController(const FrameLengthController& from);

  inline FrameLengthController& operator=(const FrameLengthController& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameLengthController(FrameLengthController&& from) noexcept
    : FrameLengthController() {
    *this = ::std::move(from);
  }

  inline FrameLengthController& operator=(FrameLengthController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FrameLengthController& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameLengthController* internal_default_instance() {
    return reinterpret_cast<const FrameLengthController*>(
               &_FrameLengthController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(FrameLengthController* other);
  friend void swap(FrameLengthController& a, FrameLengthController& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameLengthController* New() const final {
    return CreateMaybeMessage<FrameLengthController>(NULL);
  }

  FrameLengthController* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameLengthController>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FrameLengthController& from);
  void MergeFrom(const FrameLengthController& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameLengthController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float fl_increasing_packet_loss_fraction = 1;
  bool has_fl_increasing_packet_loss_fraction() const;
  void clear_fl_increasing_packet_loss_fraction();
  static const int kFlIncreasingPacketLossFractionFieldNumber = 1;
  float fl_increasing_packet_loss_fraction() const;
  void set_fl_increasing_packet_loss_fraction(float value);

  // optional float fl_decreasing_packet_loss_fraction = 2;
  bool has_fl_decreasing_packet_loss_fraction() const;
  void clear_fl_decreasing_packet_loss_fraction();
  static const int kFlDecreasingPacketLossFractionFieldNumber = 2;
  float fl_decreasing_packet_loss_fraction() const;
  void set_fl_decreasing_packet_loss_fraction(float value);

  // optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
  bool has_fl_20ms_to_60ms_bandwidth_bps() const;
  void clear_fl_20ms_to_60ms_bandwidth_bps();
  static const int kFl20MsTo60MsBandwidthBpsFieldNumber = 3;
  ::google::protobuf::int32 fl_20ms_to_60ms_bandwidth_bps() const;
  void set_fl_20ms_to_60ms_bandwidth_bps(::google::protobuf::int32 value);

  // optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
  bool has_fl_60ms_to_20ms_bandwidth_bps() const;
  void clear_fl_60ms_to_20ms_bandwidth_bps();
  static const int kFl60MsTo20MsBandwidthBpsFieldNumber = 4;
  ::google::protobuf::int32 fl_60ms_to_20ms_bandwidth_bps() const;
  void set_fl_60ms_to_20ms_bandwidth_bps(::google::protobuf::int32 value);

  // optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
  bool has_fl_60ms_to_120ms_bandwidth_bps() const;
  void clear_fl_60ms_to_120ms_bandwidth_bps();
  static const int kFl60MsTo120MsBandwidthBpsFieldNumber = 5;
  ::google::protobuf::int32 fl_60ms_to_120ms_bandwidth_bps() const;
  void set_fl_60ms_to_120ms_bandwidth_bps(::google::protobuf::int32 value);

  // optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
  bool has_fl_120ms_to_60ms_bandwidth_bps() const;
  void clear_fl_120ms_to_60ms_bandwidth_bps();
  static const int kFl120MsTo60MsBandwidthBpsFieldNumber = 6;
  ::google::protobuf::int32 fl_120ms_to_60ms_bandwidth_bps() const;
  void set_fl_120ms_to_60ms_bandwidth_bps(::google::protobuf::int32 value);

  // optional int32 fl_increase_overhead_offset = 7;
  bool has_fl_increase_overhead_offset() const;
  void clear_fl_increase_overhead_offset();
  static const int kFlIncreaseOverheadOffsetFieldNumber = 7;
  ::google::protobuf::int32 fl_increase_overhead_offset() const;
  void set_fl_increase_overhead_offset(::google::protobuf::int32 value);

  // optional int32 fl_decrease_overhead_offset = 8;
  bool has_fl_decrease_overhead_offset() const;
  void clear_fl_decrease_overhead_offset();
  static const int kFlDecreaseOverheadOffsetFieldNumber = 8;
  ::google::protobuf::int32 fl_decrease_overhead_offset() const;
  void set_fl_decrease_overhead_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.FrameLengthController)
 private:
  void set_has_fl_increasing_packet_loss_fraction();
  void clear_has_fl_increasing_packet_loss_fraction();
  void set_has_fl_decreasing_packet_loss_fraction();
  void clear_has_fl_decreasing_packet_loss_fraction();
  void set_has_fl_20ms_to_60ms_bandwidth_bps();
  void clear_has_fl_20ms_to_60ms_bandwidth_bps();
  void set_has_fl_60ms_to_20ms_bandwidth_bps();
  void clear_has_fl_60ms_to_20ms_bandwidth_bps();
  void set_has_fl_60ms_to_120ms_bandwidth_bps();
  void clear_has_fl_60ms_to_120ms_bandwidth_bps();
  void set_has_fl_120ms_to_60ms_bandwidth_bps();
  void clear_has_fl_120ms_to_60ms_bandwidth_bps();
  void set_has_fl_increase_overhead_offset();
  void clear_has_fl_increase_overhead_offset();
  void set_has_fl_decrease_overhead_offset();
  void clear_has_fl_decrease_overhead_offset();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float fl_increasing_packet_loss_fraction_;
  float fl_decreasing_packet_loss_fraction_;
  ::google::protobuf::int32 fl_20ms_to_60ms_bandwidth_bps_;
  ::google::protobuf::int32 fl_60ms_to_20ms_bandwidth_bps_;
  ::google::protobuf::int32 fl_60ms_to_120ms_bandwidth_bps_;
  ::google::protobuf::int32 fl_120ms_to_60ms_bandwidth_bps_;
  ::google::protobuf::int32 fl_increase_overhead_offset_;
  ::google::protobuf::int32 fl_decrease_overhead_offset_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelController : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.ChannelController) */ {
 public:
  ChannelController();
  virtual ~ChannelController();

  ChannelController(const ChannelController& from);

  inline ChannelController& operator=(const ChannelController& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelController(ChannelController&& from) noexcept
    : ChannelController() {
    *this = ::std::move(from);
  }

  inline ChannelController& operator=(ChannelController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChannelController& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelController* internal_default_instance() {
    return reinterpret_cast<const ChannelController*>(
               &_ChannelController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChannelController* other);
  friend void swap(ChannelController& a, ChannelController& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelController* New() const final {
    return CreateMaybeMessage<ChannelController>(NULL);
  }

  ChannelController* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelController>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChannelController& from);
  void MergeFrom(const ChannelController& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channel_1_to_2_bandwidth_bps = 1;
  bool has_channel_1_to_2_bandwidth_bps() const;
  void clear_channel_1_to_2_bandwidth_bps();
  static const int kChannel1To2BandwidthBpsFieldNumber = 1;
  ::google::protobuf::int32 channel_1_to_2_bandwidth_bps() const;
  void set_channel_1_to_2_bandwidth_bps(::google::protobuf::int32 value);

  // optional int32 channel_2_to_1_bandwidth_bps = 2;
  bool has_channel_2_to_1_bandwidth_bps() const;
  void clear_channel_2_to_1_bandwidth_bps();
  static const int kChannel2To1BandwidthBpsFieldNumber = 2;
  ::google::protobuf::int32 channel_2_to_1_bandwidth_bps() const;
  void set_channel_2_to_1_bandwidth_bps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.ChannelController)
 private:
  void set_has_channel_1_to_2_bandwidth_bps();
  void clear_has_channel_1_to_2_bandwidth_bps();
  void set_has_channel_2_to_1_bandwidth_bps();
  void clear_has_channel_2_to_1_bandwidth_bps();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 channel_1_to_2_bandwidth_bps_;
  ::google::protobuf::int32 channel_2_to_1_bandwidth_bps_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DtxController : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.DtxController) */ {
 public:
  DtxController();
  virtual ~DtxController();

  DtxController(const DtxController& from);

  inline DtxController& operator=(const DtxController& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DtxController(DtxController&& from) noexcept
    : DtxController() {
    *this = ::std::move(from);
  }

  inline DtxController& operator=(DtxController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DtxController& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DtxController* internal_default_instance() {
    return reinterpret_cast<const DtxController*>(
               &_DtxController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DtxController* other);
  friend void swap(DtxController& a, DtxController& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DtxController* New() const final {
    return CreateMaybeMessage<DtxController>(NULL);
  }

  DtxController* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DtxController>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DtxController& from);
  void MergeFrom(const DtxController& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DtxController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dtx_enabling_bandwidth_bps = 1;
  bool has_dtx_enabling_bandwidth_bps() const;
  void clear_dtx_enabling_bandwidth_bps();
  static const int kDtxEnablingBandwidthBpsFieldNumber = 1;
  ::google::protobuf::int32 dtx_enabling_bandwidth_bps() const;
  void set_dtx_enabling_bandwidth_bps(::google::protobuf::int32 value);

  // optional int32 dtx_disabling_bandwidth_bps = 2;
  bool has_dtx_disabling_bandwidth_bps() const;
  void clear_dtx_disabling_bandwidth_bps();
  static const int kDtxDisablingBandwidthBpsFieldNumber = 2;
  ::google::protobuf::int32 dtx_disabling_bandwidth_bps() const;
  void set_dtx_disabling_bandwidth_bps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.DtxController)
 private:
  void set_has_dtx_enabling_bandwidth_bps();
  void clear_has_dtx_enabling_bandwidth_bps();
  void set_has_dtx_disabling_bandwidth_bps();
  void clear_has_dtx_disabling_bandwidth_bps();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 dtx_enabling_bandwidth_bps_;
  ::google::protobuf::int32 dtx_disabling_bandwidth_bps_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BitrateController : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.BitrateController) */ {
 public:
  BitrateController();
  virtual ~BitrateController();

  BitrateController(const BitrateController& from);

  inline BitrateController& operator=(const BitrateController& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BitrateController(BitrateController&& from) noexcept
    : BitrateController() {
    *this = ::std::move(from);
  }

  inline BitrateController& operator=(BitrateController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BitrateController& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitrateController* internal_default_instance() {
    return reinterpret_cast<const BitrateController*>(
               &_BitrateController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(BitrateController* other);
  friend void swap(BitrateController& a, BitrateController& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BitrateController* New() const final {
    return CreateMaybeMessage<BitrateController>(NULL);
  }

  BitrateController* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BitrateController>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BitrateController& from);
  void MergeFrom(const BitrateController& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BitrateController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fl_increase_overhead_offset = 1;
  bool has_fl_increase_overhead_offset() const;
  void clear_fl_increase_overhead_offset();
  static const int kFlIncreaseOverheadOffsetFieldNumber = 1;
  ::google::protobuf::int32 fl_increase_overhead_offset() const;
  void set_fl_increase_overhead_offset(::google::protobuf::int32 value);

  // optional int32 fl_decrease_overhead_offset = 2;
  bool has_fl_decrease_overhead_offset() const;
  void clear_fl_decrease_overhead_offset();
  static const int kFlDecreaseOverheadOffsetFieldNumber = 2;
  ::google::protobuf::int32 fl_decrease_overhead_offset() const;
  void set_fl_decrease_overhead_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.BitrateController)
 private:
  void set_has_fl_increase_overhead_offset();
  void clear_has_fl_increase_overhead_offset();
  void set_has_fl_decrease_overhead_offset();
  void clear_has_fl_decrease_overhead_offset();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 fl_increase_overhead_offset_;
  ::google::protobuf::int32 fl_decrease_overhead_offset_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Controller_ScoringPoint : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.Controller.ScoringPoint) */ {
 public:
  Controller_ScoringPoint();
  virtual ~Controller_ScoringPoint();

  Controller_ScoringPoint(const Controller_ScoringPoint& from);

  inline Controller_ScoringPoint& operator=(const Controller_ScoringPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Controller_ScoringPoint(Controller_ScoringPoint&& from) noexcept
    : Controller_ScoringPoint() {
    *this = ::std::move(from);
  }

  inline Controller_ScoringPoint& operator=(Controller_ScoringPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Controller_ScoringPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Controller_ScoringPoint* internal_default_instance() {
    return reinterpret_cast<const Controller_ScoringPoint*>(
               &_Controller_ScoringPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Controller_ScoringPoint* other);
  friend void swap(Controller_ScoringPoint& a, Controller_ScoringPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Controller_ScoringPoint* New() const final {
    return CreateMaybeMessage<Controller_ScoringPoint>(NULL);
  }

  Controller_ScoringPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Controller_ScoringPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Controller_ScoringPoint& from);
  void MergeFrom(const Controller_ScoringPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Controller_ScoringPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uplink_bandwidth_bps = 1;
  bool has_uplink_bandwidth_bps() const;
  void clear_uplink_bandwidth_bps();
  static const int kUplinkBandwidthBpsFieldNumber = 1;
  ::google::protobuf::int32 uplink_bandwidth_bps() const;
  void set_uplink_bandwidth_bps(::google::protobuf::int32 value);

  // optional float uplink_packet_loss_fraction = 2;
  bool has_uplink_packet_loss_fraction() const;
  void clear_uplink_packet_loss_fraction();
  static const int kUplinkPacketLossFractionFieldNumber = 2;
  float uplink_packet_loss_fraction() const;
  void set_uplink_packet_loss_fraction(float value);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.Controller.ScoringPoint)
 private:
  void set_has_uplink_bandwidth_bps();
  void clear_has_uplink_bandwidth_bps();
  void set_has_uplink_packet_loss_fraction();
  void clear_has_uplink_packet_loss_fraction();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 uplink_bandwidth_bps_;
  float uplink_packet_loss_fraction_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Controller : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.Controller) */ {
 public:
  Controller();
  virtual ~Controller();

  Controller(const Controller& from);

  inline Controller& operator=(const Controller& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Controller(Controller&& from) noexcept
    : Controller() {
    *this = ::std::move(from);
  }

  inline Controller& operator=(Controller&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Controller& default_instance();

  enum ControllerCase {
    kFecController = 21,
    kFrameLengthController = 22,
    kChannelController = 23,
    kDtxController = 24,
    kBitrateController = 25,
    kFecControllerRplrBased = 26,
    CONTROLLER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Controller* internal_default_instance() {
    return reinterpret_cast<const Controller*>(
               &_Controller_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Controller* other);
  friend void swap(Controller& a, Controller& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Controller* New() const final {
    return CreateMaybeMessage<Controller>(NULL);
  }

  Controller* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Controller>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Controller& from);
  void MergeFrom(const Controller& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Controller* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Controller_ScoringPoint ScoringPoint;

  // accessors -------------------------------------------------------

  // optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
  bool has_scoring_point() const;
  void clear_scoring_point();
  static const int kScoringPointFieldNumber = 1;
  private:
  const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint& _internal_scoring_point() const;
  public:
  const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint& scoring_point() const;
  ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* release_scoring_point();
  ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* mutable_scoring_point();
  void set_allocated_scoring_point(::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* scoring_point);

  // optional .webrtc.audio_network_adaptor.config.FecController fec_controller = 21;
  bool has_fec_controller() const;
  void clear_fec_controller();
  static const int kFecControllerFieldNumber = 21;
  private:
  const ::webrtc::audio_network_adaptor::config::FecController& _internal_fec_controller() const;
  public:
  const ::webrtc::audio_network_adaptor::config::FecController& fec_controller() const;
  ::webrtc::audio_network_adaptor::config::FecController* release_fec_controller();
  ::webrtc::audio_network_adaptor::config::FecController* mutable_fec_controller();
  void set_allocated_fec_controller(::webrtc::audio_network_adaptor::config::FecController* fec_controller);

  // optional .webrtc.audio_network_adaptor.config.FrameLengthController frame_length_controller = 22;
  bool has_frame_length_controller() const;
  void clear_frame_length_controller();
  static const int kFrameLengthControllerFieldNumber = 22;
  private:
  const ::webrtc::audio_network_adaptor::config::FrameLengthController& _internal_frame_length_controller() const;
  public:
  const ::webrtc::audio_network_adaptor::config::FrameLengthController& frame_length_controller() const;
  ::webrtc::audio_network_adaptor::config::FrameLengthController* release_frame_length_controller();
  ::webrtc::audio_network_adaptor::config::FrameLengthController* mutable_frame_length_controller();
  void set_allocated_frame_length_controller(::webrtc::audio_network_adaptor::config::FrameLengthController* frame_length_controller);

  // optional .webrtc.audio_network_adaptor.config.ChannelController channel_controller = 23;
  bool has_channel_controller() const;
  void clear_channel_controller();
  static const int kChannelControllerFieldNumber = 23;
  private:
  const ::webrtc::audio_network_adaptor::config::ChannelController& _internal_channel_controller() const;
  public:
  const ::webrtc::audio_network_adaptor::config::ChannelController& channel_controller() const;
  ::webrtc::audio_network_adaptor::config::ChannelController* release_channel_controller();
  ::webrtc::audio_network_adaptor::config::ChannelController* mutable_channel_controller();
  void set_allocated_channel_controller(::webrtc::audio_network_adaptor::config::ChannelController* channel_controller);

  // optional .webrtc.audio_network_adaptor.config.DtxController dtx_controller = 24;
  bool has_dtx_controller() const;
  void clear_dtx_controller();
  static const int kDtxControllerFieldNumber = 24;
  private:
  const ::webrtc::audio_network_adaptor::config::DtxController& _internal_dtx_controller() const;
  public:
  const ::webrtc::audio_network_adaptor::config::DtxController& dtx_controller() const;
  ::webrtc::audio_network_adaptor::config::DtxController* release_dtx_controller();
  ::webrtc::audio_network_adaptor::config::DtxController* mutable_dtx_controller();
  void set_allocated_dtx_controller(::webrtc::audio_network_adaptor::config::DtxController* dtx_controller);

  // optional .webrtc.audio_network_adaptor.config.BitrateController bitrate_controller = 25;
  bool has_bitrate_controller() const;
  void clear_bitrate_controller();
  static const int kBitrateControllerFieldNumber = 25;
  private:
  const ::webrtc::audio_network_adaptor::config::BitrateController& _internal_bitrate_controller() const;
  public:
  const ::webrtc::audio_network_adaptor::config::BitrateController& bitrate_controller() const;
  ::webrtc::audio_network_adaptor::config::BitrateController* release_bitrate_controller();
  ::webrtc::audio_network_adaptor::config::BitrateController* mutable_bitrate_controller();
  void set_allocated_bitrate_controller(::webrtc::audio_network_adaptor::config::BitrateController* bitrate_controller);

  // optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased fec_controller_rplr_based = 26;
  bool has_fec_controller_rplr_based() const;
  void clear_fec_controller_rplr_based();
  static const int kFecControllerRplrBasedFieldNumber = 26;
  private:
  const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased& _internal_fec_controller_rplr_based() const;
  public:
  const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased& fec_controller_rplr_based() const;
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* release_fec_controller_rplr_based();
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* mutable_fec_controller_rplr_based();
  void set_allocated_fec_controller_rplr_based(::webrtc::audio_network_adaptor::config::FecControllerRplrBased* fec_controller_rplr_based);

  void clear_controller();
  ControllerCase controller_case() const;
  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.Controller)
 private:
  void set_has_scoring_point();
  void clear_has_scoring_point();
  void set_has_fec_controller();
  void set_has_frame_length_controller();
  void set_has_channel_controller();
  void set_has_dtx_controller();
  void set_has_bitrate_controller();
  void set_has_fec_controller_rplr_based();

  inline bool has_controller() const;
  inline void clear_has_controller();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* scoring_point_;
  union ControllerUnion {
    ControllerUnion() {}
    ::webrtc::audio_network_adaptor::config::FecController* fec_controller_;
    ::webrtc::audio_network_adaptor::config::FrameLengthController* frame_length_controller_;
    ::webrtc::audio_network_adaptor::config::ChannelController* channel_controller_;
    ::webrtc::audio_network_adaptor::config::DtxController* dtx_controller_;
    ::webrtc::audio_network_adaptor::config::BitrateController* bitrate_controller_;
    ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* fec_controller_rplr_based_;
  } controller_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerManager : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.audio_network_adaptor.config.ControllerManager) */ {
 public:
  ControllerManager();
  virtual ~ControllerManager();

  ControllerManager(const ControllerManager& from);

  inline ControllerManager& operator=(const ControllerManager& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerManager(ControllerManager&& from) noexcept
    : ControllerManager() {
    *this = ::std::move(from);
  }

  inline ControllerManager& operator=(ControllerManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ControllerManager& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerManager* internal_default_instance() {
    return reinterpret_cast<const ControllerManager*>(
               &_ControllerManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ControllerManager* other);
  friend void swap(ControllerManager& a, ControllerManager& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerManager* New() const final {
    return CreateMaybeMessage<ControllerManager>(NULL);
  }

  ControllerManager* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerManager>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ControllerManager& from);
  void MergeFrom(const ControllerManager& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControllerManager* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
  int controllers_size() const;
  void clear_controllers();
  static const int kControllersFieldNumber = 1;
  ::webrtc::audio_network_adaptor::config::Controller* mutable_controllers(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::audio_network_adaptor::config::Controller >*
      mutable_controllers();
  const ::webrtc::audio_network_adaptor::config::Controller& controllers(int index) const;
  ::webrtc::audio_network_adaptor::config::Controller* add_controllers();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::audio_network_adaptor::config::Controller >&
      controllers() const;

  // optional int32 min_reordering_time_ms = 2;
  bool has_min_reordering_time_ms() const;
  void clear_min_reordering_time_ms();
  static const int kMinReorderingTimeMsFieldNumber = 2;
  ::google::protobuf::int32 min_reordering_time_ms() const;
  void set_min_reordering_time_ms(::google::protobuf::int32 value);

  // optional float min_reordering_squared_distance = 3;
  bool has_min_reordering_squared_distance() const;
  void clear_min_reordering_squared_distance();
  static const int kMinReorderingSquaredDistanceFieldNumber = 3;
  float min_reordering_squared_distance() const;
  void set_min_reordering_squared_distance(float value);

  // @@protoc_insertion_point(class_scope:webrtc.audio_network_adaptor.config.ControllerManager)
 private:
  void set_has_min_reordering_time_ms();
  void clear_has_min_reordering_time_ms();
  void set_has_min_reordering_squared_distance();
  void clear_has_min_reordering_squared_distance();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::audio_network_adaptor::config::Controller > controllers_;
  ::google::protobuf::int32 min_reordering_time_ms_;
  float min_reordering_squared_distance_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FecController_Threshold

// optional int32 low_bandwidth_bps = 1;
inline bool FecController_Threshold::has_low_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FecController_Threshold::set_has_low_bandwidth_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FecController_Threshold::clear_has_low_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FecController_Threshold::clear_low_bandwidth_bps() {
  low_bandwidth_bps_ = 0;
  clear_has_low_bandwidth_bps();
}
inline ::google::protobuf::int32 FecController_Threshold::low_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecController.Threshold.low_bandwidth_bps)
  return low_bandwidth_bps_;
}
inline void FecController_Threshold::set_low_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_low_bandwidth_bps();
  low_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FecController.Threshold.low_bandwidth_bps)
}

// optional float low_bandwidth_packet_loss = 2;
inline bool FecController_Threshold::has_low_bandwidth_packet_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FecController_Threshold::set_has_low_bandwidth_packet_loss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FecController_Threshold::clear_has_low_bandwidth_packet_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FecController_Threshold::clear_low_bandwidth_packet_loss() {
  low_bandwidth_packet_loss_ = 0;
  clear_has_low_bandwidth_packet_loss();
}
inline float FecController_Threshold::low_bandwidth_packet_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecController.Threshold.low_bandwidth_packet_loss)
  return low_bandwidth_packet_loss_;
}
inline void FecController_Threshold::set_low_bandwidth_packet_loss(float value) {
  set_has_low_bandwidth_packet_loss();
  low_bandwidth_packet_loss_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FecController.Threshold.low_bandwidth_packet_loss)
}

// optional int32 high_bandwidth_bps = 3;
inline bool FecController_Threshold::has_high_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FecController_Threshold::set_has_high_bandwidth_bps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FecController_Threshold::clear_has_high_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FecController_Threshold::clear_high_bandwidth_bps() {
  high_bandwidth_bps_ = 0;
  clear_has_high_bandwidth_bps();
}
inline ::google::protobuf::int32 FecController_Threshold::high_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecController.Threshold.high_bandwidth_bps)
  return high_bandwidth_bps_;
}
inline void FecController_Threshold::set_high_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_high_bandwidth_bps();
  high_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FecController.Threshold.high_bandwidth_bps)
}

// optional float high_bandwidth_packet_loss = 4;
inline bool FecController_Threshold::has_high_bandwidth_packet_loss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FecController_Threshold::set_has_high_bandwidth_packet_loss() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FecController_Threshold::clear_has_high_bandwidth_packet_loss() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FecController_Threshold::clear_high_bandwidth_packet_loss() {
  high_bandwidth_packet_loss_ = 0;
  clear_has_high_bandwidth_packet_loss();
}
inline float FecController_Threshold::high_bandwidth_packet_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecController.Threshold.high_bandwidth_packet_loss)
  return high_bandwidth_packet_loss_;
}
inline void FecController_Threshold::set_high_bandwidth_packet_loss(float value) {
  set_has_high_bandwidth_packet_loss();
  high_bandwidth_packet_loss_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FecController.Threshold.high_bandwidth_packet_loss)
}

// -------------------------------------------------------------------

// FecController

// optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_enabling_threshold = 1;
inline bool FecController::has_fec_enabling_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FecController::set_has_fec_enabling_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FecController::clear_has_fec_enabling_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FecController::clear_fec_enabling_threshold() {
  if (fec_enabling_threshold_ != NULL) fec_enabling_threshold_->Clear();
  clear_has_fec_enabling_threshold();
}
inline const ::webrtc::audio_network_adaptor::config::FecController_Threshold& FecController::_internal_fec_enabling_threshold() const {
  return *fec_enabling_threshold_;
}
inline const ::webrtc::audio_network_adaptor::config::FecController_Threshold& FecController::fec_enabling_threshold() const {
  const ::webrtc::audio_network_adaptor::config::FecController_Threshold* p = fec_enabling_threshold_;
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecController.fec_enabling_threshold)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audio_network_adaptor::config::FecController_Threshold*>(
      &::webrtc::audio_network_adaptor::config::_FecController_Threshold_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::FecController_Threshold* FecController::release_fec_enabling_threshold() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.FecController.fec_enabling_threshold)
  clear_has_fec_enabling_threshold();
  ::webrtc::audio_network_adaptor::config::FecController_Threshold* temp = fec_enabling_threshold_;
  fec_enabling_threshold_ = NULL;
  return temp;
}
inline ::webrtc::audio_network_adaptor::config::FecController_Threshold* FecController::mutable_fec_enabling_threshold() {
  set_has_fec_enabling_threshold();
  if (fec_enabling_threshold_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecController_Threshold>(GetArenaNoVirtual());
    fec_enabling_threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.FecController.fec_enabling_threshold)
  return fec_enabling_threshold_;
}
inline void FecController::set_allocated_fec_enabling_threshold(::webrtc::audio_network_adaptor::config::FecController_Threshold* fec_enabling_threshold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fec_enabling_threshold_;
  }
  if (fec_enabling_threshold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fec_enabling_threshold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fec_enabling_threshold, submessage_arena);
    }
    set_has_fec_enabling_threshold();
  } else {
    clear_has_fec_enabling_threshold();
  }
  fec_enabling_threshold_ = fec_enabling_threshold;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.FecController.fec_enabling_threshold)
}

// optional .webrtc.audio_network_adaptor.config.FecController.Threshold fec_disabling_threshold = 2;
inline bool FecController::has_fec_disabling_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FecController::set_has_fec_disabling_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FecController::clear_has_fec_disabling_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FecController::clear_fec_disabling_threshold() {
  if (fec_disabling_threshold_ != NULL) fec_disabling_threshold_->Clear();
  clear_has_fec_disabling_threshold();
}
inline const ::webrtc::audio_network_adaptor::config::FecController_Threshold& FecController::_internal_fec_disabling_threshold() const {
  return *fec_disabling_threshold_;
}
inline const ::webrtc::audio_network_adaptor::config::FecController_Threshold& FecController::fec_disabling_threshold() const {
  const ::webrtc::audio_network_adaptor::config::FecController_Threshold* p = fec_disabling_threshold_;
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecController.fec_disabling_threshold)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audio_network_adaptor::config::FecController_Threshold*>(
      &::webrtc::audio_network_adaptor::config::_FecController_Threshold_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::FecController_Threshold* FecController::release_fec_disabling_threshold() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.FecController.fec_disabling_threshold)
  clear_has_fec_disabling_threshold();
  ::webrtc::audio_network_adaptor::config::FecController_Threshold* temp = fec_disabling_threshold_;
  fec_disabling_threshold_ = NULL;
  return temp;
}
inline ::webrtc::audio_network_adaptor::config::FecController_Threshold* FecController::mutable_fec_disabling_threshold() {
  set_has_fec_disabling_threshold();
  if (fec_disabling_threshold_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecController_Threshold>(GetArenaNoVirtual());
    fec_disabling_threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.FecController.fec_disabling_threshold)
  return fec_disabling_threshold_;
}
inline void FecController::set_allocated_fec_disabling_threshold(::webrtc::audio_network_adaptor::config::FecController_Threshold* fec_disabling_threshold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fec_disabling_threshold_;
  }
  if (fec_disabling_threshold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fec_disabling_threshold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fec_disabling_threshold, submessage_arena);
    }
    set_has_fec_disabling_threshold();
  } else {
    clear_has_fec_disabling_threshold();
  }
  fec_disabling_threshold_ = fec_disabling_threshold;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.FecController.fec_disabling_threshold)
}

// optional int32 time_constant_ms = 3;
inline bool FecController::has_time_constant_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FecController::set_has_time_constant_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FecController::clear_has_time_constant_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FecController::clear_time_constant_ms() {
  time_constant_ms_ = 0;
  clear_has_time_constant_ms();
}
inline ::google::protobuf::int32 FecController::time_constant_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecController.time_constant_ms)
  return time_constant_ms_;
}
inline void FecController::set_time_constant_ms(::google::protobuf::int32 value) {
  set_has_time_constant_ms();
  time_constant_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FecController.time_constant_ms)
}

// -------------------------------------------------------------------

// FecControllerRplrBased_Threshold

// optional int32 low_bandwidth_bps = 1;
inline bool FecControllerRplrBased_Threshold::has_low_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FecControllerRplrBased_Threshold::set_has_low_bandwidth_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FecControllerRplrBased_Threshold::clear_has_low_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FecControllerRplrBased_Threshold::clear_low_bandwidth_bps() {
  low_bandwidth_bps_ = 0;
  clear_has_low_bandwidth_bps();
}
inline ::google::protobuf::int32 FecControllerRplrBased_Threshold::low_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold.low_bandwidth_bps)
  return low_bandwidth_bps_;
}
inline void FecControllerRplrBased_Threshold::set_low_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_low_bandwidth_bps();
  low_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold.low_bandwidth_bps)
}

// optional float low_bandwidth_recoverable_packet_loss = 2;
inline bool FecControllerRplrBased_Threshold::has_low_bandwidth_recoverable_packet_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FecControllerRplrBased_Threshold::set_has_low_bandwidth_recoverable_packet_loss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FecControllerRplrBased_Threshold::clear_has_low_bandwidth_recoverable_packet_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FecControllerRplrBased_Threshold::clear_low_bandwidth_recoverable_packet_loss() {
  low_bandwidth_recoverable_packet_loss_ = 0;
  clear_has_low_bandwidth_recoverable_packet_loss();
}
inline float FecControllerRplrBased_Threshold::low_bandwidth_recoverable_packet_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold.low_bandwidth_recoverable_packet_loss)
  return low_bandwidth_recoverable_packet_loss_;
}
inline void FecControllerRplrBased_Threshold::set_low_bandwidth_recoverable_packet_loss(float value) {
  set_has_low_bandwidth_recoverable_packet_loss();
  low_bandwidth_recoverable_packet_loss_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold.low_bandwidth_recoverable_packet_loss)
}

// optional int32 high_bandwidth_bps = 3;
inline bool FecControllerRplrBased_Threshold::has_high_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FecControllerRplrBased_Threshold::set_has_high_bandwidth_bps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FecControllerRplrBased_Threshold::clear_has_high_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FecControllerRplrBased_Threshold::clear_high_bandwidth_bps() {
  high_bandwidth_bps_ = 0;
  clear_has_high_bandwidth_bps();
}
inline ::google::protobuf::int32 FecControllerRplrBased_Threshold::high_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold.high_bandwidth_bps)
  return high_bandwidth_bps_;
}
inline void FecControllerRplrBased_Threshold::set_high_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_high_bandwidth_bps();
  high_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold.high_bandwidth_bps)
}

// optional float high_bandwidth_recoverable_packet_loss = 4;
inline bool FecControllerRplrBased_Threshold::has_high_bandwidth_recoverable_packet_loss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FecControllerRplrBased_Threshold::set_has_high_bandwidth_recoverable_packet_loss() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FecControllerRplrBased_Threshold::clear_has_high_bandwidth_recoverable_packet_loss() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FecControllerRplrBased_Threshold::clear_high_bandwidth_recoverable_packet_loss() {
  high_bandwidth_recoverable_packet_loss_ = 0;
  clear_has_high_bandwidth_recoverable_packet_loss();
}
inline float FecControllerRplrBased_Threshold::high_bandwidth_recoverable_packet_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold.high_bandwidth_recoverable_packet_loss)
  return high_bandwidth_recoverable_packet_loss_;
}
inline void FecControllerRplrBased_Threshold::set_high_bandwidth_recoverable_packet_loss(float value) {
  set_has_high_bandwidth_recoverable_packet_loss();
  high_bandwidth_recoverable_packet_loss_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold.high_bandwidth_recoverable_packet_loss)
}

// -------------------------------------------------------------------

// FecControllerRplrBased

// optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_enabling_threshold = 1;
inline bool FecControllerRplrBased::has_fec_enabling_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FecControllerRplrBased::set_has_fec_enabling_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FecControllerRplrBased::clear_has_fec_enabling_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FecControllerRplrBased::clear_fec_enabling_threshold() {
  if (fec_enabling_threshold_ != NULL) fec_enabling_threshold_->Clear();
  clear_has_fec_enabling_threshold();
}
inline const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& FecControllerRplrBased::_internal_fec_enabling_threshold() const {
  return *fec_enabling_threshold_;
}
inline const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& FecControllerRplrBased::fec_enabling_threshold() const {
  const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* p = fec_enabling_threshold_;
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecControllerRplrBased.fec_enabling_threshold)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold*>(
      &::webrtc::audio_network_adaptor::config::_FecControllerRplrBased_Threshold_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* FecControllerRplrBased::release_fec_enabling_threshold() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.FecControllerRplrBased.fec_enabling_threshold)
  clear_has_fec_enabling_threshold();
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* temp = fec_enabling_threshold_;
  fec_enabling_threshold_ = NULL;
  return temp;
}
inline ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* FecControllerRplrBased::mutable_fec_enabling_threshold() {
  set_has_fec_enabling_threshold();
  if (fec_enabling_threshold_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold>(GetArenaNoVirtual());
    fec_enabling_threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.FecControllerRplrBased.fec_enabling_threshold)
  return fec_enabling_threshold_;
}
inline void FecControllerRplrBased::set_allocated_fec_enabling_threshold(::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* fec_enabling_threshold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fec_enabling_threshold_;
  }
  if (fec_enabling_threshold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fec_enabling_threshold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fec_enabling_threshold, submessage_arena);
    }
    set_has_fec_enabling_threshold();
  } else {
    clear_has_fec_enabling_threshold();
  }
  fec_enabling_threshold_ = fec_enabling_threshold;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.FecControllerRplrBased.fec_enabling_threshold)
}

// optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased.Threshold fec_disabling_threshold = 2;
inline bool FecControllerRplrBased::has_fec_disabling_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FecControllerRplrBased::set_has_fec_disabling_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FecControllerRplrBased::clear_has_fec_disabling_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FecControllerRplrBased::clear_fec_disabling_threshold() {
  if (fec_disabling_threshold_ != NULL) fec_disabling_threshold_->Clear();
  clear_has_fec_disabling_threshold();
}
inline const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& FecControllerRplrBased::_internal_fec_disabling_threshold() const {
  return *fec_disabling_threshold_;
}
inline const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold& FecControllerRplrBased::fec_disabling_threshold() const {
  const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* p = fec_disabling_threshold_;
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FecControllerRplrBased.fec_disabling_threshold)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold*>(
      &::webrtc::audio_network_adaptor::config::_FecControllerRplrBased_Threshold_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* FecControllerRplrBased::release_fec_disabling_threshold() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.FecControllerRplrBased.fec_disabling_threshold)
  clear_has_fec_disabling_threshold();
  ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* temp = fec_disabling_threshold_;
  fec_disabling_threshold_ = NULL;
  return temp;
}
inline ::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* FecControllerRplrBased::mutable_fec_disabling_threshold() {
  set_has_fec_disabling_threshold();
  if (fec_disabling_threshold_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold>(GetArenaNoVirtual());
    fec_disabling_threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.FecControllerRplrBased.fec_disabling_threshold)
  return fec_disabling_threshold_;
}
inline void FecControllerRplrBased::set_allocated_fec_disabling_threshold(::webrtc::audio_network_adaptor::config::FecControllerRplrBased_Threshold* fec_disabling_threshold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fec_disabling_threshold_;
  }
  if (fec_disabling_threshold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fec_disabling_threshold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fec_disabling_threshold, submessage_arena);
    }
    set_has_fec_disabling_threshold();
  } else {
    clear_has_fec_disabling_threshold();
  }
  fec_disabling_threshold_ = fec_disabling_threshold;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.FecControllerRplrBased.fec_disabling_threshold)
}

// -------------------------------------------------------------------

// FrameLengthController

// optional float fl_increasing_packet_loss_fraction = 1;
inline bool FrameLengthController::has_fl_increasing_packet_loss_fraction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameLengthController::set_has_fl_increasing_packet_loss_fraction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameLengthController::clear_has_fl_increasing_packet_loss_fraction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameLengthController::clear_fl_increasing_packet_loss_fraction() {
  fl_increasing_packet_loss_fraction_ = 0;
  clear_has_fl_increasing_packet_loss_fraction();
}
inline float FrameLengthController::fl_increasing_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FrameLengthController.fl_increasing_packet_loss_fraction)
  return fl_increasing_packet_loss_fraction_;
}
inline void FrameLengthController::set_fl_increasing_packet_loss_fraction(float value) {
  set_has_fl_increasing_packet_loss_fraction();
  fl_increasing_packet_loss_fraction_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FrameLengthController.fl_increasing_packet_loss_fraction)
}

// optional float fl_decreasing_packet_loss_fraction = 2;
inline bool FrameLengthController::has_fl_decreasing_packet_loss_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameLengthController::set_has_fl_decreasing_packet_loss_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameLengthController::clear_has_fl_decreasing_packet_loss_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameLengthController::clear_fl_decreasing_packet_loss_fraction() {
  fl_decreasing_packet_loss_fraction_ = 0;
  clear_has_fl_decreasing_packet_loss_fraction();
}
inline float FrameLengthController::fl_decreasing_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FrameLengthController.fl_decreasing_packet_loss_fraction)
  return fl_decreasing_packet_loss_fraction_;
}
inline void FrameLengthController::set_fl_decreasing_packet_loss_fraction(float value) {
  set_has_fl_decreasing_packet_loss_fraction();
  fl_decreasing_packet_loss_fraction_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FrameLengthController.fl_decreasing_packet_loss_fraction)
}

// optional int32 fl_20ms_to_60ms_bandwidth_bps = 3;
inline bool FrameLengthController::has_fl_20ms_to_60ms_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameLengthController::set_has_fl_20ms_to_60ms_bandwidth_bps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameLengthController::clear_has_fl_20ms_to_60ms_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameLengthController::clear_fl_20ms_to_60ms_bandwidth_bps() {
  fl_20ms_to_60ms_bandwidth_bps_ = 0;
  clear_has_fl_20ms_to_60ms_bandwidth_bps();
}
inline ::google::protobuf::int32 FrameLengthController::fl_20ms_to_60ms_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FrameLengthController.fl_20ms_to_60ms_bandwidth_bps)
  return fl_20ms_to_60ms_bandwidth_bps_;
}
inline void FrameLengthController::set_fl_20ms_to_60ms_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_fl_20ms_to_60ms_bandwidth_bps();
  fl_20ms_to_60ms_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FrameLengthController.fl_20ms_to_60ms_bandwidth_bps)
}

// optional int32 fl_60ms_to_20ms_bandwidth_bps = 4;
inline bool FrameLengthController::has_fl_60ms_to_20ms_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameLengthController::set_has_fl_60ms_to_20ms_bandwidth_bps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FrameLengthController::clear_has_fl_60ms_to_20ms_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FrameLengthController::clear_fl_60ms_to_20ms_bandwidth_bps() {
  fl_60ms_to_20ms_bandwidth_bps_ = 0;
  clear_has_fl_60ms_to_20ms_bandwidth_bps();
}
inline ::google::protobuf::int32 FrameLengthController::fl_60ms_to_20ms_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FrameLengthController.fl_60ms_to_20ms_bandwidth_bps)
  return fl_60ms_to_20ms_bandwidth_bps_;
}
inline void FrameLengthController::set_fl_60ms_to_20ms_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_fl_60ms_to_20ms_bandwidth_bps();
  fl_60ms_to_20ms_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FrameLengthController.fl_60ms_to_20ms_bandwidth_bps)
}

// optional int32 fl_60ms_to_120ms_bandwidth_bps = 5;
inline bool FrameLengthController::has_fl_60ms_to_120ms_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FrameLengthController::set_has_fl_60ms_to_120ms_bandwidth_bps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FrameLengthController::clear_has_fl_60ms_to_120ms_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FrameLengthController::clear_fl_60ms_to_120ms_bandwidth_bps() {
  fl_60ms_to_120ms_bandwidth_bps_ = 0;
  clear_has_fl_60ms_to_120ms_bandwidth_bps();
}
inline ::google::protobuf::int32 FrameLengthController::fl_60ms_to_120ms_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FrameLengthController.fl_60ms_to_120ms_bandwidth_bps)
  return fl_60ms_to_120ms_bandwidth_bps_;
}
inline void FrameLengthController::set_fl_60ms_to_120ms_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_fl_60ms_to_120ms_bandwidth_bps();
  fl_60ms_to_120ms_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FrameLengthController.fl_60ms_to_120ms_bandwidth_bps)
}

// optional int32 fl_120ms_to_60ms_bandwidth_bps = 6;
inline bool FrameLengthController::has_fl_120ms_to_60ms_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FrameLengthController::set_has_fl_120ms_to_60ms_bandwidth_bps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FrameLengthController::clear_has_fl_120ms_to_60ms_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FrameLengthController::clear_fl_120ms_to_60ms_bandwidth_bps() {
  fl_120ms_to_60ms_bandwidth_bps_ = 0;
  clear_has_fl_120ms_to_60ms_bandwidth_bps();
}
inline ::google::protobuf::int32 FrameLengthController::fl_120ms_to_60ms_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FrameLengthController.fl_120ms_to_60ms_bandwidth_bps)
  return fl_120ms_to_60ms_bandwidth_bps_;
}
inline void FrameLengthController::set_fl_120ms_to_60ms_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_fl_120ms_to_60ms_bandwidth_bps();
  fl_120ms_to_60ms_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FrameLengthController.fl_120ms_to_60ms_bandwidth_bps)
}

// optional int32 fl_increase_overhead_offset = 7;
inline bool FrameLengthController::has_fl_increase_overhead_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FrameLengthController::set_has_fl_increase_overhead_offset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FrameLengthController::clear_has_fl_increase_overhead_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FrameLengthController::clear_fl_increase_overhead_offset() {
  fl_increase_overhead_offset_ = 0;
  clear_has_fl_increase_overhead_offset();
}
inline ::google::protobuf::int32 FrameLengthController::fl_increase_overhead_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FrameLengthController.fl_increase_overhead_offset)
  return fl_increase_overhead_offset_;
}
inline void FrameLengthController::set_fl_increase_overhead_offset(::google::protobuf::int32 value) {
  set_has_fl_increase_overhead_offset();
  fl_increase_overhead_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FrameLengthController.fl_increase_overhead_offset)
}

// optional int32 fl_decrease_overhead_offset = 8;
inline bool FrameLengthController::has_fl_decrease_overhead_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FrameLengthController::set_has_fl_decrease_overhead_offset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FrameLengthController::clear_has_fl_decrease_overhead_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FrameLengthController::clear_fl_decrease_overhead_offset() {
  fl_decrease_overhead_offset_ = 0;
  clear_has_fl_decrease_overhead_offset();
}
inline ::google::protobuf::int32 FrameLengthController::fl_decrease_overhead_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.FrameLengthController.fl_decrease_overhead_offset)
  return fl_decrease_overhead_offset_;
}
inline void FrameLengthController::set_fl_decrease_overhead_offset(::google::protobuf::int32 value) {
  set_has_fl_decrease_overhead_offset();
  fl_decrease_overhead_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.FrameLengthController.fl_decrease_overhead_offset)
}

// -------------------------------------------------------------------

// ChannelController

// optional int32 channel_1_to_2_bandwidth_bps = 1;
inline bool ChannelController::has_channel_1_to_2_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelController::set_has_channel_1_to_2_bandwidth_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelController::clear_has_channel_1_to_2_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelController::clear_channel_1_to_2_bandwidth_bps() {
  channel_1_to_2_bandwidth_bps_ = 0;
  clear_has_channel_1_to_2_bandwidth_bps();
}
inline ::google::protobuf::int32 ChannelController::channel_1_to_2_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.ChannelController.channel_1_to_2_bandwidth_bps)
  return channel_1_to_2_bandwidth_bps_;
}
inline void ChannelController::set_channel_1_to_2_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_channel_1_to_2_bandwidth_bps();
  channel_1_to_2_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.ChannelController.channel_1_to_2_bandwidth_bps)
}

// optional int32 channel_2_to_1_bandwidth_bps = 2;
inline bool ChannelController::has_channel_2_to_1_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelController::set_has_channel_2_to_1_bandwidth_bps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelController::clear_has_channel_2_to_1_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelController::clear_channel_2_to_1_bandwidth_bps() {
  channel_2_to_1_bandwidth_bps_ = 0;
  clear_has_channel_2_to_1_bandwidth_bps();
}
inline ::google::protobuf::int32 ChannelController::channel_2_to_1_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.ChannelController.channel_2_to_1_bandwidth_bps)
  return channel_2_to_1_bandwidth_bps_;
}
inline void ChannelController::set_channel_2_to_1_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_channel_2_to_1_bandwidth_bps();
  channel_2_to_1_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.ChannelController.channel_2_to_1_bandwidth_bps)
}

// -------------------------------------------------------------------

// DtxController

// optional int32 dtx_enabling_bandwidth_bps = 1;
inline bool DtxController::has_dtx_enabling_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DtxController::set_has_dtx_enabling_bandwidth_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DtxController::clear_has_dtx_enabling_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DtxController::clear_dtx_enabling_bandwidth_bps() {
  dtx_enabling_bandwidth_bps_ = 0;
  clear_has_dtx_enabling_bandwidth_bps();
}
inline ::google::protobuf::int32 DtxController::dtx_enabling_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.DtxController.dtx_enabling_bandwidth_bps)
  return dtx_enabling_bandwidth_bps_;
}
inline void DtxController::set_dtx_enabling_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_dtx_enabling_bandwidth_bps();
  dtx_enabling_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.DtxController.dtx_enabling_bandwidth_bps)
}

// optional int32 dtx_disabling_bandwidth_bps = 2;
inline bool DtxController::has_dtx_disabling_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DtxController::set_has_dtx_disabling_bandwidth_bps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DtxController::clear_has_dtx_disabling_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DtxController::clear_dtx_disabling_bandwidth_bps() {
  dtx_disabling_bandwidth_bps_ = 0;
  clear_has_dtx_disabling_bandwidth_bps();
}
inline ::google::protobuf::int32 DtxController::dtx_disabling_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.DtxController.dtx_disabling_bandwidth_bps)
  return dtx_disabling_bandwidth_bps_;
}
inline void DtxController::set_dtx_disabling_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_dtx_disabling_bandwidth_bps();
  dtx_disabling_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.DtxController.dtx_disabling_bandwidth_bps)
}

// -------------------------------------------------------------------

// BitrateController

// optional int32 fl_increase_overhead_offset = 1;
inline bool BitrateController::has_fl_increase_overhead_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitrateController::set_has_fl_increase_overhead_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitrateController::clear_has_fl_increase_overhead_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitrateController::clear_fl_increase_overhead_offset() {
  fl_increase_overhead_offset_ = 0;
  clear_has_fl_increase_overhead_offset();
}
inline ::google::protobuf::int32 BitrateController::fl_increase_overhead_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.BitrateController.fl_increase_overhead_offset)
  return fl_increase_overhead_offset_;
}
inline void BitrateController::set_fl_increase_overhead_offset(::google::protobuf::int32 value) {
  set_has_fl_increase_overhead_offset();
  fl_increase_overhead_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.BitrateController.fl_increase_overhead_offset)
}

// optional int32 fl_decrease_overhead_offset = 2;
inline bool BitrateController::has_fl_decrease_overhead_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitrateController::set_has_fl_decrease_overhead_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitrateController::clear_has_fl_decrease_overhead_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitrateController::clear_fl_decrease_overhead_offset() {
  fl_decrease_overhead_offset_ = 0;
  clear_has_fl_decrease_overhead_offset();
}
inline ::google::protobuf::int32 BitrateController::fl_decrease_overhead_offset() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.BitrateController.fl_decrease_overhead_offset)
  return fl_decrease_overhead_offset_;
}
inline void BitrateController::set_fl_decrease_overhead_offset(::google::protobuf::int32 value) {
  set_has_fl_decrease_overhead_offset();
  fl_decrease_overhead_offset_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.BitrateController.fl_decrease_overhead_offset)
}

// -------------------------------------------------------------------

// Controller_ScoringPoint

// optional int32 uplink_bandwidth_bps = 1;
inline bool Controller_ScoringPoint::has_uplink_bandwidth_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Controller_ScoringPoint::set_has_uplink_bandwidth_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Controller_ScoringPoint::clear_has_uplink_bandwidth_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Controller_ScoringPoint::clear_uplink_bandwidth_bps() {
  uplink_bandwidth_bps_ = 0;
  clear_has_uplink_bandwidth_bps();
}
inline ::google::protobuf::int32 Controller_ScoringPoint::uplink_bandwidth_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.Controller.ScoringPoint.uplink_bandwidth_bps)
  return uplink_bandwidth_bps_;
}
inline void Controller_ScoringPoint::set_uplink_bandwidth_bps(::google::protobuf::int32 value) {
  set_has_uplink_bandwidth_bps();
  uplink_bandwidth_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.Controller.ScoringPoint.uplink_bandwidth_bps)
}

// optional float uplink_packet_loss_fraction = 2;
inline bool Controller_ScoringPoint::has_uplink_packet_loss_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Controller_ScoringPoint::set_has_uplink_packet_loss_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Controller_ScoringPoint::clear_has_uplink_packet_loss_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Controller_ScoringPoint::clear_uplink_packet_loss_fraction() {
  uplink_packet_loss_fraction_ = 0;
  clear_has_uplink_packet_loss_fraction();
}
inline float Controller_ScoringPoint::uplink_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.Controller.ScoringPoint.uplink_packet_loss_fraction)
  return uplink_packet_loss_fraction_;
}
inline void Controller_ScoringPoint::set_uplink_packet_loss_fraction(float value) {
  set_has_uplink_packet_loss_fraction();
  uplink_packet_loss_fraction_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.Controller.ScoringPoint.uplink_packet_loss_fraction)
}

// -------------------------------------------------------------------

// Controller

// optional .webrtc.audio_network_adaptor.config.Controller.ScoringPoint scoring_point = 1;
inline bool Controller::has_scoring_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Controller::set_has_scoring_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Controller::clear_has_scoring_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Controller::clear_scoring_point() {
  if (scoring_point_ != NULL) scoring_point_->Clear();
  clear_has_scoring_point();
}
inline const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint& Controller::_internal_scoring_point() const {
  return *scoring_point_;
}
inline const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint& Controller::scoring_point() const {
  const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* p = scoring_point_;
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.Controller.scoring_point)
  return p != NULL ? *p : *reinterpret_cast<const ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint*>(
      &::webrtc::audio_network_adaptor::config::_Controller_ScoringPoint_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* Controller::release_scoring_point() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.Controller.scoring_point)
  clear_has_scoring_point();
  ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* temp = scoring_point_;
  scoring_point_ = NULL;
  return temp;
}
inline ::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* Controller::mutable_scoring_point() {
  set_has_scoring_point();
  if (scoring_point_ == NULL) {
    auto* p = CreateMaybeMessage<::webrtc::audio_network_adaptor::config::Controller_ScoringPoint>(GetArenaNoVirtual());
    scoring_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.Controller.scoring_point)
  return scoring_point_;
}
inline void Controller::set_allocated_scoring_point(::webrtc::audio_network_adaptor::config::Controller_ScoringPoint* scoring_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scoring_point_;
  }
  if (scoring_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scoring_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scoring_point, submessage_arena);
    }
    set_has_scoring_point();
  } else {
    clear_has_scoring_point();
  }
  scoring_point_ = scoring_point;
  // @@protoc_insertion_point(field_set_allocated:webrtc.audio_network_adaptor.config.Controller.scoring_point)
}

// optional .webrtc.audio_network_adaptor.config.FecController fec_controller = 21;
inline bool Controller::has_fec_controller() const {
  return controller_case() == kFecController;
}
inline void Controller::set_has_fec_controller() {
  _oneof_case_[0] = kFecController;
}
inline void Controller::clear_fec_controller() {
  if (has_fec_controller()) {
    delete controller_.fec_controller_;
    clear_has_controller();
  }
}
inline const ::webrtc::audio_network_adaptor::config::FecController& Controller::_internal_fec_controller() const {
  return *controller_.fec_controller_;
}
inline ::webrtc::audio_network_adaptor::config::FecController* Controller::release_fec_controller() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.Controller.fec_controller)
  if (has_fec_controller()) {
    clear_has_controller();
      ::webrtc::audio_network_adaptor::config::FecController* temp = controller_.fec_controller_;
    controller_.fec_controller_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::audio_network_adaptor::config::FecController& Controller::fec_controller() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.Controller.fec_controller)
  return has_fec_controller()
      ? *controller_.fec_controller_
      : *reinterpret_cast< ::webrtc::audio_network_adaptor::config::FecController*>(&::webrtc::audio_network_adaptor::config::_FecController_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::FecController* Controller::mutable_fec_controller() {
  if (!has_fec_controller()) {
    clear_controller();
    set_has_fec_controller();
    controller_.fec_controller_ = CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecController >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.Controller.fec_controller)
  return controller_.fec_controller_;
}

// optional .webrtc.audio_network_adaptor.config.FrameLengthController frame_length_controller = 22;
inline bool Controller::has_frame_length_controller() const {
  return controller_case() == kFrameLengthController;
}
inline void Controller::set_has_frame_length_controller() {
  _oneof_case_[0] = kFrameLengthController;
}
inline void Controller::clear_frame_length_controller() {
  if (has_frame_length_controller()) {
    delete controller_.frame_length_controller_;
    clear_has_controller();
  }
}
inline const ::webrtc::audio_network_adaptor::config::FrameLengthController& Controller::_internal_frame_length_controller() const {
  return *controller_.frame_length_controller_;
}
inline ::webrtc::audio_network_adaptor::config::FrameLengthController* Controller::release_frame_length_controller() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.Controller.frame_length_controller)
  if (has_frame_length_controller()) {
    clear_has_controller();
      ::webrtc::audio_network_adaptor::config::FrameLengthController* temp = controller_.frame_length_controller_;
    controller_.frame_length_controller_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::audio_network_adaptor::config::FrameLengthController& Controller::frame_length_controller() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.Controller.frame_length_controller)
  return has_frame_length_controller()
      ? *controller_.frame_length_controller_
      : *reinterpret_cast< ::webrtc::audio_network_adaptor::config::FrameLengthController*>(&::webrtc::audio_network_adaptor::config::_FrameLengthController_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::FrameLengthController* Controller::mutable_frame_length_controller() {
  if (!has_frame_length_controller()) {
    clear_controller();
    set_has_frame_length_controller();
    controller_.frame_length_controller_ = CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FrameLengthController >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.Controller.frame_length_controller)
  return controller_.frame_length_controller_;
}

// optional .webrtc.audio_network_adaptor.config.ChannelController channel_controller = 23;
inline bool Controller::has_channel_controller() const {
  return controller_case() == kChannelController;
}
inline void Controller::set_has_channel_controller() {
  _oneof_case_[0] = kChannelController;
}
inline void Controller::clear_channel_controller() {
  if (has_channel_controller()) {
    delete controller_.channel_controller_;
    clear_has_controller();
  }
}
inline const ::webrtc::audio_network_adaptor::config::ChannelController& Controller::_internal_channel_controller() const {
  return *controller_.channel_controller_;
}
inline ::webrtc::audio_network_adaptor::config::ChannelController* Controller::release_channel_controller() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.Controller.channel_controller)
  if (has_channel_controller()) {
    clear_has_controller();
      ::webrtc::audio_network_adaptor::config::ChannelController* temp = controller_.channel_controller_;
    controller_.channel_controller_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::audio_network_adaptor::config::ChannelController& Controller::channel_controller() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.Controller.channel_controller)
  return has_channel_controller()
      ? *controller_.channel_controller_
      : *reinterpret_cast< ::webrtc::audio_network_adaptor::config::ChannelController*>(&::webrtc::audio_network_adaptor::config::_ChannelController_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::ChannelController* Controller::mutable_channel_controller() {
  if (!has_channel_controller()) {
    clear_controller();
    set_has_channel_controller();
    controller_.channel_controller_ = CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::ChannelController >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.Controller.channel_controller)
  return controller_.channel_controller_;
}

// optional .webrtc.audio_network_adaptor.config.DtxController dtx_controller = 24;
inline bool Controller::has_dtx_controller() const {
  return controller_case() == kDtxController;
}
inline void Controller::set_has_dtx_controller() {
  _oneof_case_[0] = kDtxController;
}
inline void Controller::clear_dtx_controller() {
  if (has_dtx_controller()) {
    delete controller_.dtx_controller_;
    clear_has_controller();
  }
}
inline const ::webrtc::audio_network_adaptor::config::DtxController& Controller::_internal_dtx_controller() const {
  return *controller_.dtx_controller_;
}
inline ::webrtc::audio_network_adaptor::config::DtxController* Controller::release_dtx_controller() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.Controller.dtx_controller)
  if (has_dtx_controller()) {
    clear_has_controller();
      ::webrtc::audio_network_adaptor::config::DtxController* temp = controller_.dtx_controller_;
    controller_.dtx_controller_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::audio_network_adaptor::config::DtxController& Controller::dtx_controller() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.Controller.dtx_controller)
  return has_dtx_controller()
      ? *controller_.dtx_controller_
      : *reinterpret_cast< ::webrtc::audio_network_adaptor::config::DtxController*>(&::webrtc::audio_network_adaptor::config::_DtxController_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::DtxController* Controller::mutable_dtx_controller() {
  if (!has_dtx_controller()) {
    clear_controller();
    set_has_dtx_controller();
    controller_.dtx_controller_ = CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::DtxController >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.Controller.dtx_controller)
  return controller_.dtx_controller_;
}

// optional .webrtc.audio_network_adaptor.config.BitrateController bitrate_controller = 25;
inline bool Controller::has_bitrate_controller() const {
  return controller_case() == kBitrateController;
}
inline void Controller::set_has_bitrate_controller() {
  _oneof_case_[0] = kBitrateController;
}
inline void Controller::clear_bitrate_controller() {
  if (has_bitrate_controller()) {
    delete controller_.bitrate_controller_;
    clear_has_controller();
  }
}
inline const ::webrtc::audio_network_adaptor::config::BitrateController& Controller::_internal_bitrate_controller() const {
  return *controller_.bitrate_controller_;
}
inline ::webrtc::audio_network_adaptor::config::BitrateController* Controller::release_bitrate_controller() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.Controller.bitrate_controller)
  if (has_bitrate_controller()) {
    clear_has_controller();
      ::webrtc::audio_network_adaptor::config::BitrateController* temp = controller_.bitrate_controller_;
    controller_.bitrate_controller_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::audio_network_adaptor::config::BitrateController& Controller::bitrate_controller() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.Controller.bitrate_controller)
  return has_bitrate_controller()
      ? *controller_.bitrate_controller_
      : *reinterpret_cast< ::webrtc::audio_network_adaptor::config::BitrateController*>(&::webrtc::audio_network_adaptor::config::_BitrateController_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::BitrateController* Controller::mutable_bitrate_controller() {
  if (!has_bitrate_controller()) {
    clear_controller();
    set_has_bitrate_controller();
    controller_.bitrate_controller_ = CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::BitrateController >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.Controller.bitrate_controller)
  return controller_.bitrate_controller_;
}

// optional .webrtc.audio_network_adaptor.config.FecControllerRplrBased fec_controller_rplr_based = 26;
inline bool Controller::has_fec_controller_rplr_based() const {
  return controller_case() == kFecControllerRplrBased;
}
inline void Controller::set_has_fec_controller_rplr_based() {
  _oneof_case_[0] = kFecControllerRplrBased;
}
inline void Controller::clear_fec_controller_rplr_based() {
  if (has_fec_controller_rplr_based()) {
    delete controller_.fec_controller_rplr_based_;
    clear_has_controller();
  }
}
inline const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased& Controller::_internal_fec_controller_rplr_based() const {
  return *controller_.fec_controller_rplr_based_;
}
inline ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* Controller::release_fec_controller_rplr_based() {
  // @@protoc_insertion_point(field_release:webrtc.audio_network_adaptor.config.Controller.fec_controller_rplr_based)
  if (has_fec_controller_rplr_based()) {
    clear_has_controller();
      ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* temp = controller_.fec_controller_rplr_based_;
    controller_.fec_controller_rplr_based_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::webrtc::audio_network_adaptor::config::FecControllerRplrBased& Controller::fec_controller_rplr_based() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.Controller.fec_controller_rplr_based)
  return has_fec_controller_rplr_based()
      ? *controller_.fec_controller_rplr_based_
      : *reinterpret_cast< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased*>(&::webrtc::audio_network_adaptor::config::_FecControllerRplrBased_default_instance_);
}
inline ::webrtc::audio_network_adaptor::config::FecControllerRplrBased* Controller::mutable_fec_controller_rplr_based() {
  if (!has_fec_controller_rplr_based()) {
    clear_controller();
    set_has_fec_controller_rplr_based();
    controller_.fec_controller_rplr_based_ = CreateMaybeMessage< ::webrtc::audio_network_adaptor::config::FecControllerRplrBased >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.Controller.fec_controller_rplr_based)
  return controller_.fec_controller_rplr_based_;
}

inline bool Controller::has_controller() const {
  return controller_case() != CONTROLLER_NOT_SET;
}
inline void Controller::clear_has_controller() {
  _oneof_case_[0] = CONTROLLER_NOT_SET;
}
inline Controller::ControllerCase Controller::controller_case() const {
  return Controller::ControllerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerManager

// repeated .webrtc.audio_network_adaptor.config.Controller controllers = 1;
inline int ControllerManager::controllers_size() const {
  return controllers_.size();
}
inline void ControllerManager::clear_controllers() {
  controllers_.Clear();
}
inline ::webrtc::audio_network_adaptor::config::Controller* ControllerManager::mutable_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.audio_network_adaptor.config.ControllerManager.controllers)
  return controllers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::audio_network_adaptor::config::Controller >*
ControllerManager::mutable_controllers() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.audio_network_adaptor.config.ControllerManager.controllers)
  return &controllers_;
}
inline const ::webrtc::audio_network_adaptor::config::Controller& ControllerManager::controllers(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.ControllerManager.controllers)
  return controllers_.Get(index);
}
inline ::webrtc::audio_network_adaptor::config::Controller* ControllerManager::add_controllers() {
  // @@protoc_insertion_point(field_add:webrtc.audio_network_adaptor.config.ControllerManager.controllers)
  return controllers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::audio_network_adaptor::config::Controller >&
ControllerManager::controllers() const {
  // @@protoc_insertion_point(field_list:webrtc.audio_network_adaptor.config.ControllerManager.controllers)
  return controllers_;
}

// optional int32 min_reordering_time_ms = 2;
inline bool ControllerManager::has_min_reordering_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllerManager::set_has_min_reordering_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControllerManager::clear_has_min_reordering_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControllerManager::clear_min_reordering_time_ms() {
  min_reordering_time_ms_ = 0;
  clear_has_min_reordering_time_ms();
}
inline ::google::protobuf::int32 ControllerManager::min_reordering_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.ControllerManager.min_reordering_time_ms)
  return min_reordering_time_ms_;
}
inline void ControllerManager::set_min_reordering_time_ms(::google::protobuf::int32 value) {
  set_has_min_reordering_time_ms();
  min_reordering_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.ControllerManager.min_reordering_time_ms)
}

// optional float min_reordering_squared_distance = 3;
inline bool ControllerManager::has_min_reordering_squared_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControllerManager::set_has_min_reordering_squared_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControllerManager::clear_has_min_reordering_squared_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControllerManager::clear_min_reordering_squared_distance() {
  min_reordering_squared_distance_ = 0;
  clear_has_min_reordering_squared_distance();
}
inline float ControllerManager::min_reordering_squared_distance() const {
  // @@protoc_insertion_point(field_get:webrtc.audio_network_adaptor.config.ControllerManager.min_reordering_squared_distance)
  return min_reordering_squared_distance_;
}
inline void ControllerManager::set_min_reordering_squared_distance(float value) {
  set_has_min_reordering_squared_distance();
  min_reordering_squared_distance_ = value;
  // @@protoc_insertion_point(field_set:webrtc.audio_network_adaptor.config.ControllerManager.min_reordering_squared_distance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace audio_network_adaptor
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_config_2eproto
