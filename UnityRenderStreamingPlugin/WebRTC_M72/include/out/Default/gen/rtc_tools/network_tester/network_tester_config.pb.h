// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_tester_config.proto

#ifndef PROTOBUF_INCLUDED_network_5ftester_5fconfig_2eproto
#define PROTOBUF_INCLUDED_network_5ftester_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_network_5ftester_5fconfig_2eproto 

namespace protobuf_network_5ftester_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_network_5ftester_5fconfig_2eproto
namespace webrtc {
namespace network_tester {
namespace config {
class NetworkTesterAllConfigs;
class NetworkTesterAllConfigsDefaultTypeInternal;
extern NetworkTesterAllConfigsDefaultTypeInternal _NetworkTesterAllConfigs_default_instance_;
class NetworkTesterConfig;
class NetworkTesterConfigDefaultTypeInternal;
extern NetworkTesterConfigDefaultTypeInternal _NetworkTesterConfig_default_instance_;
}  // namespace config
}  // namespace network_tester
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> ::webrtc::network_tester::config::NetworkTesterAllConfigs* Arena::CreateMaybeMessage<::webrtc::network_tester::config::NetworkTesterAllConfigs>(Arena*);
template<> ::webrtc::network_tester::config::NetworkTesterConfig* Arena::CreateMaybeMessage<::webrtc::network_tester::config::NetworkTesterConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace webrtc {
namespace network_tester {
namespace config {

// ===================================================================

class NetworkTesterConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.network_tester.config.NetworkTesterConfig) */ {
 public:
  NetworkTesterConfig();
  virtual ~NetworkTesterConfig();

  NetworkTesterConfig(const NetworkTesterConfig& from);

  inline NetworkTesterConfig& operator=(const NetworkTesterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkTesterConfig(NetworkTesterConfig&& from) noexcept
    : NetworkTesterConfig() {
    *this = ::std::move(from);
  }

  inline NetworkTesterConfig& operator=(NetworkTesterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NetworkTesterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkTesterConfig* internal_default_instance() {
    return reinterpret_cast<const NetworkTesterConfig*>(
               &_NetworkTesterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(NetworkTesterConfig* other);
  friend void swap(NetworkTesterConfig& a, NetworkTesterConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkTesterConfig* New() const final {
    return CreateMaybeMessage<NetworkTesterConfig>(NULL);
  }

  NetworkTesterConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkTesterConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const NetworkTesterConfig& from);
  void MergeFrom(const NetworkTesterConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkTesterConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 packet_send_interval_ms = 1;
  bool has_packet_send_interval_ms() const;
  void clear_packet_send_interval_ms();
  static const int kPacketSendIntervalMsFieldNumber = 1;
  ::google::protobuf::int32 packet_send_interval_ms() const;
  void set_packet_send_interval_ms(::google::protobuf::int32 value);

  // optional float packet_size = 2;
  bool has_packet_size() const;
  void clear_packet_size();
  static const int kPacketSizeFieldNumber = 2;
  float packet_size() const;
  void set_packet_size(float value);

  // optional int32 execution_time_ms = 3;
  bool has_execution_time_ms() const;
  void clear_execution_time_ms();
  static const int kExecutionTimeMsFieldNumber = 3;
  ::google::protobuf::int32 execution_time_ms() const;
  void set_execution_time_ms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.network_tester.config.NetworkTesterConfig)
 private:
  void set_has_packet_send_interval_ms();
  void clear_has_packet_send_interval_ms();
  void set_has_packet_size();
  void clear_has_packet_size();
  void set_has_execution_time_ms();
  void clear_has_execution_time_ms();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 packet_send_interval_ms_;
  float packet_size_;
  ::google::protobuf::int32 execution_time_ms_;
  friend struct ::protobuf_network_5ftester_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkTesterAllConfigs : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.network_tester.config.NetworkTesterAllConfigs) */ {
 public:
  NetworkTesterAllConfigs();
  virtual ~NetworkTesterAllConfigs();

  NetworkTesterAllConfigs(const NetworkTesterAllConfigs& from);

  inline NetworkTesterAllConfigs& operator=(const NetworkTesterAllConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkTesterAllConfigs(NetworkTesterAllConfigs&& from) noexcept
    : NetworkTesterAllConfigs() {
    *this = ::std::move(from);
  }

  inline NetworkTesterAllConfigs& operator=(NetworkTesterAllConfigs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NetworkTesterAllConfigs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkTesterAllConfigs* internal_default_instance() {
    return reinterpret_cast<const NetworkTesterAllConfigs*>(
               &_NetworkTesterAllConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(NetworkTesterAllConfigs* other);
  friend void swap(NetworkTesterAllConfigs& a, NetworkTesterAllConfigs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkTesterAllConfigs* New() const final {
    return CreateMaybeMessage<NetworkTesterAllConfigs>(NULL);
  }

  NetworkTesterAllConfigs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkTesterAllConfigs>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const NetworkTesterAllConfigs& from);
  void MergeFrom(const NetworkTesterAllConfigs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkTesterAllConfigs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .webrtc.network_tester.config.NetworkTesterConfig configs = 1;
  int configs_size() const;
  void clear_configs();
  static const int kConfigsFieldNumber = 1;
  ::webrtc::network_tester::config::NetworkTesterConfig* mutable_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::network_tester::config::NetworkTesterConfig >*
      mutable_configs();
  const ::webrtc::network_tester::config::NetworkTesterConfig& configs(int index) const;
  ::webrtc::network_tester::config::NetworkTesterConfig* add_configs();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::network_tester::config::NetworkTesterConfig >&
      configs() const;

  // @@protoc_insertion_point(class_scope:webrtc.network_tester.config.NetworkTesterAllConfigs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::network_tester::config::NetworkTesterConfig > configs_;
  friend struct ::protobuf_network_5ftester_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkTesterConfig

// optional int32 packet_send_interval_ms = 1;
inline bool NetworkTesterConfig::has_packet_send_interval_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkTesterConfig::set_has_packet_send_interval_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkTesterConfig::clear_has_packet_send_interval_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkTesterConfig::clear_packet_send_interval_ms() {
  packet_send_interval_ms_ = 0;
  clear_has_packet_send_interval_ms();
}
inline ::google::protobuf::int32 NetworkTesterConfig::packet_send_interval_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.config.NetworkTesterConfig.packet_send_interval_ms)
  return packet_send_interval_ms_;
}
inline void NetworkTesterConfig::set_packet_send_interval_ms(::google::protobuf::int32 value) {
  set_has_packet_send_interval_ms();
  packet_send_interval_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.config.NetworkTesterConfig.packet_send_interval_ms)
}

// optional float packet_size = 2;
inline bool NetworkTesterConfig::has_packet_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkTesterConfig::set_has_packet_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkTesterConfig::clear_has_packet_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkTesterConfig::clear_packet_size() {
  packet_size_ = 0;
  clear_has_packet_size();
}
inline float NetworkTesterConfig::packet_size() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.config.NetworkTesterConfig.packet_size)
  return packet_size_;
}
inline void NetworkTesterConfig::set_packet_size(float value) {
  set_has_packet_size();
  packet_size_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.config.NetworkTesterConfig.packet_size)
}

// optional int32 execution_time_ms = 3;
inline bool NetworkTesterConfig::has_execution_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkTesterConfig::set_has_execution_time_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkTesterConfig::clear_has_execution_time_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkTesterConfig::clear_execution_time_ms() {
  execution_time_ms_ = 0;
  clear_has_execution_time_ms();
}
inline ::google::protobuf::int32 NetworkTesterConfig::execution_time_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.config.NetworkTesterConfig.execution_time_ms)
  return execution_time_ms_;
}
inline void NetworkTesterConfig::set_execution_time_ms(::google::protobuf::int32 value) {
  set_has_execution_time_ms();
  execution_time_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.network_tester.config.NetworkTesterConfig.execution_time_ms)
}

// -------------------------------------------------------------------

// NetworkTesterAllConfigs

// repeated .webrtc.network_tester.config.NetworkTesterConfig configs = 1;
inline int NetworkTesterAllConfigs::configs_size() const {
  return configs_.size();
}
inline void NetworkTesterAllConfigs::clear_configs() {
  configs_.Clear();
}
inline ::webrtc::network_tester::config::NetworkTesterConfig* NetworkTesterAllConfigs::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::network_tester::config::NetworkTesterConfig >*
NetworkTesterAllConfigs::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return &configs_;
}
inline const ::webrtc::network_tester::config::NetworkTesterConfig& NetworkTesterAllConfigs::configs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return configs_.Get(index);
}
inline ::webrtc::network_tester::config::NetworkTesterConfig* NetworkTesterAllConfigs::add_configs() {
  // @@protoc_insertion_point(field_add:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::network_tester::config::NetworkTesterConfig >&
NetworkTesterAllConfigs::configs() const {
  // @@protoc_insertion_point(field_list:webrtc.network_tester.config.NetworkTesterAllConfigs.configs)
  return configs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace network_tester
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_network_5ftester_5fconfig_2eproto
