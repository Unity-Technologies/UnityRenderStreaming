// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart.proto

#ifndef PROTOBUF_INCLUDED_chart_2eproto
#define PROTOBUF_INCLUDED_chart_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chart_2eproto 

namespace protobuf_chart_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_chart_2eproto
namespace webrtc {
namespace analytics {
class Chart;
class ChartDefaultTypeInternal;
extern ChartDefaultTypeInternal _Chart_default_instance_;
class ChartCollection;
class ChartCollectionDefaultTypeInternal;
extern ChartCollectionDefaultTypeInternal _ChartCollection_default_instance_;
class ChartStyle;
class ChartStyleDefaultTypeInternal;
extern ChartStyleDefaultTypeInternal _ChartStyle_default_instance_;
class DataSet;
class DataSetDefaultTypeInternal;
extern DataSetDefaultTypeInternal _DataSet_default_instance_;
}  // namespace analytics
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> ::webrtc::analytics::Chart* Arena::CreateMaybeMessage<::webrtc::analytics::Chart>(Arena*);
template<> ::webrtc::analytics::ChartCollection* Arena::CreateMaybeMessage<::webrtc::analytics::ChartCollection>(Arena*);
template<> ::webrtc::analytics::ChartStyle* Arena::CreateMaybeMessage<::webrtc::analytics::ChartStyle>(Arena*);
template<> ::webrtc::analytics::DataSet* Arena::CreateMaybeMessage<::webrtc::analytics::DataSet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace webrtc {
namespace analytics {

enum ChartStyle_Type {
  ChartStyle_Type_UNDEFINED = 0,
  ChartStyle_Type_LINE_CHART = 1,
  ChartStyle_Type_BAR_CHART = 2,
  ChartStyle_Type_LINE_STEP_CHART = 3,
  ChartStyle_Type_SCATTER_CHART = 4,
  ChartStyle_Type_ChartStyle_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChartStyle_Type_ChartStyle_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChartStyle_Type_IsValid(int value);
const ChartStyle_Type ChartStyle_Type_Type_MIN = ChartStyle_Type_UNDEFINED;
const ChartStyle_Type ChartStyle_Type_Type_MAX = ChartStyle_Type_SCATTER_CHART;
const int ChartStyle_Type_Type_ARRAYSIZE = ChartStyle_Type_Type_MAX + 1;

// ===================================================================

class ChartStyle : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.analytics.ChartStyle) */ {
 public:
  ChartStyle();
  virtual ~ChartStyle();

  ChartStyle(const ChartStyle& from);

  inline ChartStyle& operator=(const ChartStyle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChartStyle(ChartStyle&& from) noexcept
    : ChartStyle() {
    *this = ::std::move(from);
  }

  inline ChartStyle& operator=(ChartStyle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ChartStyle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChartStyle* internal_default_instance() {
    return reinterpret_cast<const ChartStyle*>(
               &_ChartStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChartStyle* other);
  friend void swap(ChartStyle& a, ChartStyle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChartStyle* New() const final {
    return CreateMaybeMessage<ChartStyle>(NULL);
  }

  ChartStyle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChartStyle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChartStyle& from);
  void MergeFrom(const ChartStyle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChartStyle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChartStyle_Type Type;
  static const Type UNDEFINED =
    ChartStyle_Type_UNDEFINED;
  static const Type LINE_CHART =
    ChartStyle_Type_LINE_CHART;
  static const Type BAR_CHART =
    ChartStyle_Type_BAR_CHART;
  static const Type LINE_STEP_CHART =
    ChartStyle_Type_LINE_STEP_CHART;
  static const Type SCATTER_CHART =
    ChartStyle_Type_SCATTER_CHART;
  static inline bool Type_IsValid(int value) {
    return ChartStyle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ChartStyle_Type_Type_MIN;
  static const Type Type_MAX =
    ChartStyle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ChartStyle_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:webrtc.analytics.ChartStyle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataSet : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.analytics.DataSet) */ {
 public:
  DataSet();
  virtual ~DataSet();

  DataSet(const DataSet& from);

  inline DataSet& operator=(const DataSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSet(DataSet&& from) noexcept
    : DataSet() {
    *this = ::std::move(from);
  }

  inline DataSet& operator=(DataSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DataSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSet* internal_default_instance() {
    return reinterpret_cast<const DataSet*>(
               &_DataSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(DataSet* other);
  friend void swap(DataSet& a, DataSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSet* New() const final {
    return CreateMaybeMessage<DataSet>(NULL);
  }

  DataSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DataSet& from);
  void MergeFrom(const DataSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float x_values = 1;
  int x_values_size() const;
  void clear_x_values();
  static const int kXValuesFieldNumber = 1;
  float x_values(int index) const;
  void set_x_values(int index, float value);
  void add_x_values(float value);
  const ::google::protobuf::RepeatedField< float >&
      x_values() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_x_values();

  // repeated float y_values = 2;
  int y_values_size() const;
  void clear_y_values();
  static const int kYValuesFieldNumber = 2;
  float y_values(int index) const;
  void set_y_values(int index, float value);
  void add_y_values(float value);
  const ::google::protobuf::RepeatedField< float >&
      y_values() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_y_values();

  // string label = 3;
  void clear_label();
  static const int kLabelFieldNumber = 3;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // .webrtc.analytics.ChartStyle.Type style = 4;
  void clear_style();
  static const int kStyleFieldNumber = 4;
  ::webrtc::analytics::ChartStyle_Type style() const;
  void set_style(::webrtc::analytics::ChartStyle_Type value);

  // bool highlight_points = 5;
  void clear_highlight_points();
  static const int kHighlightPointsFieldNumber = 5;
  bool highlight_points() const;
  void set_highlight_points(bool value);

  // @@protoc_insertion_point(class_scope:webrtc.analytics.DataSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > x_values_;
  mutable int _x_values_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > y_values_;
  mutable int _y_values_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  int style_;
  bool highlight_points_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Chart : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.analytics.Chart) */ {
 public:
  Chart();
  virtual ~Chart();

  Chart(const Chart& from);

  inline Chart& operator=(const Chart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chart(Chart&& from) noexcept
    : Chart() {
    *this = ::std::move(from);
  }

  inline Chart& operator=(Chart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Chart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chart* internal_default_instance() {
    return reinterpret_cast<const Chart*>(
               &_Chart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(Chart* other);
  friend void swap(Chart& a, Chart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chart* New() const final {
    return CreateMaybeMessage<Chart>(NULL);
  }

  Chart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Chart>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Chart& from);
  void MergeFrom(const Chart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Chart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .webrtc.analytics.DataSet data_sets = 1;
  int data_sets_size() const;
  void clear_data_sets();
  static const int kDataSetsFieldNumber = 1;
  ::webrtc::analytics::DataSet* mutable_data_sets(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::DataSet >*
      mutable_data_sets();
  const ::webrtc::analytics::DataSet& data_sets(int index) const;
  ::webrtc::analytics::DataSet* add_data_sets();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::DataSet >&
      data_sets() const;

  // string xaxis_label = 4;
  void clear_xaxis_label();
  static const int kXaxisLabelFieldNumber = 4;
  const ::std::string& xaxis_label() const;
  void set_xaxis_label(const ::std::string& value);
  #if LANG_CXX11
  void set_xaxis_label(::std::string&& value);
  #endif
  void set_xaxis_label(const char* value);
  void set_xaxis_label(const char* value, size_t size);
  ::std::string* mutable_xaxis_label();
  ::std::string* release_xaxis_label();
  void set_allocated_xaxis_label(::std::string* xaxis_label);

  // string yaxis_label = 7;
  void clear_yaxis_label();
  static const int kYaxisLabelFieldNumber = 7;
  const ::std::string& yaxis_label() const;
  void set_yaxis_label(const ::std::string& value);
  #if LANG_CXX11
  void set_yaxis_label(::std::string&& value);
  #endif
  void set_yaxis_label(const char* value);
  void set_yaxis_label(const char* value, size_t size);
  ::std::string* mutable_yaxis_label();
  ::std::string* release_yaxis_label();
  void set_allocated_yaxis_label(::std::string* yaxis_label);

  // string title = 8;
  void clear_title();
  static const int kTitleFieldNumber = 8;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // float xaxis_min = 2;
  void clear_xaxis_min();
  static const int kXaxisMinFieldNumber = 2;
  float xaxis_min() const;
  void set_xaxis_min(float value);

  // float xaxis_max = 3;
  void clear_xaxis_max();
  static const int kXaxisMaxFieldNumber = 3;
  float xaxis_max() const;
  void set_xaxis_max(float value);

  // float yaxis_min = 5;
  void clear_yaxis_min();
  static const int kYaxisMinFieldNumber = 5;
  float yaxis_min() const;
  void set_yaxis_min(float value);

  // float yaxis_max = 6;
  void clear_yaxis_max();
  static const int kYaxisMaxFieldNumber = 6;
  float yaxis_max() const;
  void set_yaxis_max(float value);

  // @@protoc_insertion_point(class_scope:webrtc.analytics.Chart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::DataSet > data_sets_;
  ::google::protobuf::internal::ArenaStringPtr xaxis_label_;
  ::google::protobuf::internal::ArenaStringPtr yaxis_label_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  float xaxis_min_;
  float xaxis_max_;
  float yaxis_min_;
  float yaxis_max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChartCollection : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:webrtc.analytics.ChartCollection) */ {
 public:
  ChartCollection();
  virtual ~ChartCollection();

  ChartCollection(const ChartCollection& from);

  inline ChartCollection& operator=(const ChartCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChartCollection(ChartCollection&& from) noexcept
    : ChartCollection() {
    *this = ::std::move(from);
  }

  inline ChartCollection& operator=(ChartCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ChartCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChartCollection* internal_default_instance() {
    return reinterpret_cast<const ChartCollection*>(
               &_ChartCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChartCollection* other);
  friend void swap(ChartCollection& a, ChartCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChartCollection* New() const final {
    return CreateMaybeMessage<ChartCollection>(NULL);
  }

  ChartCollection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChartCollection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChartCollection& from);
  void MergeFrom(const ChartCollection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChartCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .webrtc.analytics.Chart charts = 1;
  int charts_size() const;
  void clear_charts();
  static const int kChartsFieldNumber = 1;
  ::webrtc::analytics::Chart* mutable_charts(int index);
  ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::Chart >*
      mutable_charts();
  const ::webrtc::analytics::Chart& charts(int index) const;
  ::webrtc::analytics::Chart* add_charts();
  const ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::Chart >&
      charts() const;

  // @@protoc_insertion_point(class_scope:webrtc.analytics.ChartCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::Chart > charts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chart_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChartStyle

// -------------------------------------------------------------------

// DataSet

// repeated float x_values = 1;
inline int DataSet::x_values_size() const {
  return x_values_.size();
}
inline void DataSet::clear_x_values() {
  x_values_.Clear();
}
inline float DataSet::x_values(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.x_values)
  return x_values_.Get(index);
}
inline void DataSet::set_x_values(int index, float value) {
  x_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.x_values)
}
inline void DataSet::add_x_values(float value) {
  x_values_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.analytics.DataSet.x_values)
}
inline const ::google::protobuf::RepeatedField< float >&
DataSet::x_values() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.DataSet.x_values)
  return x_values_;
}
inline ::google::protobuf::RepeatedField< float >*
DataSet::mutable_x_values() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.DataSet.x_values)
  return &x_values_;
}

// repeated float y_values = 2;
inline int DataSet::y_values_size() const {
  return y_values_.size();
}
inline void DataSet::clear_y_values() {
  y_values_.Clear();
}
inline float DataSet::y_values(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.y_values)
  return y_values_.Get(index);
}
inline void DataSet::set_y_values(int index, float value) {
  y_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.y_values)
}
inline void DataSet::add_y_values(float value) {
  y_values_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.analytics.DataSet.y_values)
}
inline const ::google::protobuf::RepeatedField< float >&
DataSet::y_values() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.DataSet.y_values)
  return y_values_;
}
inline ::google::protobuf::RepeatedField< float >*
DataSet::mutable_y_values() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.DataSet.y_values)
  return &y_values_;
}

// string label = 3;
inline void DataSet::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSet::label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.label)
  return label_.GetNoArena();
}
inline void DataSet::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.label)
}
#if LANG_CXX11
inline void DataSet::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.DataSet.label)
}
#endif
inline void DataSet::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.DataSet.label)
}
inline void DataSet::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.DataSet.label)
}
inline ::std::string* DataSet::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.DataSet.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSet::release_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.DataSet.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSet::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.DataSet.label)
}

// .webrtc.analytics.ChartStyle.Type style = 4;
inline void DataSet::clear_style() {
  style_ = 0;
}
inline ::webrtc::analytics::ChartStyle_Type DataSet::style() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.style)
  return static_cast< ::webrtc::analytics::ChartStyle_Type >(style_);
}
inline void DataSet::set_style(::webrtc::analytics::ChartStyle_Type value) {
  
  style_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.style)
}

// bool highlight_points = 5;
inline void DataSet::clear_highlight_points() {
  highlight_points_ = false;
}
inline bool DataSet::highlight_points() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.DataSet.highlight_points)
  return highlight_points_;
}
inline void DataSet::set_highlight_points(bool value) {
  
  highlight_points_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.DataSet.highlight_points)
}

// -------------------------------------------------------------------

// Chart

// repeated .webrtc.analytics.DataSet data_sets = 1;
inline int Chart::data_sets_size() const {
  return data_sets_.size();
}
inline void Chart::clear_data_sets() {
  data_sets_.Clear();
}
inline ::webrtc::analytics::DataSet* Chart::mutable_data_sets(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.data_sets)
  return data_sets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::DataSet >*
Chart::mutable_data_sets() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.Chart.data_sets)
  return &data_sets_;
}
inline const ::webrtc::analytics::DataSet& Chart::data_sets(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.data_sets)
  return data_sets_.Get(index);
}
inline ::webrtc::analytics::DataSet* Chart::add_data_sets() {
  // @@protoc_insertion_point(field_add:webrtc.analytics.Chart.data_sets)
  return data_sets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::DataSet >&
Chart::data_sets() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.Chart.data_sets)
  return data_sets_;
}

// float xaxis_min = 2;
inline void Chart::clear_xaxis_min() {
  xaxis_min_ = 0;
}
inline float Chart::xaxis_min() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_min)
  return xaxis_min_;
}
inline void Chart::set_xaxis_min(float value) {
  
  xaxis_min_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_min)
}

// float xaxis_max = 3;
inline void Chart::clear_xaxis_max() {
  xaxis_max_ = 0;
}
inline float Chart::xaxis_max() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_max)
  return xaxis_max_;
}
inline void Chart::set_xaxis_max(float value) {
  
  xaxis_max_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_max)
}

// string xaxis_label = 4;
inline void Chart::clear_xaxis_label() {
  xaxis_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chart::xaxis_label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.xaxis_label)
  return xaxis_label_.GetNoArena();
}
inline void Chart::set_xaxis_label(const ::std::string& value) {
  
  xaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.xaxis_label)
}
#if LANG_CXX11
inline void Chart::set_xaxis_label(::std::string&& value) {
  
  xaxis_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.xaxis_label)
}
#endif
inline void Chart::set_xaxis_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  xaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.xaxis_label)
}
inline void Chart::set_xaxis_label(const char* value, size_t size) {
  
  xaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.xaxis_label)
}
inline ::std::string* Chart::mutable_xaxis_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.xaxis_label)
  return xaxis_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chart::release_xaxis_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.xaxis_label)
  
  return xaxis_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chart::set_allocated_xaxis_label(::std::string* xaxis_label) {
  if (xaxis_label != NULL) {
    
  } else {
    
  }
  xaxis_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xaxis_label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.xaxis_label)
}

// float yaxis_min = 5;
inline void Chart::clear_yaxis_min() {
  yaxis_min_ = 0;
}
inline float Chart::yaxis_min() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_min)
  return yaxis_min_;
}
inline void Chart::set_yaxis_min(float value) {
  
  yaxis_min_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_min)
}

// float yaxis_max = 6;
inline void Chart::clear_yaxis_max() {
  yaxis_max_ = 0;
}
inline float Chart::yaxis_max() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_max)
  return yaxis_max_;
}
inline void Chart::set_yaxis_max(float value) {
  
  yaxis_max_ = value;
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_max)
}

// string yaxis_label = 7;
inline void Chart::clear_yaxis_label() {
  yaxis_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chart::yaxis_label() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.yaxis_label)
  return yaxis_label_.GetNoArena();
}
inline void Chart::set_yaxis_label(const ::std::string& value) {
  
  yaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.yaxis_label)
}
#if LANG_CXX11
inline void Chart::set_yaxis_label(::std::string&& value) {
  
  yaxis_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.yaxis_label)
}
#endif
inline void Chart::set_yaxis_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  yaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.yaxis_label)
}
inline void Chart::set_yaxis_label(const char* value, size_t size) {
  
  yaxis_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.yaxis_label)
}
inline ::std::string* Chart::mutable_yaxis_label() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.yaxis_label)
  return yaxis_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chart::release_yaxis_label() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.yaxis_label)
  
  return yaxis_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chart::set_allocated_yaxis_label(::std::string* yaxis_label) {
  if (yaxis_label != NULL) {
    
  } else {
    
  }
  yaxis_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yaxis_label);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.yaxis_label)
}

// string title = 8;
inline void Chart::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chart::title() const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.Chart.title)
  return title_.GetNoArena();
}
inline void Chart::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:webrtc.analytics.Chart.title)
}
#if LANG_CXX11
inline void Chart::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:webrtc.analytics.Chart.title)
}
#endif
inline void Chart::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:webrtc.analytics.Chart.title)
}
inline void Chart::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:webrtc.analytics.Chart.title)
}
inline ::std::string* Chart::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.Chart.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chart::release_title() {
  // @@protoc_insertion_point(field_release:webrtc.analytics.Chart.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chart::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:webrtc.analytics.Chart.title)
}

// -------------------------------------------------------------------

// ChartCollection

// repeated .webrtc.analytics.Chart charts = 1;
inline int ChartCollection::charts_size() const {
  return charts_.size();
}
inline void ChartCollection::clear_charts() {
  charts_.Clear();
}
inline ::webrtc::analytics::Chart* ChartCollection::mutable_charts(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.analytics.ChartCollection.charts)
  return charts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::Chart >*
ChartCollection::mutable_charts() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.analytics.ChartCollection.charts)
  return &charts_;
}
inline const ::webrtc::analytics::Chart& ChartCollection::charts(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.analytics.ChartCollection.charts)
  return charts_.Get(index);
}
inline ::webrtc::analytics::Chart* ChartCollection::add_charts() {
  // @@protoc_insertion_point(field_add:webrtc.analytics.ChartCollection.charts)
  return charts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::webrtc::analytics::Chart >&
ChartCollection::charts() const {
  // @@protoc_insertion_point(field_list:webrtc.analytics.ChartCollection.charts)
  return charts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace analytics
}  // namespace webrtc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::webrtc::analytics::ChartStyle_Type> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chart_2eproto
